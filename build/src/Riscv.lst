GAS LISTING /tmp/ccYCTr0w.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB41:
  11              		.file 1 "src/Riscv.cpp"
   1:src/Riscv.cpp **** //
   2:src/Riscv.cpp **** // Created by os on 5/5/22.
   3:src/Riscv.cpp **** //
   4:src/Riscv.cpp **** 
   5:src/Riscv.cpp **** #include "../h/Riscv.hpp"
   6:src/Riscv.cpp **** #include "../lib/console.h"
   7:src/Riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   8:src/Riscv.cpp **** #include "../h/Scheduler.hpp"
   9:src/Riscv.cpp **** #include "../h/TCB.hpp"
  10:src/Riscv.cpp **** #include "../h/SemaphoreBase.hpp"
  11:src/Riscv.cpp **** #include "../h/kernel_functions.hpp"
  12:src/Riscv.cpp **** 
  13:src/Riscv.cpp **** 
  14:src/Riscv.cpp **** void Riscv::popSppSpie(){
  12              		.loc 1 14 25
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  15:src/Riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 15 5
  21              		.loc 1 15 38 is_stmt 0
  22              	#APP
  23              	# 15 "src/Riscv.cpp" 1
  16              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 16 5 is_stmt 1
  27              		.loc 1 16 29 is_stmt 0
  28              	# 16 "src/Riscv.cpp" 1
  17              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 17 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE41:
  42              		.section	.rodata.str1.8,"aMS",@progbits,1
GAS LISTING /tmp/ccYCTr0w.s 			page 2


  43              		.align	3
  44              	.LC0:
  45 0000 73636175 		.string	"scause :"
  45      7365203A 
  45      00
  46 0009 00000000 		.align	3
  46      000000
  47              	.LC1:
  48 0010 0A00     		.string	"\n"
  49              		.text
  50              		.align	2
  51              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  53              	_ZN5Riscv20handleSupervisorTrapEv:
  54              	.LFB42:
  18:src/Riscv.cpp **** 
  19:src/Riscv.cpp **** 
  20:src/Riscv.cpp **** void Riscv::handleSupervisorTrap(){
  55              		.loc 1 20 35 is_stmt 1
  56              		.cfi_startproc
  57              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
  58              		.cfi_lsda 0x1b,.LLSDA42
  59 0020 130101EF 		addi	sp,sp,-272
  60              		.cfi_def_cfa_offset 272
  61 0024 23341110 		sd	ra,264(sp)
  62 0028 23308110 		sd	s0,256(sp)
  63 002c 233C910E 		sd	s1,248(sp)
  64 0030 2338210F 		sd	s2,240(sp)
  65 0034 2334310F 		sd	s3,232(sp)
  66              		.cfi_offset 1, -8
  67              		.cfi_offset 8, -16
  68              		.cfi_offset 9, -24
  69              		.cfi_offset 18, -32
  70              		.cfi_offset 19, -40
  71 0038 13040111 		addi	s0,sp,272
  72              		.cfi_def_cfa 8, 0
  21:src/Riscv.cpp ****     __asm__ volatile("mv s1, a0");
  73              		.loc 1 21 5
  74              		.loc 1 21 34 is_stmt 0
  75              	#APP
  76              	# 21 "src/Riscv.cpp" 1
  22              	    __asm__ volatile("mv s2, a1");
  77              		mv s1, a0
  78              	# 0 "" 2
  79              		.loc 1 22 5 is_stmt 1
  80              		.loc 1 22 34 is_stmt 0
  81              	# 22 "src/Riscv.cpp" 1
  23              	    __asm__ volatile("mv s3, a2");
  82              		mv s2, a1
  83              	# 0 "" 2
  84              		.loc 1 23 5 is_stmt 1
  85              		.loc 1 23 34 is_stmt 0
  86              	# 23 "src/Riscv.cpp" 1
  24              	    __asm__ volatile("mv s4, a3");
  87              		mv s3, a2
  88              	# 0 "" 2
  89              		.loc 1 24 5 is_stmt 1
  90              		.loc 1 24 34 is_stmt 0
GAS LISTING /tmp/ccYCTr0w.s 			page 3


  91              	# 24 "src/Riscv.cpp" 1
  25              	    __asm__ volatile("mv s5, a4");
  92              		mv s4, a3
  93              	# 0 "" 2
  94              		.loc 1 25 5 is_stmt 1
  95              		.loc 1 25 34 is_stmt 0
  96              	# 25 "src/Riscv.cpp" 1
  26              	    uint64 volatile scause = r_scause();
  97              		mv s5, a4
  98              	# 0 "" 2
  99              		.loc 1 26 5 is_stmt 1
 100              	#NO_APP
 101              	.LBB141:
 102              	.LBB142:
 103              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** #ifndef RISCV_HPP
   2:src/../h/Riscv.hpp **** #define RISCV_HPP
   3:src/../h/Riscv.hpp **** 
   4:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   5:src/../h/Riscv.hpp **** 
   6:src/../h/Riscv.hpp **** class Riscv{
   7:src/../h/Riscv.hpp **** public:
   8:src/../h/Riscv.hpp ****     // pop spp and spie bits from sstatus (has to be non-inline function)
   9:src/../h/Riscv.hpp ****     static void popSppSpie();
  10:src/../h/Riscv.hpp **** 
  11:src/../h/Riscv.hpp ****     static void pushRegisters();
  12:src/../h/Riscv.hpp **** 
  13:src/../h/Riscv.hpp ****     static void popRegisters();
  14:src/../h/Riscv.hpp **** 
  15:src/../h/Riscv.hpp ****     static uint64 r_scause();
  16:src/../h/Riscv.hpp **** 
  17:src/../h/Riscv.hpp ****     static void w_scause(uint64 scause);
  18:src/../h/Riscv.hpp **** 
  19:src/../h/Riscv.hpp ****     static uint64 r_sepc();
  20:src/../h/Riscv.hpp **** 
  21:src/../h/Riscv.hpp ****     static void w_sepc(uint64 sepc);
  22:src/../h/Riscv.hpp **** 
  23:src/../h/Riscv.hpp ****     static uint64 r_stvec();
  24:src/../h/Riscv.hpp **** 
  25:src/../h/Riscv.hpp ****     static void w_stvec(uint64 stvec);
  26:src/../h/Riscv.hpp **** 
  27:src/../h/Riscv.hpp ****     static uint64 r_stval();
  28:src/../h/Riscv.hpp **** 
  29:src/../h/Riscv.hpp ****     static void w_stval(uint64 stval);
  30:src/../h/Riscv.hpp **** 
  31:src/../h/Riscv.hpp ****     enum BitMaskSip{
  32:src/../h/Riscv.hpp ****         SIP_SSIP = (1 << 1),
  33:src/../h/Riscv.hpp ****         SIP_STIP = (1 << 5),
  34:src/../h/Riscv.hpp ****         SIP_SEIP = (1 << 9),
  35:src/../h/Riscv.hpp ****     };
  36:src/../h/Riscv.hpp **** 
  37:src/../h/Riscv.hpp ****     static void ms_sip(uint64 mask);
  38:src/../h/Riscv.hpp **** 
  39:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  40:src/../h/Riscv.hpp **** 
  41:src/../h/Riscv.hpp ****     static uint64 r_sip();
  42:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/ccYCTr0w.s 			page 4


  43:src/../h/Riscv.hpp ****     static void w_sip(uint64 sip);
  44:src/../h/Riscv.hpp **** 
  45:src/../h/Riscv.hpp ****     static void ms_sie(uint64 mask);
  46:src/../h/Riscv.hpp **** 
  47:src/../h/Riscv.hpp ****     static void mc_sie(uint64 mask);
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp ****     static uint64 r_sie();
  50:src/../h/Riscv.hpp **** 
  51:src/../h/Riscv.hpp ****     static void w_sie(uint64 sie);
  52:src/../h/Riscv.hpp **** 
  53:src/../h/Riscv.hpp ****     enum BitMaskSstatus{
  54:src/../h/Riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  55:src/../h/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  56:src/../h/Riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  57:src/../h/Riscv.hpp ****     };
  58:src/../h/Riscv.hpp **** 
  59:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  60:src/../h/Riscv.hpp **** 
  61:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  62:src/../h/Riscv.hpp **** 
  63:src/../h/Riscv.hpp ****     static uint64 r_sstatus();
  64:src/../h/Riscv.hpp **** 
  65:src/../h/Riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  66:src/../h/Riscv.hpp **** 
  67:src/../h/Riscv.hpp ****     static void supervisorTrap();
  68:src/../h/Riscv.hpp **** private:
  69:src/../h/Riscv.hpp ****     static void handleSupervisorTrap();
  70:src/../h/Riscv.hpp **** };
  71:src/../h/Riscv.hpp **** 
  72:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause(){
  73:src/../h/Riscv.hpp ****     uint64 volatile scause;
 104              		.loc 2 73 5
  74:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %[scause], scause" : [scause] "=r"(scause));
 105              		.loc 2 74 5
 106              		.loc 2 74 71 is_stmt 0
 107              	#APP
 108              	# 74 "src/../h/Riscv.hpp" 1
  75              	    return scause;
 109              		csrr a5, scause
 110              	# 0 "" 2
 111              	#NO_APP
 112 0054 2330F4F6 		sd	a5,-160(s0)
 113              		.loc 2 75 5 is_stmt 1
 114              		.loc 2 75 12 is_stmt 0
 115 0058 833704F6 		ld	a5,-160(s0)
 116              	.LBE142:
 117              	.LBE141:
 118              		.loc 1 26 39
 119 005c 2334F4FC 		sd	a5,-56(s0)
  27:src/Riscv.cpp **** 
  28:src/Riscv.cpp ****     if(scause == 0x8000000000000001UL){
 120              		.loc 1 28 5 is_stmt 1
 121              	.LBB143:
 122              		.loc 1 28 15 is_stmt 0
 123 0060 033784FC 		ld	a4,-56(s0)
 124              		.loc 1 28 5
 125 0064 9307F0FF 		li	a5,-1
GAS LISTING /tmp/ccYCTr0w.s 			page 5


 126 0068 9397F703 		slli	a5,a5,63
 127 006c 93871700 		addi	a5,a5,1
 128 0070 6304F70C 		beq	a4,a5,.L45
 129              	.LBE143:
  29:src/Riscv.cpp ****         // interrupt: yes, cause: supervisor software interrupt (timer)
  30:src/Riscv.cpp ****         TCB::timeSliceCounter++;
  31:src/Riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()){
  32:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc();
  33:src/Riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
  34:src/Riscv.cpp ****             TCB::timeSliceCounter = 0;
  35:src/Riscv.cpp ****             TCB::dispatch();
  36:src/Riscv.cpp ****             w_sstatus(sstatus);
  37:src/Riscv.cpp ****             w_sepc(sepc);
  38:src/Riscv.cpp ****         }
  39:src/Riscv.cpp **** 
  40:src/Riscv.cpp ****         mc_sip(SIP_SSIP);
  41:src/Riscv.cpp ****     }
  42:src/Riscv.cpp ****     else if(scause == 0x8000000000000009UL){
 130              		.loc 1 42 10 is_stmt 1
 131              	.LBB589:
 132              	.LBB144:
 133              		.loc 1 42 20 is_stmt 0
 134 0074 033784FC 		ld	a4,-56(s0)
 135              		.loc 1 42 10
 136 0078 9307F0FF 		li	a5,-1
 137 007c 9397F703 		slli	a5,a5,63
 138 0080 93879700 		addi	a5,a5,9
 139 0084 6308F714 		beq	a4,a5,.L46
 140              	.LBE144:
 141              	.LBE589:
  43:src/Riscv.cpp ****         // interrupt: yes, cause: supervisor external interrupt (timer)
  44:src/Riscv.cpp ****         /*int deviceInterrupt = plic_claim();
  45:src/Riscv.cpp **** 
  46:src/Riscv.cpp ****         if(deviceInterrupt == 0x0a){
  47:src/Riscv.cpp ****             if(flag == 0){
  48:src/Riscv.cpp ****                 //__putc('@');
  49:src/Riscv.cpp ****                 //__putc('\n');
  50:src/Riscv.cpp ****                 flag = 1;
  51:src/Riscv.cpp ****             }
  52:src/Riscv.cpp ****         }
  53:src/Riscv.cpp **** 
  54:src/Riscv.cpp ****         plic_complete(deviceInterrupt);*/
  55:src/Riscv.cpp ****         console_handler();
  56:src/Riscv.cpp ****     }
  57:src/Riscv.cpp ****     else if(scause == 8) {
 142              		.loc 1 57 10 is_stmt 1
 143              	.LBB590:
 144              	.LBB544:
 145              	.LBB145:
 146              		.loc 1 57 20 is_stmt 0
 147 0088 033784FC 		ld	a4,-56(s0)
 148              		.loc 1 57 10
 149 008c 93078000 		li	a5,8
 150 0090 6308F714 		beq	a4,a5,.L47
 151              	.LBE145:
 152              	.LBE544:
 153              	.LBE590:
GAS LISTING /tmp/ccYCTr0w.s 			page 6


  58:src/Riscv.cpp ****         uint32 id;
  59:src/Riscv.cpp ****         __asm__ volatile("mv %0,s1":"=r"(id));
  60:src/Riscv.cpp ****         if(id == 0x01){
  61:src/Riscv.cpp ****             size_t sz;
  62:src/Riscv.cpp ****             __asm__ volatile("mv %[sz],s2": [sz]"=r"(sz));
  63:src/Riscv.cpp ****             void* result = MemoryAllocator::malloc(sz);
  64:src/Riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(result)); // result is already in a0, but just in case
  65:src/Riscv.cpp ****         }else if(id == 0x02) {
  66:src/Riscv.cpp ****             void *addr = 0;
  67:src/Riscv.cpp ****             __asm__ volatile("mv %0,s2":"=r"(addr));
  68:src/Riscv.cpp ****             int result = MemoryAllocator::free(addr);
  69:src/Riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(result));
  70:src/Riscv.cpp ****         }else if(id == 0x11){
  71:src/Riscv.cpp ****             TCB** handle;
  72:src/Riscv.cpp ****             void(*start_routine)(void*);
  73:src/Riscv.cpp ****             void* arg;
  74:src/Riscv.cpp ****             void* stack;
  75:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
  76:src/Riscv.cpp ****             __asm__ volatile("mv %[start_routine],s3":[start_routine]"=r"(start_routine));
  77:src/Riscv.cpp ****             __asm__ volatile("mv %[arg],s4":[arg]"=r"(arg));
  78:src/Riscv.cpp ****             __asm__ volatile("mv %[stack],s5":[stack]"=r"(stack));
  79:src/Riscv.cpp **** 
  80:src/Riscv.cpp ****             *handle = TCB::createThread(start_routine, arg, stack);
  81:src/Riscv.cpp ****         }else if(id == 0x12){
  82:src/Riscv.cpp ****             int numberOfActiveThreads = TCB::numberOfActiveThreads;
  83:src/Riscv.cpp ****             if(numberOfActiveThreads == 1){
  84:src/Riscv.cpp ****                 __asm__ volatile("li a0,-1");
  85:src/Riscv.cpp ****             }else{
  86:src/Riscv.cpp ****                 TCB::running->setFinished(true);
  87:src/Riscv.cpp **** 
  88:src/Riscv.cpp ****                 TCB* old = TCB::running;
  89:src/Riscv.cpp ****                 numberOfActiveThreads--;
  90:src/Riscv.cpp ****                 TCB::running = Scheduler::get()->data;
  91:src/Riscv.cpp ****                 TCB::contextSwitch(&old->context, &TCB::running->context);
  92:src/Riscv.cpp ****             }
  93:src/Riscv.cpp ****         }else if(id == 0x13){
  94:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc() + 4;
  95:src/Riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
  96:src/Riscv.cpp ****             TCB::timeSliceCounter = 0;
  97:src/Riscv.cpp **** 
  98:src/Riscv.cpp ****             TCB::dispatch();
  99:src/Riscv.cpp ****             w_sstatus(sstatus);
 100:src/Riscv.cpp ****             w_sepc(sepc);
 101:src/Riscv.cpp ****             return;
 102:src/Riscv.cpp ****         }else if(id == 0x21) {
 103:src/Riscv.cpp ****             SemaphoreBase** handle;
 104:src/Riscv.cpp ****             unsigned val;
 105:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 106:src/Riscv.cpp ****             __asm__ volatile("mv %[val],s3":[val]"=r"(val));
 107:src/Riscv.cpp **** 
 108:src/Riscv.cpp ****             *handle = new SemaphoreBase(val);
 109:src/Riscv.cpp ****         }else if(id == 0x22){
 110:src/Riscv.cpp ****             SemaphoreBase* handle;
 111:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 112:src/Riscv.cpp ****             int status = handle->close();
 113:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[status]"::[status]"r"(status));
 114:src/Riscv.cpp ****         }else if(id == 0x23){
GAS LISTING /tmp/ccYCTr0w.s 			page 7


 115:src/Riscv.cpp ****             SemaphoreBase* handle;
 116:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 117:src/Riscv.cpp ****             int status = handle->wait();
 118:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[status]"::[status]"r"(status));
 119:src/Riscv.cpp ****         }else if(id == 0x24){
 120:src/Riscv.cpp ****             SemaphoreBase* handle;
 121:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 122:src/Riscv.cpp ****             int status = handle->signal();
 123:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[status]"::[status]"r"(status));
 124:src/Riscv.cpp ****         }else if(id == 0x41) {
 125:src/Riscv.cpp ****             //ms_sstatus(SSTATUS_SIE);
 126:src/Riscv.cpp ****             char c = __getc();
 127:src/Riscv.cpp ****             //mc_sstatus(SSTATUS_SIE);
 128:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[c]"::[c]"r"(c));
 129:src/Riscv.cpp ****             console_handler();
 130:src/Riscv.cpp ****         }else if(id == 0x42){
 131:src/Riscv.cpp ****             char c;
 132:src/Riscv.cpp ****             __asm__ volatile("mv %[c],s2":[c]"=r"(c));
 133:src/Riscv.cpp ****             __putc(c);
 134:src/Riscv.cpp ****             //console_handler();
 135:src/Riscv.cpp ****         }else if(id == 0x99){
 136:src/Riscv.cpp ****             ms_sstatus(SSTATUS_SPP);
 137:src/Riscv.cpp ****             uint64 volatile pc;
 138:src/Riscv.cpp ****             __asm__ volatile("mv %[pc], s6":[pc]"=r"(pc));
 139:src/Riscv.cpp ****             w_sepc(pc + 8);
 140:src/Riscv.cpp ****             return;
 141:src/Riscv.cpp ****         }else if(id == 0x101){
 142:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc();
 143:src/Riscv.cpp ****             w_sepc(sepc + 4);
 144:src/Riscv.cpp ****             return;
 145:src/Riscv.cpp ****         }
 146:src/Riscv.cpp ****         /**
 147:src/Riscv.cpp ****             TREBA U SVAKOJ IF GRANI GDE SE VRACA REZULTAT KROZ a0 DA SE OVE DVE LINIJE
 148:src/Riscv.cpp ****             ISPOS UBACE, NE TREBA ZA SVE.
 149:src/Riscv.cpp **** 
 150:src/Riscv.cpp **** 
 151:src/Riscv.cpp ****             MEMORY ALLOCATOR - ONEMOGUCITI KORISNIKU DA KORISTI DIREKTNO
 152:src/Riscv.cpp **** 
 153:src/Riscv.cpp ****         */
 154:src/Riscv.cpp ****         __asm__ volatile("li s6,-1337");
 155:src/Riscv.cpp ****         __asm__ volatile("li s5,-1337");
 156:src/Riscv.cpp ****         uint64 volatile sepc = Riscv::r_sepc();
 157:src/Riscv.cpp ****         Riscv::w_sepc(sepc+4);
 158:src/Riscv.cpp ****         //Riscv::mc_sstatus(0x02);
 159:src/Riscv.cpp ****     }
 160:src/Riscv.cpp ****     else if(scause == 9){
 154              		.loc 1 160 10 is_stmt 1
 155              	.LBB591:
 156              	.LBB545:
 157              	.LBB517:
 158              	.LBB146:
 159              		.loc 1 160 20 is_stmt 0
 160 0094 033784FC 		ld	a4,-56(s0)
 161              		.loc 1 160 10
 162 0098 93079000 		li	a5,9
 163 009c 6316F75C 		bne	a4,a5,.L24
 164              	.LBB147:
GAS LISTING /tmp/ccYCTr0w.s 			page 8


 161:src/Riscv.cpp ****         // CALL 1 and 2 ARE NEEDED
 162:src/Riscv.cpp ****         uint32 id;
 165              		.loc 1 162 9 is_stmt 1
 163:src/Riscv.cpp ****         __asm__ volatile("mv %0,s1":"=r"(id));
 166              		.loc 1 163 9
 167              		.loc 1 163 46 is_stmt 0
 168              	#APP
 169              	# 163 "src/Riscv.cpp" 1
 164              	        if(id == 0x01){
 170              		mv a5,s1
 171              	# 0 "" 2
 172              	#NO_APP
 173 00a4 9B870700 		sext.w	a5,a5
 174              	.LVL0:
 175              		.loc 1 164 9 is_stmt 1
 176              	.LBB148:
 177 00a8 13071000 		li	a4,1
 178 00ac 6382E738 		beq	a5,a4,.L48
 179              	.LBE148:
 180              	.LBE147:
 181              	.LBE146:
 182              	.LBE517:
 183              	.LBE545:
 184              	.LBE591:
 165:src/Riscv.cpp ****             size_t sz;
 166:src/Riscv.cpp ****             __asm__ volatile("mv %[sz],s2": [sz]"=r"(sz));
 167:src/Riscv.cpp ****             void* result = MemoryAllocator::malloc(sz);
 168:src/Riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(result)); // result is already in a0, but just in case
 169:src/Riscv.cpp ****         }else if(id == 0x02) {
 185              		.loc 1 169 15
 186              	.LBB592:
 187              	.LBB546:
 188              	.LBB518:
 189              	.LBB339:
 190              	.LBB324:
 191              	.LBB304:
 192              	.LBB149:
 193 00b0 13072000 		li	a4,2
 194 00b4 638AE73A 		beq	a5,a4,.L49
 195              	.LBE149:
 196              	.LBE304:
 197              	.LBE324:
 198              	.LBE339:
 199              	.LBE518:
 200              	.LBE546:
 201              	.LBE592:
 170:src/Riscv.cpp ****             //__asm__ volatile("mv s1,a1"); // in case addr is stored in register a1, so it's not o
 171:src/Riscv.cpp ****             void *addr = 0;
 172:src/Riscv.cpp ****             __asm__ volatile("mv %0,s2":"=r"(addr));
 173:src/Riscv.cpp ****             int result = MemoryAllocator::free(addr);
 174:src/Riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(result));
 175:src/Riscv.cpp ****         }else if(id == 0x11){
 202              		.loc 1 175 15
 203              	.LBB593:
 204              	.LBB547:
 205              	.LBB519:
 206              	.LBB340:
GAS LISTING /tmp/ccYCTr0w.s 			page 9


 207              	.LBB325:
 208              	.LBB305:
 209              	.LBB289:
 210              	.LBB150:
 211 00b8 13071001 		li	a4,17
 212 00bc 6380E73C 		beq	a5,a4,.L50
 213              	.LBE150:
 214              	.LBE289:
 215              	.LBE305:
 216              	.LBE325:
 217              	.LBE340:
 218              	.LBE519:
 219              	.LBE547:
 220              	.LBE593:
 176:src/Riscv.cpp ****             //callSupervisedTrap(0x11, handle, (void*)start_routine, arg, stack);
 177:src/Riscv.cpp ****             TCB** handle;
 178:src/Riscv.cpp ****             void(*start_routine)(void*);
 179:src/Riscv.cpp ****             void* arg;
 180:src/Riscv.cpp ****             void* stack;
 181:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 182:src/Riscv.cpp ****             __asm__ volatile("mv %[start_routine],s3":[start_routine]"=r"(start_routine));
 183:src/Riscv.cpp ****             __asm__ volatile("mv %[arg],s4":[arg]"=r"(arg));
 184:src/Riscv.cpp ****             __asm__ volatile("mv %[stack],s5":[stack]"=r"(stack));
 185:src/Riscv.cpp **** 
 186:src/Riscv.cpp ****             *handle = TCB::createThread(start_routine, arg, stack);
 187:src/Riscv.cpp ****         }else if(id == 0x12){
 221              		.loc 1 187 15
 222              	.LBB594:
 223              	.LBB548:
 224              	.LBB520:
 225              	.LBB341:
 226              	.LBB326:
 227              	.LBB306:
 228              	.LBB290:
 229              	.LBB275:
 230              	.LBB151:
 231 00c0 13072001 		li	a4,18
 232 00c4 638CE73C 		beq	a5,a4,.L51
 233              	.LBE151:
 234              	.LBE275:
 235              	.LBE290:
 236              	.LBE306:
 237              	.LBE326:
 238              	.LBE341:
 239              	.LBE520:
 240              	.LBE548:
 241              	.LBE594:
 188:src/Riscv.cpp ****             int numberOfActiveThreads = TCB::numberOfActiveThreads;
 189:src/Riscv.cpp ****             if(numberOfActiveThreads == 1){
 190:src/Riscv.cpp ****                 __asm__ volatile("li a0,-1");
 191:src/Riscv.cpp ****             }else{
 192:src/Riscv.cpp ****                 TCB::running->setFinished(true);
 193:src/Riscv.cpp **** 
 194:src/Riscv.cpp ****                 TCB* old = TCB::running;
 195:src/Riscv.cpp ****                 numberOfActiveThreads--;
 196:src/Riscv.cpp ****                 TCB::running = Scheduler::get()->data;
 197:src/Riscv.cpp ****                 TCB::contextSwitch(&old->context, &TCB::running->context);
GAS LISTING /tmp/ccYCTr0w.s 			page 10


 198:src/Riscv.cpp ****             }
 199:src/Riscv.cpp ****         }else if(id == 0x13){
 242              		.loc 1 199 15
 243              	.LBB595:
 244              	.LBB549:
 245              	.LBB521:
 246              	.LBB342:
 247              	.LBB327:
 248              	.LBB307:
 249              	.LBB291:
 250              	.LBB276:
 251              	.LBB262:
 252              	.LBB152:
 253 00c8 13073001 		li	a4,19
 254 00cc 6382E742 		beq	a5,a4,.L52
 255              	.LBE152:
 256              	.LBE262:
 257              	.LBE276:
 258              	.LBE291:
 259              	.LBE307:
 260              	.LBE327:
 261              	.LBE342:
 262              	.LBE521:
 263              	.LBE549:
 264              	.LBE595:
 200:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc() + 4;
 201:src/Riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 202:src/Riscv.cpp ****             TCB::timeSliceCounter = 0;
 203:src/Riscv.cpp **** 
 204:src/Riscv.cpp ****             TCB::dispatch();
 205:src/Riscv.cpp ****             w_sstatus(sstatus);
 206:src/Riscv.cpp ****             w_sepc(sepc);
 207:src/Riscv.cpp ****             return;
 208:src/Riscv.cpp ****         }else if(id == 0x21) {
 265              		.loc 1 208 15
 266              	.LBB596:
 267              	.LBB550:
 268              	.LBB522:
 269              	.LBB343:
 270              	.LBB328:
 271              	.LBB308:
 272              	.LBB292:
 273              	.LBB277:
 274              	.LBB263:
 275              	.LBB246:
 276              	.LBB153:
 277 00d0 13071002 		li	a4,33
 278 00d4 6384E746 		beq	a5,a4,.L53
 279              	.LBE153:
 280              	.LBE246:
 281              	.LBE263:
 282              	.LBE277:
 283              	.LBE292:
 284              	.LBE308:
 285              	.LBE328:
 286              	.LBE343:
 287              	.LBE522:
GAS LISTING /tmp/ccYCTr0w.s 			page 11


 288              	.LBE550:
 289              	.LBE596:
 209:src/Riscv.cpp ****             SemaphoreBase** handle;
 210:src/Riscv.cpp ****             unsigned val;
 211:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 212:src/Riscv.cpp ****             __asm__ volatile("mv %[val],s3":[val]"=r"(val));
 213:src/Riscv.cpp **** 
 214:src/Riscv.cpp **** 
 215:src/Riscv.cpp ****             *handle = new SemaphoreBase(val);
 216:src/Riscv.cpp ****         }else if(id == 0x22){
 290              		.loc 1 216 15
 291              	.LBB597:
 292              	.LBB551:
 293              	.LBB523:
 294              	.LBB344:
 295              	.LBB329:
 296              	.LBB309:
 297              	.LBB293:
 298              	.LBB278:
 299              	.LBB264:
 300              	.LBB247:
 301              	.LBB227:
 302              	.LBB154:
 303 00d8 13072002 		li	a4,34
 304 00dc 6386E748 		beq	a5,a4,.L54
 305              	.LBE154:
 306              	.LBE227:
 307              	.LBE247:
 308              	.LBE264:
 309              	.LBE278:
 310              	.LBE293:
 311              	.LBE309:
 312              	.LBE329:
 313              	.LBE344:
 314              	.LBE523:
 315              	.LBE551:
 316              	.LBE597:
 217:src/Riscv.cpp ****             SemaphoreBase* handle;
 218:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 219:src/Riscv.cpp ****             int status = handle->close();
 220:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[status]"::[status]"r"(status));
 221:src/Riscv.cpp ****         }else if(id == 0x23){
 317              		.loc 1 221 15
 318              	.LBB598:
 319              	.LBB552:
 320              	.LBB524:
 321              	.LBB345:
 322              	.LBB330:
 323              	.LBB310:
 324              	.LBB294:
 325              	.LBB279:
 326              	.LBB265:
 327              	.LBB248:
 328              	.LBB228:
 329              	.LBB215:
 330              	.LBB155:
 331 00e0 13073002 		li	a4,35
GAS LISTING /tmp/ccYCTr0w.s 			page 12


 332 00e4 638CE748 		beq	a5,a4,.L55
 333              	.LBE155:
 334              	.LBE215:
 335              	.LBE228:
 336              	.LBE248:
 337              	.LBE265:
 338              	.LBE279:
 339              	.LBE294:
 340              	.LBE310:
 341              	.LBE330:
 342              	.LBE345:
 343              	.LBE524:
 344              	.LBE552:
 345              	.LBE598:
 222:src/Riscv.cpp ****             SemaphoreBase* handle;
 223:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 224:src/Riscv.cpp ****             int status = handle->wait();
 225:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[status]"::[status]"r"(status));
 226:src/Riscv.cpp ****         }else if(id == 0x24){
 346              		.loc 1 226 15
 347              	.LBB599:
 348              	.LBB553:
 349              	.LBB525:
 350              	.LBB346:
 351              	.LBB331:
 352              	.LBB311:
 353              	.LBB295:
 354              	.LBB280:
 355              	.LBB266:
 356              	.LBB249:
 357              	.LBB229:
 358              	.LBB216:
 359              	.LBB207:
 360              	.LBB156:
 361 00e8 13074002 		li	a4,36
 362 00ec 6382E74A 		beq	a5,a4,.L56
 363              	.LBE156:
 364              	.LBE207:
 365              	.LBE216:
 366              	.LBE229:
 367              	.LBE249:
 368              	.LBE266:
 369              	.LBE280:
 370              	.LBE295:
 371              	.LBE311:
 372              	.LBE331:
 373              	.LBE346:
 374              	.LBE525:
 375              	.LBE553:
 376              	.LBE599:
 227:src/Riscv.cpp ****             SemaphoreBase* handle;
 228:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 229:src/Riscv.cpp ****             int status = handle->signal();
 230:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[status]"::[status]"r"(status));
 231:src/Riscv.cpp ****         }else if(id == 0x41) {
 377              		.loc 1 231 15
 378              	.LBB600:
GAS LISTING /tmp/ccYCTr0w.s 			page 13


 379              	.LBB554:
 380              	.LBB526:
 381              	.LBB347:
 382              	.LBB332:
 383              	.LBB312:
 384              	.LBB296:
 385              	.LBB281:
 386              	.LBB267:
 387              	.LBB250:
 388              	.LBB230:
 389              	.LBB217:
 390              	.LBB208:
 391              	.LBB200:
 392              	.LBB157:
 393 00f0 13071004 		li	a4,65
 394 00f4 6388E74A 		beq	a5,a4,.L57
 395              	.LBE157:
 396              	.LBE200:
 397              	.LBE208:
 398              	.LBE217:
 399              	.LBE230:
 400              	.LBE250:
 401              	.LBE267:
 402              	.LBE281:
 403              	.LBE296:
 404              	.LBE312:
 405              	.LBE332:
 406              	.LBE347:
 407              	.LBE526:
 408              	.LBE554:
 409              	.LBE600:
 232:src/Riscv.cpp ****             //ms_sstatus(SSTATUS_SIE);
 233:src/Riscv.cpp ****             char c = __getc();
 234:src/Riscv.cpp ****             //mc_sstatus(SSTATUS_SIE);
 235:src/Riscv.cpp ****             //console_handler();
 236:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[c]"::[c]"r"(c));
 237:src/Riscv.cpp ****         }else if(id == 0x42){
 410              		.loc 1 237 15
 411              	.LBB601:
 412              	.LBB555:
 413              	.LBB527:
 414              	.LBB348:
 415              	.LBB333:
 416              	.LBB313:
 417              	.LBB297:
 418              	.LBB282:
 419              	.LBB268:
 420              	.LBB251:
 421              	.LBB231:
 422              	.LBB218:
 423              	.LBB209:
 424              	.LBB201:
 425              	.LBB194:
 426              	.LBB158:
 427 00f8 13072004 		li	a4,66
 428 00fc 638CE74A 		beq	a5,a4,.L58
 429              	.LBE158:
GAS LISTING /tmp/ccYCTr0w.s 			page 14


 430              	.LBE194:
 431              	.LBE201:
 432              	.LBE209:
 433              	.LBE218:
 434              	.LBE231:
 435              	.LBE251:
 436              	.LBE268:
 437              	.LBE282:
 438              	.LBE297:
 439              	.LBE313:
 440              	.LBE333:
 441              	.LBE348:
 442              	.LBE527:
 443              	.LBE555:
 444              	.LBE601:
 238:src/Riscv.cpp ****             char c;
 239:src/Riscv.cpp ****             __asm__ volatile("mv %[c],s2":[c]"=r"(c));
 240:src/Riscv.cpp ****             __putc(c);
 241:src/Riscv.cpp ****             //console_handler();
 242:src/Riscv.cpp ****         }else if(id == 0x66) {
 445              		.loc 1 242 15
 446              	.LBB602:
 447              	.LBB556:
 448              	.LBB528:
 449              	.LBB349:
 450              	.LBB334:
 451              	.LBB314:
 452              	.LBB298:
 453              	.LBB283:
 454              	.LBB269:
 455              	.LBB252:
 456              	.LBB232:
 457              	.LBB219:
 458              	.LBB210:
 459              	.LBB202:
 460              	.LBB195:
 461              	.LBB189:
 462              	.LBB159:
 463 0100 13076006 		li	a4,102
 464 0104 6382E74C 		beq	a5,a4,.L59
 465              	.LBE159:
 466              	.LBE189:
 467              	.LBE195:
 468              	.LBE202:
 469              	.LBE210:
 470              	.LBE219:
 471              	.LBE232:
 472              	.LBE252:
 473              	.LBE269:
 474              	.LBE283:
 475              	.LBE298:
 476              	.LBE314:
 477              	.LBE334:
 478              	.LBE349:
 479              	.LBE528:
 480              	.LBE556:
 481              	.LBE602:
GAS LISTING /tmp/ccYCTr0w.s 			page 15


 243:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc() + 4;
 244:src/Riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 245:src/Riscv.cpp **** 
 246:src/Riscv.cpp ****             TCB* old = TCB::running;
 247:src/Riscv.cpp ****             TCB::numberOfActiveThreads--;
 248:src/Riscv.cpp **** 
 249:src/Riscv.cpp ****             TCB::running = Scheduler::get()->data;
 250:src/Riscv.cpp ****             TCB::contextSwitch(&old->context, &TCB::running->context);
 251:src/Riscv.cpp **** 
 252:src/Riscv.cpp ****             w_sstatus(sstatus);
 253:src/Riscv.cpp ****             w_sepc(sepc);
 254:src/Riscv.cpp ****             return;
 255:src/Riscv.cpp ****         }else if(id==0x88) {
 482              		.loc 1 255 15
 483              	.LBB603:
 484              	.LBB557:
 485              	.LBB529:
 486              	.LBB350:
 487              	.LBB335:
 488              	.LBB315:
 489              	.LBB299:
 490              	.LBB284:
 491              	.LBB270:
 492              	.LBB253:
 493              	.LBB233:
 494              	.LBB220:
 495              	.LBB211:
 496              	.LBB203:
 497              	.LBB196:
 498              	.LBB190:
 499              	.LBB185:
 500              	.LBB160:
 501 0108 13078008 		li	a4,136
 502 010c 638AE752 		beq	a5,a4,.L60
 503              	.LBE160:
 504              	.LBE185:
 505              	.LBE190:
 506              	.LBE196:
 507              	.LBE203:
 508              	.LBE211:
 509              	.LBE220:
 510              	.LBE233:
 511              	.LBE253:
 512              	.LBE270:
 513              	.LBE284:
 514              	.LBE299:
 515              	.LBE315:
 516              	.LBE335:
 517              	.LBE350:
 518              	.LBE529:
 519              	.LBE557:
 520              	.LBE603:
 256:src/Riscv.cpp ****             Riscv::mc_sstatus(Riscv::SSTATUS_SPP);
 257:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc();
 258:src/Riscv.cpp ****             w_sepc(sepc + 4);
 259:src/Riscv.cpp ****             return;
 260:src/Riscv.cpp ****         }else if(id == 0x99){
GAS LISTING /tmp/ccYCTr0w.s 			page 16


 521              		.loc 1 260 15
 522              	.LBB604:
 523              	.LBB558:
 524              	.LBB530:
 525              	.LBB351:
 526              	.LBB336:
 527              	.LBB316:
 528              	.LBB300:
 529              	.LBB285:
 530              	.LBB271:
 531              	.LBB254:
 532              	.LBB234:
 533              	.LBB221:
 534              	.LBB212:
 535              	.LBB204:
 536              	.LBB197:
 537              	.LBB191:
 538              	.LBB186:
 539              	.LBB174:
 540              	.LBB161:
 541 0110 13079009 		li	a4,153
 542 0114 6396E732 		bne	a5,a4,.L26
 543              	.LBB162:
 261:src/Riscv.cpp ****             ms_sstatus(SSTATUS_SPP);
 544              		.loc 1 261 13
 545              	.LVL1:
 546              	.LBB163:
 547              	.LBB164:
  76:src/../h/Riscv.hpp **** }
  77:src/../h/Riscv.hpp **** 
  78:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause){
  79:src/../h/Riscv.hpp **** __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
  80:src/../h/Riscv.hpp **** }
  81:src/../h/Riscv.hpp **** 
  82:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc(){
  83:src/../h/Riscv.hpp ****     uint64 volatile sepc;
  84:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" :[sepc]"=r"(sepc));
  85:src/../h/Riscv.hpp ****     return sepc;
  86:src/../h/Riscv.hpp **** }
  87:src/../h/Riscv.hpp **** 
  88:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc){
  89:src/../h/Riscv.hpp **** __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc]"r"(sepc));
  90:src/../h/Riscv.hpp **** }
  91:src/../h/Riscv.hpp **** 
  92:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec(){
  93:src/../h/Riscv.hpp ****     uint64 volatile stvec;
  94:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec":[stvec]"=r"(stvec));
  95:src/../h/Riscv.hpp ****     return stvec;
  96:src/../h/Riscv.hpp **** }
  97:src/../h/Riscv.hpp **** 
  98:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec){
  99:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]": : [stvec]"r"(stvec));
 100:src/../h/Riscv.hpp **** }
 101:src/../h/Riscv.hpp **** 
 102:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stval(){
 103:src/../h/Riscv.hpp ****     uint64 volatile stval;
 104:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval":[stval]"=r"(stval));
GAS LISTING /tmp/ccYCTr0w.s 			page 17


 105:src/../h/Riscv.hpp ****     return stval;
 106:src/../h/Riscv.hpp **** }
 107:src/../h/Riscv.hpp **** 
 108:src/../h/Riscv.hpp **** inline void Riscv::w_stval(uint64 stval){
 109:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]": : [stval]"r"(stval));
 110:src/../h/Riscv.hpp **** }
 111:src/../h/Riscv.hpp **** 
 112:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask){
 113:src/../h/Riscv.hpp ****     __asm__ volatile("csrs sip, %[mask]": : [mask]"r"(mask));
 114:src/../h/Riscv.hpp **** }
 115:src/../h/Riscv.hpp **** 
 116:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask){
 117:src/../h/Riscv.hpp ****     __asm__ volatile("csrc sip, %[mask]": : [mask]"r"(mask));
 118:src/../h/Riscv.hpp **** }
 119:src/../h/Riscv.hpp **** 
 120:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip(){
 121:src/../h/Riscv.hpp ****     uint64 volatile sip;
 122:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip":[sip]"=r"(sip));
 123:src/../h/Riscv.hpp ****     return sip;
 124:src/../h/Riscv.hpp **** }
 125:src/../h/Riscv.hpp **** 
 126:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip){
 127:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]": : [sip]"r"(sip));
 128:src/../h/Riscv.hpp **** }
 129:src/../h/Riscv.hpp **** 
 130:src/../h/Riscv.hpp **** inline void Riscv::ms_sie(uint64 mask){
 131:src/../h/Riscv.hpp ****     __asm__ volatile("csrs sie, %[mask]": : [mask]"r"(mask));
 132:src/../h/Riscv.hpp **** }
 133:src/../h/Riscv.hpp **** 
 134:src/../h/Riscv.hpp **** inline void Riscv::mc_sie(uint64 mask){
 135:src/../h/Riscv.hpp ****     __asm__ volatile("csrc sie, %[mask]": : [mask]"r"(mask));
 136:src/../h/Riscv.hpp **** }
 137:src/../h/Riscv.hpp **** 
 138:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sie(){
 139:src/../h/Riscv.hpp ****     uint64 volatile sie;
 140:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sie], sie":[sie]"=r"(sie));
 141:src/../h/Riscv.hpp ****     return sie;
 142:src/../h/Riscv.hpp **** }
 143:src/../h/Riscv.hpp **** 
 144:src/../h/Riscv.hpp **** inline void Riscv::w_sie(uint64 sie){
 145:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sie, %[sie]": : [sie]"r"(sie));
 146:src/../h/Riscv.hpp **** }
 147:src/../h/Riscv.hpp **** 
 148:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask){
 149:src/../h/Riscv.hpp ****     __asm__ volatile("csrs sstatus, %[mask]": : [mask]"r"(mask));
 548              		.loc 2 149 5
 549              		.loc 2 149 65 is_stmt 0
 550 0118 93070010 		li	a5,256
 551              	.LVL2:
 552              	#APP
 553              	# 149 "src/../h/Riscv.hpp" 1
 150              	}
 554              		csrs sstatus, a5
 555              	# 0 "" 2
 556              	.LVL3:
 557              	#NO_APP
 558              	.LBE164:
GAS LISTING /tmp/ccYCTr0w.s 			page 18


 559              	.LBE163:
 262:src/Riscv.cpp ****             uint64 volatile pc;
 560              		.loc 1 262 13 is_stmt 1
 263:src/Riscv.cpp ****             __asm__ volatile("mv %[pc], s6":[pc]"=r"(pc));
 561              		.loc 1 263 13
 562              		.loc 1 263 58 is_stmt 0
 563              	#APP
 564              	# 263 "src/Riscv.cpp" 1
 264              	            w_sepc(pc + 8);
 565              		mv a5, s6
 566              	# 0 "" 2
 567              	#NO_APP
 568 0124 2338F4F4 		sd	a5,-176(s0)
 569              		.loc 1 264 13 is_stmt 1
 570              		.loc 1 264 20 is_stmt 0
 571 0128 833704F5 		ld	a5,-176(s0)
 572              		.loc 1 264 19
 573 012c 93878700 		addi	a5,a5,8
 574              	.LVL4:
 575              	.LBB165:
 576              	.LBB166:
  89:src/../h/Riscv.hpp **** }
 577              		.loc 2 89 1 is_stmt 1
  89:src/../h/Riscv.hpp **** }
 578              		.loc 2 89 60 is_stmt 0
 579              	#APP
 580              	# 89 "src/../h/Riscv.hpp" 1
 581              		csrw sepc, a5
 582              	# 0 "" 2
 583              	.LVL5:
 584              	#NO_APP
 585              	.LBE166:
 586              	.LBE165:
 265:src/Riscv.cpp ****             return;
 587              		.loc 1 265 13 is_stmt 1
 588 0134 6F00C003 		j	.L3
 589              	.L45:
 590              	.LBE162:
 591              	.LBE161:
 592              	.LBE174:
 593              	.LBE186:
 594              	.LBE191:
 595              	.LBE197:
 596              	.LBE204:
 597              	.LBE212:
 598              	.LBE221:
 599              	.LBE234:
 600              	.LBE254:
 601              	.LBE271:
 602              	.LBE285:
 603              	.LBE300:
 604              	.LBE316:
 605              	.LBE336:
 606              	.LBE351:
 607              	.LBE530:
 608              	.LBE558:
 609              	.LBB559:
GAS LISTING /tmp/ccYCTr0w.s 			page 19


  30:src/Riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()){
 610              		.loc 1 30 9
  30:src/Riscv.cpp ****         if(TCB::timeSliceCounter >= TCB::running->getTimeSlice()){
 611              		.loc 1 30 30 is_stmt 0
 612 0138 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 612      03370700 
 613 0140 83370700 		ld	a5,0(a4)
 614 0144 93871700 		addi	a5,a5,1
 615 0148 2330F700 		sd	a5,0(a4)
  31:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc();
 616              		.loc 1 31 9 is_stmt 1
 617              	.LBB560:
  31:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc();
 618              		.loc 1 31 63 is_stmt 0
 619 014c 17070000 		la	a4,_ZN3TCB7runningE
 619      03370700 
 620 0154 03370700 		ld	a4,0(a4)
 621              	.LVL6:
 622              	.LBB561:
 623              	.LBB562:
 624              		.file 3 "src/../h/TCB.hpp"
   1:src/../h/TCB.hpp **** #ifndef TCB_HPP
   2:src/../h/TCB.hpp **** #define TCB_HPP
   3:src/../h/TCB.hpp **** 
   4:src/../h/TCB.hpp **** #include "../lib/hw.h"
   5:src/../h/TCB.hpp **** #include "Scheduler.hpp"
   6:src/../h/TCB.hpp **** #include "kernel_functions.hpp"
   7:src/../h/TCB.hpp **** #include "SchedulerNode.hpp"
   8:src/../h/TCB.hpp **** 
   9:src/../h/TCB.hpp **** class TCB{
  10:src/../h/TCB.hpp **** public:
  11:src/../h/TCB.hpp ****     ~TCB();
  12:src/../h/TCB.hpp ****     bool isFinished() const{return finished;}
  13:src/../h/TCB.hpp **** 
  14:src/../h/TCB.hpp ****     void setFinished(bool finished){this->finished = finished;}
  15:src/../h/TCB.hpp ****     uint64 getTimeSlice() const { return timeSlice;}
 625              		.loc 3 15 35 is_stmt 1
 626              		.loc 3 15 42 is_stmt 0
 627 0158 03370704 		ld	a4,64(a4)
 628              	.LVL7:
 629              	.LBE562:
 630              	.LBE561:
  31:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc();
 631              		.loc 1 31 9
 632 015c 63F8E702 		bgeu	a5,a4,.L61
 633              	.L5:
 634              	.LBE560:
  40:src/Riscv.cpp ****     }
 635              		.loc 1 40 9 is_stmt 1
 636              	.LVL8:
 637              	.LBB572:
 638              	.LBB573:
 117:src/../h/Riscv.hpp **** }
 639              		.loc 2 117 5
 117:src/../h/Riscv.hpp **** }
 640              		.loc 2 117 61 is_stmt 0
 641 0160 93072000 		li	a5,2
GAS LISTING /tmp/ccYCTr0w.s 			page 20


 642              	#APP
 643              	# 117 "src/../h/Riscv.hpp" 1
 644              		csrc sip, a5
 645              	# 0 "" 2
 646              	.LVL9:
 647              	#NO_APP
 648              	.L6:
 649              	.LBE573:
 650              	.LBE572:
 651              	.LBE559:
 652              	.LBE604:
 266:src/Riscv.cpp ****         }
 267:src/Riscv.cpp ****         /**
 268:src/Riscv.cpp ****             TREBA U SVAKOJ IF GRANI GDE SE VRACA REZULTAT KROZ a0 DA SE OVE DVE LINIJE
 269:src/Riscv.cpp ****             ISPOS UBACE, NE TREBA ZA SVE.
 270:src/Riscv.cpp **** 
 271:src/Riscv.cpp **** 
 272:src/Riscv.cpp ****             MEMORY ALLOCATOR - ONEMOGUCITI KORISNIKU DA KORISTI DIREKTNO
 273:src/Riscv.cpp **** 
 274:src/Riscv.cpp ****         */
 275:src/Riscv.cpp ****         __asm__ volatile("li s6,-1337");
 276:src/Riscv.cpp ****         __asm__ volatile("li s5,-1337");
 277:src/Riscv.cpp **** 
 278:src/Riscv.cpp ****         uint64 volatile sepc = Riscv::r_sepc();
 279:src/Riscv.cpp ****         Riscv::w_sepc(sepc+4);
 280:src/Riscv.cpp ****         /*uint32 id;
 281:src/Riscv.cpp ****         __asm__ volatile("mv s2, a1");
 282:src/Riscv.cpp ****         __asm__ volatile("mv s3, a2");
 283:src/Riscv.cpp ****         __asm__ volatile("mv s4, a3");
 284:src/Riscv.cpp ****         __asm__ volatile("mv s5, a4");
 285:src/Riscv.cpp ****         __asm__ volatile("mv %0,a0":"=r"(id));
 286:src/Riscv.cpp ****         if(id == 0x01){
 287:src/Riscv.cpp ****             size_t sz;
 288:src/Riscv.cpp ****             __asm__ volatile("mv %[sz],s2": [sz]"=r"(sz));
 289:src/Riscv.cpp ****             void* result = MemoryAllocator::malloc(sz);
 290:src/Riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(result)); // result is already in a0, but just in case
 291:src/Riscv.cpp **** 
 292:src/Riscv.cpp ****         }else if(id == 0x02) {
 293:src/Riscv.cpp ****             //__asm__ volatile("mv s1,a1"); // in case addr is stored in register a1, so it's not o
 294:src/Riscv.cpp ****             void *addr = 0;
 295:src/Riscv.cpp ****             __asm__ volatile("mv %0,s2":"=r"(addr));
 296:src/Riscv.cpp ****             int result = MemoryAllocator::free(addr);
 297:src/Riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(result));
 298:src/Riscv.cpp ****         }
 299:src/Riscv.cpp ****         else if(id == 0x11){
 300:src/Riscv.cpp ****             //callSupervisedTrap(0x11, handle, (void*)start_routine, arg, stack);
 301:src/Riscv.cpp ****             TCB** handle;
 302:src/Riscv.cpp ****             void(*start_routine)(void*);
 303:src/Riscv.cpp ****             void* arg;
 304:src/Riscv.cpp ****             void* stack;
 305:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 306:src/Riscv.cpp ****             __asm__ volatile("mv %[start_routine],s3":[start_routine]"=r"(start_routine));
 307:src/Riscv.cpp ****             __asm__ volatile("mv %[arg],s4":[arg]"=r"(arg));
 308:src/Riscv.cpp ****             __asm__ volatile("mv %[stack],s5":[stack]"=r"(stack));
 309:src/Riscv.cpp **** 
 310:src/Riscv.cpp ****             *handle = TCB::createThread(start_routine, arg, stack);
 311:src/Riscv.cpp ****             Riscv::w_sepc(Riscv::r_sepc()+4);
GAS LISTING /tmp/ccYCTr0w.s 			page 21


 312:src/Riscv.cpp ****             __asm__ volatile("li s6,-1337");
 313:src/Riscv.cpp ****             __asm__ volatile("li s5,-1337");
 314:src/Riscv.cpp ****         }else if(id == 0x13) {
 315:src/Riscv.cpp ****             uint64 sepc = r_sepc() + 4;
 316:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
 317:src/Riscv.cpp ****             TCB::timeSliceCounter = 0;
 318:src/Riscv.cpp ****             TCB::dispatch();
 319:src/Riscv.cpp ****             w_sstatus(sstatus);
 320:src/Riscv.cpp ****             w_sepc(sepc);
 321:src/Riscv.cpp ****         }else if(id == 0x41){
 322:src/Riscv.cpp ****             char c = __getc();
 323:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[c]"::[c]"r"(c));
 324:src/Riscv.cpp ****             Riscv::w_sepc(Riscv::r_sepc()+4);
 325:src/Riscv.cpp ****         }else if(id == 0x42){
 326:src/Riscv.cpp ****             char c;
 327:src/Riscv.cpp ****             __asm__ volatile("mv %[c],s2":[c]"=r"(c));
 328:src/Riscv.cpp ****             __putc(c);
 329:src/Riscv.cpp ****             Riscv::w_sepc(Riscv::r_sepc()+4);
 330:src/Riscv.cpp ****         }else {
 331:src/Riscv.cpp ****             uint64 sepc = r_sepc() + 4;
 332:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
 333:src/Riscv.cpp ****             TCB::timeSliceCounter = 0;
 334:src/Riscv.cpp ****             TCB::dispatch();
 335:src/Riscv.cpp ****             w_sstatus(sstatus);
 336:src/Riscv.cpp ****             w_sepc(sepc);
 337:src/Riscv.cpp ****         }
 338:src/Riscv.cpp ****         __asm__ volatile("li s6,-1337");
 339:src/Riscv.cpp ****         __asm__ volatile("li s5,-1337");*/
 340:src/Riscv.cpp ****     }
 341:src/Riscv.cpp ****     else{
 342:src/Riscv.cpp ****         kprintString("scause :");
 343:src/Riscv.cpp ****         kprintInteger(scause);
 344:src/Riscv.cpp ****         kprintString("\n");
 345:src/Riscv.cpp ****     }
 346:src/Riscv.cpp **** 
 347:src/Riscv.cpp ****     console_handler();
 653              		.loc 1 347 5 is_stmt 1
 654              	.LEHB0:
 655              		.loc 1 347 20 is_stmt 0
 656 0168 97000000 		call	console_handler@plt
 656      E7800000 
 657              	.LVL10:
 658              	.L3:
 348:src/Riscv.cpp **** }...
 659              		.loc 1 348 1
 660 0170 83308110 		ld	ra,264(sp)
 661              		.cfi_remember_state
 662              		.cfi_restore 1
 663 0174 03340110 		ld	s0,256(sp)
 664              		.cfi_restore 8
 665              		.cfi_def_cfa 2, 272
 666 0178 8334810F 		ld	s1,248(sp)
 667              		.cfi_restore 9
 668 017c 0339010F 		ld	s2,240(sp)
 669              		.cfi_restore 18
 670 0180 8339810E 		ld	s3,232(sp)
 671              		.cfi_restore 19
GAS LISTING /tmp/ccYCTr0w.s 			page 22


 672 0184 13010111 		addi	sp,sp,272
 673              		.cfi_def_cfa_offset 0
 674 0188 67800000 		jr	ra
 675              	.L61:
 676              		.cfi_restore_state
 677              	.LBB605:
 678              	.LBB575:
 679              	.LBB574:
 680              	.LBB563:
  32:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc();
 681              		.loc 1 32 13 is_stmt 1
 682              	.LBB564:
 683              	.LBB565:
  83:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" :[sepc]"=r"(sepc));
 684              		.loc 2 83 5
  84:src/../h/Riscv.hpp ****     return sepc;
 685              		.loc 2 84 5
  84:src/../h/Riscv.hpp ****     return sepc;
 686              		.loc 2 84 62 is_stmt 0
 687              	#APP
 688              	# 84 "src/../h/Riscv.hpp" 1
 689              		csrr a5, sepc
 690              	# 0 "" 2
 691              	#NO_APP
 692 0190 2338F4F6 		sd	a5,-144(s0)
  85:src/../h/Riscv.hpp **** }
 693              		.loc 2 85 5 is_stmt 1
  85:src/../h/Riscv.hpp **** }
 694              		.loc 2 85 12 is_stmt 0
 695 0194 833704F7 		ld	a5,-144(s0)
 696              	.LBE565:
 697              	.LBE564:
  32:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc();
 698              		.loc 1 32 43
 699 0198 2338F4EE 		sd	a5,-272(s0)
  33:src/Riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 700              		.loc 1 33 13 is_stmt 1
 701              	.LBB566:
 702              	.LBB567:
 151:src/../h/Riscv.hpp **** 
 152:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask){
 153:src/../h/Riscv.hpp ****     __asm__ volatile("csrc sstatus, %[mask]": : [mask]"r"(mask));
 154:src/../h/Riscv.hpp **** }
 155:src/../h/Riscv.hpp **** 
 156:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sstatus(){
 157:src/../h/Riscv.hpp ****     uint64 volatile sstatus;
 703              		.loc 2 157 5
 158:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus":[sstatus]"=r"(sstatus));
 704              		.loc 2 158 5
 705              		.loc 2 158 73 is_stmt 0
 706              	#APP
 707              	# 158 "src/../h/Riscv.hpp" 1
 159              	    return sstatus;
 708              		csrr a5, sstatus
 709              	# 0 "" 2
 710              	#NO_APP
 711 01a0 2334F4F6 		sd	a5,-152(s0)
GAS LISTING /tmp/ccYCTr0w.s 			page 23


 712              		.loc 2 159 5 is_stmt 1
 713              		.loc 2 159 12 is_stmt 0
 714 01a4 833784F6 		ld	a5,-152(s0)
 715              	.LBE567:
 716              	.LBE566:
  33:src/Riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 717              		.loc 1 33 49
 718 01a8 233CF4EE 		sd	a5,-264(s0)
  34:src/Riscv.cpp ****             TCB::timeSliceCounter = 0;
 719              		.loc 1 34 13 is_stmt 1
  34:src/Riscv.cpp ****             TCB::timeSliceCounter = 0;
 720              		.loc 1 34 35 is_stmt 0
 721 01ac 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 721      83B70700 
 722 01b4 23B00700 		sd	zero,0(a5)
  35:src/Riscv.cpp ****             TCB::dispatch();
 723              		.loc 1 35 13 is_stmt 1
  35:src/Riscv.cpp ****             TCB::dispatch();
 724              		.loc 1 35 26 is_stmt 0
 725 01b8 97000000 		call	_ZN3TCB8dispatchEv@plt
 725      E7800000 
 726              	.LVL11:
  36:src/Riscv.cpp ****             w_sstatus(sstatus);
 727              		.loc 1 36 13 is_stmt 1
  36:src/Riscv.cpp ****             w_sstatus(sstatus);
 728              		.loc 1 36 22 is_stmt 0
 729 01c0 833784EF 		ld	a5,-264(s0)
 730              	.LVL12:
 731              	.LBB568:
 732              	.LBB569:
 160:src/../h/Riscv.hpp **** }
 161:src/../h/Riscv.hpp **** 
 162:src/../h/Riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus){
 163:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]": : [sstatus]"r"(sstatus));
 733              		.loc 2 163 5 is_stmt 1
 734              		.loc 2 163 75 is_stmt 0
 735              	#APP
 736              	# 163 "src/../h/Riscv.hpp" 1
 164              	};
 737              		csrw sstatus, a5
 738              	# 0 "" 2
 739              	.LVL13:
 740              	#NO_APP
 741              	.LBE569:
 742              	.LBE568:
  37:src/Riscv.cpp ****             w_sepc(sepc);
 743              		.loc 1 37 13 is_stmt 1
  37:src/Riscv.cpp ****             w_sepc(sepc);
 744              		.loc 1 37 19 is_stmt 0
 745 01c8 833704EF 		ld	a5,-272(s0)
 746              	.LVL14:
 747              	.LBB570:
 748              	.LBB571:
  89:src/../h/Riscv.hpp **** }
 749              		.loc 2 89 1 is_stmt 1
  89:src/../h/Riscv.hpp **** }
 750              		.loc 2 89 60 is_stmt 0
GAS LISTING /tmp/ccYCTr0w.s 			page 24


 751              	#APP
 752              	# 89 "src/../h/Riscv.hpp" 1
  90:src/../h/Riscv.hpp **** 
 753              		csrw sepc, a5
 754              	# 0 "" 2
 755              		.loc 2 90 1
 756              	#NO_APP
 757 01d0 6FF01FF9 		j	.L5
 758              	.LVL15:
 759              	.L46:
 760              	.LBE571:
 761              	.LBE570:
 762              	.LBE563:
 763              	.LBE574:
 764              	.LBE575:
 765              	.LBB576:
  55:src/Riscv.cpp ****         console_handler();
 766              		.loc 1 55 9 is_stmt 1
  55:src/Riscv.cpp ****         console_handler();
 767              		.loc 1 55 24 is_stmt 0
 768 01d4 97000000 		call	console_handler@plt
 768      E7800000 
 769              	.LVL16:
 770 01dc 6FF0DFF8 		j	.L6
 771              	.L47:
 772              	.LBB531:
 773              	.LBB352:
  58:src/Riscv.cpp ****         uint32 id;
 774              		.loc 1 58 9 is_stmt 1
  59:src/Riscv.cpp ****         __asm__ volatile("mv %0,s1":"=r"(id));
 775              		.loc 1 59 9
  59:src/Riscv.cpp ****         __asm__ volatile("mv %0,s1":"=r"(id));
 776              		.loc 1 59 46 is_stmt 0
 777              	#APP
 778              	# 59 "src/Riscv.cpp" 1
 779              		mv a5,s1
 780              	# 0 "" 2
 781              	#NO_APP
 782 01e4 9B870700 		sext.w	a5,a5
 783              	.LVL17:
  60:src/Riscv.cpp ****         if(id == 0x01){
 784              		.loc 1 60 9 is_stmt 1
 785              	.LBB353:
 786 01e8 13071000 		li	a4,1
 787 01ec 6382E708 		beq	a5,a4,.L62
 788              	.LBE353:
 789              	.LBE352:
 790              	.LBE531:
 791              	.LBE576:
 792              	.LBE605:
  65:src/Riscv.cpp ****         }else if(id == 0x02) {
 793              		.loc 1 65 15
 794              	.LBB606:
 795              	.LBB577:
 796              	.LBB532:
 797              	.LBB502:
 798              	.LBB484:
GAS LISTING /tmp/ccYCTr0w.s 			page 25


 799              	.LBB354:
 800 01f0 13072000 		li	a4,2
 801 01f4 638AE70A 		beq	a5,a4,.L63
 802              	.LBE354:
 803              	.LBE484:
 804              	.LBE502:
 805              	.LBE532:
 806              	.LBE577:
 807              	.LBE606:
  70:src/Riscv.cpp ****         }else if(id == 0x11){
 808              		.loc 1 70 15
 809              	.LBB607:
 810              	.LBB578:
 811              	.LBB533:
 812              	.LBB503:
 813              	.LBB485:
 814              	.LBB470:
 815              	.LBB355:
 816 01f8 13071001 		li	a4,17
 817 01fc 6380E70C 		beq	a5,a4,.L64
 818              	.LBE355:
 819              	.LBE470:
 820              	.LBE485:
 821              	.LBE503:
 822              	.LBE533:
 823              	.LBE578:
 824              	.LBE607:
  81:src/Riscv.cpp ****         }else if(id == 0x12){
 825              		.loc 1 81 15
 826              	.LBB608:
 827              	.LBB579:
 828              	.LBB534:
 829              	.LBB504:
 830              	.LBB486:
 831              	.LBB471:
 832              	.LBB457:
 833              	.LBB356:
 834 0200 13072001 		li	a4,18
 835 0204 638CE70C 		beq	a5,a4,.L65
 836              	.LBE356:
 837              	.LBE457:
 838              	.LBE471:
 839              	.LBE486:
 840              	.LBE504:
 841              	.LBE534:
 842              	.LBE579:
 843              	.LBE608:
  93:src/Riscv.cpp ****         }else if(id == 0x13){
 844              		.loc 1 93 15
 845              	.LBB609:
 846              	.LBB580:
 847              	.LBB535:
 848              	.LBB505:
 849              	.LBB487:
 850              	.LBB472:
 851              	.LBB458:
 852              	.LBB445:
GAS LISTING /tmp/ccYCTr0w.s 			page 26


 853              	.LBB357:
 854 0208 13073001 		li	a4,19
 855 020c 6382E712 		beq	a5,a4,.L66
 856              	.LBE357:
 857              	.LBE445:
 858              	.LBE458:
 859              	.LBE472:
 860              	.LBE487:
 861              	.LBE505:
 862              	.LBE535:
 863              	.LBE580:
 864              	.LBE609:
 102:src/Riscv.cpp ****         }else if(id == 0x21) {
 865              		.loc 1 102 15
 866              	.LBB610:
 867              	.LBB581:
 868              	.LBB536:
 869              	.LBB506:
 870              	.LBB488:
 871              	.LBB473:
 872              	.LBB459:
 873              	.LBB446:
 874              	.LBB430:
 875              	.LBB358:
 876 0210 13071002 		li	a4,33
 877 0214 6384E716 		beq	a5,a4,.L67
 878              	.LBE358:
 879              	.LBE430:
 880              	.LBE446:
 881              	.LBE459:
 882              	.LBE473:
 883              	.LBE488:
 884              	.LBE506:
 885              	.LBE536:
 886              	.LBE581:
 887              	.LBE610:
 109:src/Riscv.cpp ****         }else if(id == 0x22){
 888              		.loc 1 109 15
 889              	.LBB611:
 890              	.LBB582:
 891              	.LBB537:
 892              	.LBB507:
 893              	.LBB489:
 894              	.LBB474:
 895              	.LBB460:
 896              	.LBB447:
 897              	.LBB431:
 898              	.LBB412:
 899              	.LBB359:
 900 0218 13072002 		li	a4,34
 901 021c 6386E718 		beq	a5,a4,.L68
 902              	.LBE359:
 903              	.LBE412:
 904              	.LBE431:
 905              	.LBE447:
 906              	.LBE460:
 907              	.LBE474:
GAS LISTING /tmp/ccYCTr0w.s 			page 27


 908              	.LBE489:
 909              	.LBE507:
 910              	.LBE537:
 911              	.LBE582:
 912              	.LBE611:
 114:src/Riscv.cpp ****         }else if(id == 0x23){
 913              		.loc 1 114 15
 914              	.LBB612:
 915              	.LBB583:
 916              	.LBB538:
 917              	.LBB508:
 918              	.LBB490:
 919              	.LBB475:
 920              	.LBB461:
 921              	.LBB448:
 922              	.LBB432:
 923              	.LBB413:
 924              	.LBB401:
 925              	.LBB360:
 926 0220 13073002 		li	a4,35
 927 0224 638CE718 		beq	a5,a4,.L69
 928              	.LBE360:
 929              	.LBE401:
 930              	.LBE413:
 931              	.LBE432:
 932              	.LBE448:
 933              	.LBE461:
 934              	.LBE475:
 935              	.LBE490:
 936              	.LBE508:
 937              	.LBE538:
 938              	.LBE583:
 939              	.LBE612:
 119:src/Riscv.cpp ****         }else if(id == 0x24){
 940              		.loc 1 119 15
 941              	.LBB613:
 942              	.LBB584:
 943              	.LBB539:
 944              	.LBB509:
 945              	.LBB491:
 946              	.LBB476:
 947              	.LBB462:
 948              	.LBB449:
 949              	.LBB433:
 950              	.LBB414:
 951              	.LBB402:
 952              	.LBB394:
 953              	.LBB361:
 954 0228 13074002 		li	a4,36
 955 022c 6382E71A 		beq	a5,a4,.L70
 956              	.LBE361:
 957              	.LBE394:
 958              	.LBE402:
 959              	.LBE414:
 960              	.LBE433:
 961              	.LBE449:
 962              	.LBE462:
GAS LISTING /tmp/ccYCTr0w.s 			page 28


 963              	.LBE476:
 964              	.LBE491:
 965              	.LBE509:
 966              	.LBE539:
 967              	.LBE584:
 968              	.LBE613:
 124:src/Riscv.cpp ****         }else if(id == 0x41) {
 969              		.loc 1 124 15
 970              	.LBB614:
 971              	.LBB585:
 972              	.LBB540:
 973              	.LBB510:
 974              	.LBB492:
 975              	.LBB477:
 976              	.LBB463:
 977              	.LBB450:
 978              	.LBB434:
 979              	.LBB415:
 980              	.LBB403:
 981              	.LBB395:
 982              	.LBB388:
 983              	.LBB362:
 984 0230 13071004 		li	a4,65
 985 0234 6388E71A 		beq	a5,a4,.L71
 986              	.LBE362:
 987              	.LBE388:
 988              	.LBE395:
 989              	.LBE403:
 990              	.LBE415:
 991              	.LBE434:
 992              	.LBE450:
 993              	.LBE463:
 994              	.LBE477:
 995              	.LBE492:
 996              	.LBE510:
 997              	.LBE540:
 998              	.LBE585:
 999              	.LBE614:
 130:src/Riscv.cpp ****         }else if(id == 0x42){
 1000              		.loc 1 130 15
 1001              	.LBB615:
 1002              	.LBB586:
 1003              	.LBB541:
 1004              	.LBB511:
 1005              	.LBB493:
 1006              	.LBB478:
 1007              	.LBB464:
 1008              	.LBB451:
 1009              	.LBB435:
 1010              	.LBB416:
 1011              	.LBB404:
 1012              	.LBB396:
 1013              	.LBB389:
 1014              	.LBB383:
 1015              	.LBB363:
 1016 0238 13072004 		li	a4,66
 1017 023c 6380E71C 		beq	a5,a4,.L72
GAS LISTING /tmp/ccYCTr0w.s 			page 29


 1018              	.LBE363:
 1019              	.LBE383:
 1020              	.LBE389:
 1021              	.LBE396:
 1022              	.LBE404:
 1023              	.LBE416:
 1024              	.LBE435:
 1025              	.LBE451:
 1026              	.LBE464:
 1027              	.LBE478:
 1028              	.LBE493:
 1029              	.LBE511:
 1030              	.LBE541:
 1031              	.LBE586:
 1032              	.LBE615:
 135:src/Riscv.cpp ****         }else if(id == 0x99){
 1033              		.loc 1 135 15
 1034              	.LBB616:
 1035              	.LBB587:
 1036              	.LBB542:
 1037              	.LBB512:
 1038              	.LBB494:
 1039              	.LBB479:
 1040              	.LBB465:
 1041              	.LBB452:
 1042              	.LBB436:
 1043              	.LBB417:
 1044              	.LBB405:
 1045              	.LBB397:
 1046              	.LBB390:
 1047              	.LBB384:
 1048              	.LBB379:
 1049              	.LBB364:
 1050 0240 13079009 		li	a4,153
 1051 0244 6386E71C 		beq	a5,a4,.L73
 1052              	.LBE364:
 1053              	.LBE379:
 1054              	.LBE384:
 1055              	.LBE390:
 1056              	.LBE397:
 1057              	.LBE405:
 1058              	.LBE417:
 1059              	.LBE436:
 1060              	.LBE452:
 1061              	.LBE465:
 1062              	.LBE479:
 1063              	.LBE494:
 1064              	.LBE512:
 1065              	.LBE542:
 1066              	.LBE587:
 1067              	.LBE616:
 141:src/Riscv.cpp ****         }else if(id == 0x101){
 1068              		.loc 1 141 15
 1069              	.LBB617:
 1070              	.LBB588:
 1071              	.LBB543:
 1072              	.LBB513:
GAS LISTING /tmp/ccYCTr0w.s 			page 30


 1073              	.LBB495:
 1074              	.LBB480:
 1075              	.LBB466:
 1076              	.LBB453:
 1077              	.LBB437:
 1078              	.LBB418:
 1079              	.LBB406:
 1080              	.LBB398:
 1081              	.LBB391:
 1082              	.LBB385:
 1083              	.LBB380:
 1084              	.LBB376:
 1085              	.LBB365:
 1086 0248 13071010 		li	a4,257
 1087 024c 639AE702 		bne	a5,a4,.L10
 1088              	.LBB366:
 142:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc();
 1089              		.loc 1 142 13
 1090              	.LBB367:
 1091              	.LBB368:
  83:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" :[sepc]"=r"(sepc));
 1092              		.loc 2 83 5
  84:src/../h/Riscv.hpp ****     return sepc;
 1093              		.loc 2 84 5
  84:src/../h/Riscv.hpp ****     return sepc;
 1094              		.loc 2 84 62 is_stmt 0
 1095              	#APP
 1096              	# 84 "src/../h/Riscv.hpp" 1
 1097              		csrr a5, sepc
 1098              	# 0 "" 2
 1099              	.LVL18:
 1100              	#NO_APP
 1101 0254 2334F4F8 		sd	a5,-120(s0)
  85:src/../h/Riscv.hpp **** }
 1102              		.loc 2 85 5 is_stmt 1
  85:src/../h/Riscv.hpp **** }
 1103              		.loc 2 85 12 is_stmt 0
 1104 0258 833784F8 		ld	a5,-120(s0)
 1105              	.LBE368:
 1106              	.LBE367:
 142:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc();
 1107              		.loc 1 142 43
 1108 025c 233CF4F0 		sd	a5,-232(s0)
 143:src/Riscv.cpp ****             w_sepc(sepc + 4);
 1109              		.loc 1 143 13 is_stmt 1
 143:src/Riscv.cpp ****             w_sepc(sepc + 4);
 1110              		.loc 1 143 20 is_stmt 0
 1111 0260 833784F1 		ld	a5,-232(s0)
 143:src/Riscv.cpp ****             w_sepc(sepc + 4);
 1112              		.loc 1 143 19
 1113 0264 93874700 		addi	a5,a5,4
 1114              	.LVL19:
 1115              	.LBB369:
 1116              	.LBB370:
  89:src/../h/Riscv.hpp **** }
 1117              		.loc 2 89 1 is_stmt 1
  89:src/../h/Riscv.hpp **** }
GAS LISTING /tmp/ccYCTr0w.s 			page 31


 1118              		.loc 2 89 60 is_stmt 0
 1119              	#APP
 1120              	# 89 "src/../h/Riscv.hpp" 1
 1121              		csrw sepc, a5
 1122              	# 0 "" 2
 1123              	.LVL20:
 1124              	#NO_APP
 1125              	.LBE370:
 1126              	.LBE369:
 144:src/Riscv.cpp ****             return;
 1127              		.loc 1 144 13 is_stmt 1
 1128 026c 6FF05FF0 		j	.L3
 1129              	.LVL21:
 1130              	.L62:
 1131              	.LBE366:
 1132              	.LBE365:
 1133              	.LBE376:
 1134              	.LBE380:
 1135              	.LBE385:
 1136              	.LBE391:
 1137              	.LBE398:
 1138              	.LBE406:
 1139              	.LBE418:
 1140              	.LBE437:
 1141              	.LBE453:
 1142              	.LBE466:
 1143              	.LBE480:
 1144              	.LBB481:
  61:src/Riscv.cpp ****             size_t sz;
 1145              		.loc 1 61 13
  62:src/Riscv.cpp ****             __asm__ volatile("mv %[sz],s2": [sz]"=r"(sz));
 1146              		.loc 1 62 13
  62:src/Riscv.cpp ****             __asm__ volatile("mv %[sz],s2": [sz]"=r"(sz));
 1147              		.loc 1 62 58 is_stmt 0
 1148              	#APP
 1149              	# 62 "src/Riscv.cpp" 1
 1150              		mv a0,s2
 1151              	# 0 "" 2
 1152              	.LVL22:
  63:src/Riscv.cpp ****             void* result = MemoryAllocator::malloc(sz);
 1153              		.loc 1 63 13 is_stmt 1
  63:src/Riscv.cpp ****             void* result = MemoryAllocator::malloc(sz);
 1154              		.loc 1 63 51 is_stmt 0
 1155              	#NO_APP
 1156 0274 97000000 		call	_ZN15MemoryAllocator6mallocEm@plt
 1156      E7800000 
 1157              	.LVL23:
  64:src/Riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(result)); // result is already in a0, but just in case
 1158              		.loc 1 64 13 is_stmt 1
  64:src/Riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(result)); // result is already in a0, but just in case
 1159              		.loc 1 64 54 is_stmt 0
 1160              	#APP
 1161              	# 64 "src/Riscv.cpp" 1
 1162              		mv a0,a0
 1163              	# 0 "" 2
 1164              	.LVL24:
 1165              	#NO_APP
GAS LISTING /tmp/ccYCTr0w.s 			page 32


 1166              	.L10:
 1167              	.LBE481:
 1168              	.LBE495:
 154:src/Riscv.cpp ****         __asm__ volatile("li s6,-1337");
 1169              		.loc 1 154 9 is_stmt 1
 154:src/Riscv.cpp ****         __asm__ volatile("li s6,-1337");
 1170              		.loc 1 154 40 is_stmt 0
 1171              	#APP
 1172              	# 154 "src/Riscv.cpp" 1
 155:src/Riscv.cpp ****         __asm__ volatile("li s5,-1337");
 1173              		li s6,-1337
 1174              	# 0 "" 2
 1175              		.loc 1 155 9 is_stmt 1
 155:src/Riscv.cpp ****         __asm__ volatile("li s5,-1337");
 1176              		.loc 1 155 40 is_stmt 0
 1177              	# 155 "src/Riscv.cpp" 1
 156:src/Riscv.cpp ****         uint64 volatile sepc = Riscv::r_sepc();
 1178              		li s5,-1337
 1179              	# 0 "" 2
 1180              		.loc 1 156 9 is_stmt 1
 1181              	#NO_APP
 1182              	.LBB496:
 1183              	.LBB497:
  83:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" :[sepc]"=r"(sepc));
 1184              		.loc 2 83 5
  84:src/../h/Riscv.hpp ****     return sepc;
 1185              		.loc 2 84 5
  84:src/../h/Riscv.hpp ****     return sepc;
 1186              		.loc 2 84 62 is_stmt 0
 1187              	#APP
 1188              	# 84 "src/../h/Riscv.hpp" 1
 1189              		csrr a5, sepc
 1190              	# 0 "" 2
 1191              	#NO_APP
 1192 028c 2338F4F8 		sd	a5,-112(s0)
  85:src/../h/Riscv.hpp **** }
 1193              		.loc 2 85 5 is_stmt 1
  85:src/../h/Riscv.hpp **** }
 1194              		.loc 2 85 12 is_stmt 0
 1195 0290 833704F9 		ld	a5,-112(s0)
 1196              	.LBE497:
 1197              	.LBE496:
 156:src/Riscv.cpp ****         uint64 volatile sepc = Riscv::r_sepc();
 1198              		.loc 1 156 46
 1199 0294 2330F4F2 		sd	a5,-224(s0)
 157:src/Riscv.cpp ****         Riscv::w_sepc(sepc+4);
 1200              		.loc 1 157 9 is_stmt 1
 157:src/Riscv.cpp ****         Riscv::w_sepc(sepc+4);
 1201              		.loc 1 157 23 is_stmt 0
 1202 0298 833704F2 		ld	a5,-224(s0)
 157:src/Riscv.cpp ****         Riscv::w_sepc(sepc+4);
 1203              		.loc 1 157 22
 1204 029c 93874700 		addi	a5,a5,4
 1205              	.LVL25:
 1206              	.LBB498:
 1207              	.LBB499:
  89:src/../h/Riscv.hpp **** }
GAS LISTING /tmp/ccYCTr0w.s 			page 33


 1208              		.loc 2 89 1 is_stmt 1
  89:src/../h/Riscv.hpp **** }
 1209              		.loc 2 89 60 is_stmt 0
 1210              	#APP
 1211              	# 89 "src/../h/Riscv.hpp" 1
  90:src/../h/Riscv.hpp **** 
 1212              		csrw sepc, a5
 1213              	# 0 "" 2
 1214              		.loc 2 90 1
 1215              	#NO_APP
 1216 02a4 6FF05FEC 		j	.L6
 1217              	.LVL26:
 1218              	.L63:
 1219              	.LBE499:
 1220              	.LBE498:
 1221              	.LBB500:
 1222              	.LBB482:
 1223              	.LBB467:
  66:src/Riscv.cpp ****             void *addr = 0;
 1224              		.loc 1 66 13 is_stmt 1
  67:src/Riscv.cpp ****             __asm__ volatile("mv %0,s2":"=r"(addr));
 1225              		.loc 1 67 13
  67:src/Riscv.cpp ****             __asm__ volatile("mv %0,s2":"=r"(addr));
 1226              		.loc 1 67 52 is_stmt 0
 1227              	#APP
 1228              	# 67 "src/Riscv.cpp" 1
 1229              		mv a0,s2
 1230              	# 0 "" 2
 1231              	.LVL27:
  68:src/Riscv.cpp ****             int result = MemoryAllocator::free(addr);
 1232              		.loc 1 68 13 is_stmt 1
  68:src/Riscv.cpp ****             int result = MemoryAllocator::free(addr);
 1233              		.loc 1 68 47 is_stmt 0
 1234              	#NO_APP
 1235 02ac 97000000 		call	_ZN15MemoryAllocator4freeEPv@plt
 1235      E7800000 
 1236              	.LVL28:
  69:src/Riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(result));
 1237              		.loc 1 69 13 is_stmt 1
  69:src/Riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(result));
 1238              		.loc 1 69 54 is_stmt 0
 1239              	#APP
 1240              	# 69 "src/Riscv.cpp" 1
 1241              		mv a0,a0
 1242              	# 0 "" 2
 1243              	#NO_APP
 1244              	.LBE467:
 1245 02b8 6FF09FFC 		j	.L10
 1246              	.LVL29:
 1247              	.L64:
 1248              	.LBB468:
 1249              	.LBB454:
  71:src/Riscv.cpp ****             TCB** handle;
 1250              		.loc 1 71 13 is_stmt 1
  72:src/Riscv.cpp ****             void(*start_routine)(void*);
 1251              		.loc 1 72 13
  73:src/Riscv.cpp ****             void* arg;
GAS LISTING /tmp/ccYCTr0w.s 			page 34


 1252              		.loc 1 73 13
  74:src/Riscv.cpp ****             void* stack;
 1253              		.loc 1 74 13
  75:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 1254              		.loc 1 75 13
  75:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 1255              		.loc 1 75 69 is_stmt 0
 1256              	#APP
 1257              	# 75 "src/Riscv.cpp" 1
 1258              		mv s1,s2
 1259              	# 0 "" 2
 1260              	.LVL30:
  76:src/Riscv.cpp ****             __asm__ volatile("mv %[start_routine],s3":[start_routine]"=r"(start_routine));
 1261              		.loc 1 76 13 is_stmt 1
  76:src/Riscv.cpp ****             __asm__ volatile("mv %[start_routine],s3":[start_routine]"=r"(start_routine));
 1262              		.loc 1 76 90 is_stmt 0
 1263              	# 76 "src/Riscv.cpp" 1
 1264              		mv a0,s3
 1265              	# 0 "" 2
 1266              	.LVL31:
  77:src/Riscv.cpp ****             __asm__ volatile("mv %[arg],s4":[arg]"=r"(arg));
 1267              		.loc 1 77 13 is_stmt 1
  77:src/Riscv.cpp ****             __asm__ volatile("mv %[arg],s4":[arg]"=r"(arg));
 1268              		.loc 1 77 60 is_stmt 0
 1269              	# 77 "src/Riscv.cpp" 1
 1270              		mv a1,s4
 1271              	# 0 "" 2
 1272              	.LVL32:
  78:src/Riscv.cpp ****             __asm__ volatile("mv %[stack],s5":[stack]"=r"(stack));
 1273              		.loc 1 78 13 is_stmt 1
  78:src/Riscv.cpp ****             __asm__ volatile("mv %[stack],s5":[stack]"=r"(stack));
 1274              		.loc 1 78 66 is_stmt 0
 1275              	# 78 "src/Riscv.cpp" 1
 1276              		mv a2,s5
 1277              	# 0 "" 2
 1278              	.LVL33:
  80:src/Riscv.cpp ****             *handle = TCB::createThread(start_routine, arg, stack);
 1279              		.loc 1 80 13 is_stmt 1
  80:src/Riscv.cpp ****             *handle = TCB::createThread(start_routine, arg, stack);
 1280              		.loc 1 80 40 is_stmt 0
 1281              	#NO_APP
 1282 02cc 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_S0_@plt
 1282      E7800000 
 1283              	.LVL34:
  80:src/Riscv.cpp ****             *handle = TCB::createThread(start_routine, arg, stack);
 1284              		.loc 1 80 21
 1285 02d4 23B0A400 		sd	a0,0(s1)
 1286              	.LBE454:
 1287 02d8 6FF09FFA 		j	.L10
 1288              	.LVL35:
 1289              	.L65:
 1290              	.LBB455:
 1291              	.LBB438:
  82:src/Riscv.cpp ****             int numberOfActiveThreads = TCB::numberOfActiveThreads;
 1292              		.loc 1 82 13 is_stmt 1
  82:src/Riscv.cpp ****             int numberOfActiveThreads = TCB::numberOfActiveThreads;
 1293              		.loc 1 82 17 is_stmt 0
GAS LISTING /tmp/ccYCTr0w.s 			page 35


 1294 02dc 97070000 		la	a5,_ZN3TCB21numberOfActiveThreadsE
 1294      83B70700 
 1295              	.LVL36:
 1296 02e4 03A70700 		lw	a4,0(a5)
 1297              	.LVL37:
  83:src/Riscv.cpp ****             if(numberOfActiveThreads == 1){
 1298              		.loc 1 83 13 is_stmt 1
 1299              	.LBB439:
 1300 02e8 93071000 		li	a5,1
 1301 02ec 6316F700 		bne	a4,a5,.L14
  84:src/Riscv.cpp ****                 __asm__ volatile("li a0,-1");
 1302              		.loc 1 84 17
  84:src/Riscv.cpp ****                 __asm__ volatile("li a0,-1");
 1303              		.loc 1 84 45 is_stmt 0
 1304              	#APP
 1305              	# 84 "src/Riscv.cpp" 1
 1306              		li a0,-1
 1307              	# 0 "" 2
 1308              	#NO_APP
 1309 02f4 6FF0DFF8 		j	.L10
 1310              	.L14:
 1311              	.LBB440:
  86:src/Riscv.cpp ****                 TCB::running->setFinished(true);
 1312              		.loc 1 86 17 is_stmt 1
  86:src/Riscv.cpp ****                 TCB::running->setFinished(true);
 1313              		.loc 1 86 42 is_stmt 0
 1314 02f8 17090000 		la	s2,_ZN3TCB7runningE
 1314      03390900 
 1315 0300 83340900 		ld	s1,0(s2)
 1316              	.LVL38:
 1317              	.LBB441:
 1318              	.LBB442:
  14:src/../h/TCB.hpp ****     uint64 getTimeSlice() const { return timeSlice;}
 1319              		.loc 3 14 37 is_stmt 1
  14:src/../h/TCB.hpp ****     uint64 getTimeSlice() const { return timeSlice;}
 1320              		.loc 3 14 52 is_stmt 0
 1321 0304 93071000 		li	a5,1
 1322 0308 238CF402 		sb	a5,56(s1)
 1323              	.LVL39:
 1324              	.LBE442:
 1325              	.LBE441:
  88:src/Riscv.cpp ****                 TCB* old = TCB::running;
 1326              		.loc 1 88 17 is_stmt 1
  89:src/Riscv.cpp ****                 numberOfActiveThreads--;
 1327              		.loc 1 89 17
  90:src/Riscv.cpp ****                 TCB::running = Scheduler::get()->data;
 1328              		.loc 1 90 17
  90:src/Riscv.cpp ****                 TCB::running = Scheduler::get()->data;
 1329              		.loc 1 90 46 is_stmt 0
 1330 030c 97000000 		call	_ZN9Scheduler3getEv@plt
 1330      E7800000 
 1331              	.LVL40:
  90:src/Riscv.cpp ****                 TCB::running = Scheduler::get()->data;
 1332              		.loc 1 90 50
 1333 0314 83350500 		ld	a1,0(a0)
  90:src/Riscv.cpp ****                 TCB::running = Scheduler::get()->data;
 1334              		.loc 1 90 30
GAS LISTING /tmp/ccYCTr0w.s 			page 36


 1335 0318 2330B900 		sd	a1,0(s2)
  91:src/Riscv.cpp ****                 TCB::contextSwitch(&old->context, &TCB::running->context);
 1336              		.loc 1 91 17 is_stmt 1
  91:src/Riscv.cpp ****                 TCB::contextSwitch(&old->context, &TCB::running->context);
 1337              		.loc 1 91 35 is_stmt 0
 1338 031c 93850501 		addi	a1,a1,16
 1339 0320 13850401 		addi	a0,s1,16
 1340 0324 97000000 		call	_ZN3TCB13contextSwitchEPNS_7ContextES1_@plt
 1340      E7800000 
 1341              	.LVL41:
 1342 032c 6FF05FF5 		j	.L10
 1343              	.LVL42:
 1344              	.L66:
 1345              	.LBE440:
 1346              	.LBE439:
 1347              	.LBE438:
 1348              	.LBB443:
 1349              	.LBB419:
  94:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc() + 4;
 1350              		.loc 1 94 13 is_stmt 1
 1351              	.LBB420:
 1352              	.LBB421:
  83:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" :[sepc]"=r"(sepc));
 1353              		.loc 2 83 5
  84:src/../h/Riscv.hpp ****     return sepc;
 1354              		.loc 2 84 5
  84:src/../h/Riscv.hpp ****     return sepc;
 1355              		.loc 2 84 62 is_stmt 0
 1356              	#APP
 1357              	# 84 "src/../h/Riscv.hpp" 1
 1358              		csrr a5, sepc
 1359              	# 0 "" 2
 1360              	.LVL43:
 1361              	#NO_APP
 1362 0334 2330F4F8 		sd	a5,-128(s0)
  85:src/../h/Riscv.hpp **** }
 1363              		.loc 2 85 5 is_stmt 1
  85:src/../h/Riscv.hpp **** }
 1364              		.loc 2 85 12 is_stmt 0
 1365 0338 833704F8 		ld	a5,-128(s0)
 1366              	.LBE421:
 1367              	.LBE420:
  94:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc() + 4;
 1368              		.loc 1 94 45
 1369 033c 93874700 		addi	a5,a5,4
  94:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc() + 4;
 1370              		.loc 1 94 47
 1371 0340 2330F4F0 		sd	a5,-256(s0)
  95:src/Riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 1372              		.loc 1 95 13 is_stmt 1
 1373              	.LBB422:
 1374              	.LBB423:
 157:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus":[sstatus]"=r"(sstatus));
 1375              		.loc 2 157 5
 158:src/../h/Riscv.hpp ****     return sstatus;
 1376              		.loc 2 158 5
 158:src/../h/Riscv.hpp ****     return sstatus;
GAS LISTING /tmp/ccYCTr0w.s 			page 37


 1377              		.loc 2 158 73 is_stmt 0
 1378              	#APP
 1379              	# 158 "src/../h/Riscv.hpp" 1
 1380              		csrr a5, sstatus
 1381              	# 0 "" 2
 1382              	#NO_APP
 1383 0348 233CF4F6 		sd	a5,-136(s0)
 159:src/../h/Riscv.hpp **** }
 1384              		.loc 2 159 5 is_stmt 1
 159:src/../h/Riscv.hpp **** }
 1385              		.loc 2 159 12 is_stmt 0
 1386 034c 833784F7 		ld	a5,-136(s0)
 1387              	.LBE423:
 1388              	.LBE422:
  95:src/Riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 1389              		.loc 1 95 49
 1390 0350 2334F4F0 		sd	a5,-248(s0)
  96:src/Riscv.cpp ****             TCB::timeSliceCounter = 0;
 1391              		.loc 1 96 13 is_stmt 1
  96:src/Riscv.cpp ****             TCB::timeSliceCounter = 0;
 1392              		.loc 1 96 35 is_stmt 0
 1393 0354 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 1393      83B70700 
 1394 035c 23B00700 		sd	zero,0(a5)
  98:src/Riscv.cpp ****             TCB::dispatch();
 1395              		.loc 1 98 13 is_stmt 1
  98:src/Riscv.cpp ****             TCB::dispatch();
 1396              		.loc 1 98 26 is_stmt 0
 1397 0360 97000000 		call	_ZN3TCB8dispatchEv@plt
 1397      E7800000 
 1398              	.LVL44:
  99:src/Riscv.cpp ****             w_sstatus(sstatus);
 1399              		.loc 1 99 13 is_stmt 1
  99:src/Riscv.cpp ****             w_sstatus(sstatus);
 1400              		.loc 1 99 22 is_stmt 0
 1401 0368 833784F0 		ld	a5,-248(s0)
 1402              	.LVL45:
 1403              	.LBB424:
 1404              	.LBB425:
 163:src/../h/Riscv.hpp **** };
 1405              		.loc 2 163 5 is_stmt 1
 163:src/../h/Riscv.hpp **** };
 1406              		.loc 2 163 75 is_stmt 0
 1407              	#APP
 1408              	# 163 "src/../h/Riscv.hpp" 1
 1409              		csrw sstatus, a5
 1410              	# 0 "" 2
 1411              	.LVL46:
 1412              	#NO_APP
 1413              	.LBE425:
 1414              	.LBE424:
 100:src/Riscv.cpp ****             w_sepc(sepc);
 1415              		.loc 1 100 13 is_stmt 1
 100:src/Riscv.cpp ****             w_sepc(sepc);
 1416              		.loc 1 100 19 is_stmt 0
 1417 0370 833704F0 		ld	a5,-256(s0)
 1418              	.LVL47:
GAS LISTING /tmp/ccYCTr0w.s 			page 38


 1419              	.LBB426:
 1420              	.LBB427:
  89:src/../h/Riscv.hpp **** }
 1421              		.loc 2 89 1 is_stmt 1
  89:src/../h/Riscv.hpp **** }
 1422              		.loc 2 89 60 is_stmt 0
 1423              	#APP
 1424              	# 89 "src/../h/Riscv.hpp" 1
 1425              		csrw sepc, a5
 1426              	# 0 "" 2
 1427              	.LVL48:
 1428              	#NO_APP
 1429              	.LBE427:
 1430              	.LBE426:
 101:src/Riscv.cpp ****             return;
 1431              		.loc 1 101 13 is_stmt 1
 1432 0378 6FF09FDF 		j	.L3
 1433              	.LVL49:
 1434              	.L67:
 1435              	.LBE419:
 1436              	.LBB428:
 1437              	.LBB407:
 103:src/Riscv.cpp ****             SemaphoreBase** handle;
 1438              		.loc 1 103 13
 104:src/Riscv.cpp ****             unsigned val;
 1439              		.loc 1 104 13
 105:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 1440              		.loc 1 105 13
 105:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 1441              		.loc 1 105 69 is_stmt 0
 1442              	#APP
 1443              	# 105 "src/Riscv.cpp" 1
 1444              		mv s2,s2
 1445              	# 0 "" 2
 1446              	.LVL50:
 106:src/Riscv.cpp ****             __asm__ volatile("mv %[val],s3":[val]"=r"(val));
 1447              		.loc 1 106 13 is_stmt 1
 106:src/Riscv.cpp ****             __asm__ volatile("mv %[val],s3":[val]"=r"(val));
 1448              		.loc 1 106 60 is_stmt 0
 1449              	# 106 "src/Riscv.cpp" 1
 1450              		mv s3,s3
 1451              	# 0 "" 2
 1452              	.LVL51:
 108:src/Riscv.cpp ****             *handle = new SemaphoreBase(val);
 1453              		.loc 1 108 13 is_stmt 1
 1454              	#NO_APP
 1455              	.LBB408:
 1456              	.LBB409:
 1457              		.file 4 "src/../h/SemaphoreBase.hpp"
   1:src/../h/SemaphoreBase.hpp **** //
   2:src/../h/SemaphoreBase.hpp **** // Created by os on 5/20/22.
   3:src/../h/SemaphoreBase.hpp **** //
   4:src/../h/SemaphoreBase.hpp **** 
   5:src/../h/SemaphoreBase.hpp **** #ifndef SEMAPHOREBASE_HPP
   6:src/../h/SemaphoreBase.hpp **** #define SEMAPHOREBASE_HPP
   7:src/../h/SemaphoreBase.hpp **** 
   8:src/../h/SemaphoreBase.hpp **** #include "SemaphoreNode.hpp"
GAS LISTING /tmp/ccYCTr0w.s 			page 39


   9:src/../h/SemaphoreBase.hpp **** #include "kernel_functions.hpp"
  10:src/../h/SemaphoreBase.hpp **** 
  11:src/../h/SemaphoreBase.hpp **** class SemaphoreBase {
  12:src/../h/SemaphoreBase.hpp ****     int closed = 0;
  13:src/../h/SemaphoreBase.hpp ****     int val;
  14:src/../h/SemaphoreBase.hpp ****     SemaphoreNode *head, *tail;
  15:src/../h/SemaphoreBase.hpp **** 
  16:src/../h/SemaphoreBase.hpp ****     int block();
  17:src/../h/SemaphoreBase.hpp ****     int unblock();
  18:src/../h/SemaphoreBase.hpp **** 
  19:src/../h/SemaphoreBase.hpp ****     static void contextSwitchWithoutSavingRunningNodeInScheduler();
  20:src/../h/SemaphoreBase.hpp ****     static void pushRegisters();
  21:src/../h/SemaphoreBase.hpp ****     static void popRegisters();
  22:src/../h/SemaphoreBase.hpp **** public:
  23:src/../h/SemaphoreBase.hpp ****     SemaphoreBase(int v);
  24:src/../h/SemaphoreBase.hpp **** 
  25:src/../h/SemaphoreBase.hpp ****     int close();
  26:src/../h/SemaphoreBase.hpp ****     int wait();
  27:src/../h/SemaphoreBase.hpp ****     int signal();
  28:src/../h/SemaphoreBase.hpp **** 
  29:src/../h/SemaphoreBase.hpp **** 
  30:src/../h/SemaphoreBase.hpp ****     void *operator new(size_t size){
  31:src/../h/SemaphoreBase.hpp ****         void *p = kmem_alloc(size);
 1458              		.loc 4 31 9
 1459              		.loc 4 31 29 is_stmt 0
 1460 0384 13058001 		li	a0,24
 1461 0388 97000000 		call	_Z10kmem_allocm@plt
 1461      E7800000 
 1462              	.LVL52:
 1463              	.LEHE0:
 1464 0390 93040500 		mv	s1,a0
 1465              	.LVL53:
  32:src/../h/SemaphoreBase.hpp ****         return p;
 1466              		.loc 4 32 9 is_stmt 1
 1467              	.LBE409:
 1468              	.LBE408:
 108:src/Riscv.cpp ****             *handle = new SemaphoreBase(val);
 1469              		.loc 1 108 44 is_stmt 0
 1470 0394 9B850900 		sext.w	a1,s3
 1471              	.LEHB1:
 1472 0398 97000000 		call	_ZN13SemaphoreBaseC1Ei@plt
 1472      E7800000 
 1473              	.LVL54:
 1474              	.LEHE1:
 108:src/Riscv.cpp ****             *handle = new SemaphoreBase(val);
 1475              		.loc 1 108 21 discriminator 2
 1476 03a0 23309900 		sd	s1,0(s2)
 1477              	.LBE407:
 1478 03a4 6FF0DFED 		j	.L10
 1479              	.LVL55:
 1480              	.L68:
 1481              	.LBB410:
 1482              	.LBB399:
 110:src/Riscv.cpp ****             SemaphoreBase* handle;
 1483              		.loc 1 110 13 is_stmt 1
 111:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 1484              		.loc 1 111 13
GAS LISTING /tmp/ccYCTr0w.s 			page 40


 111:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 1485              		.loc 1 111 69 is_stmt 0
 1486              	#APP
 1487              	# 111 "src/Riscv.cpp" 1
 1488              		mv a0,s2
 1489              	# 0 "" 2
 1490              	.LVL56:
 112:src/Riscv.cpp ****             int status = handle->close();
 1491              		.loc 1 112 13 is_stmt 1
 1492              	.LEHB2:
 112:src/Riscv.cpp ****             int status = handle->close();
 1493              		.loc 1 112 39 is_stmt 0
 1494              	#NO_APP
 1495 03ac 97000000 		call	_ZN13SemaphoreBase5closeEv@plt
 1495      E7800000 
 1496              	.LVL57:
 113:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[status]"::[status]"r"(status));
 1497              		.loc 1 113 13 is_stmt 1
 113:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[status]"::[status]"r"(status));
 1498              		.loc 1 113 69 is_stmt 0
 1499              	#APP
 1500              	# 113 "src/Riscv.cpp" 1
 1501              		mv a0,a0
 1502              	# 0 "" 2
 1503              	#NO_APP
 1504              	.LBE399:
 1505 03b8 6FF09FEC 		j	.L10
 1506              	.LVL58:
 1507              	.L69:
 1508              	.LBB400:
 1509              	.LBB392:
 115:src/Riscv.cpp ****             SemaphoreBase* handle;
 1510              		.loc 1 115 13 is_stmt 1
 116:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 1511              		.loc 1 116 13
 116:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 1512              		.loc 1 116 69 is_stmt 0
 1513              	#APP
 1514              	# 116 "src/Riscv.cpp" 1
 1515              		mv a0,s2
 1516              	# 0 "" 2
 1517              	.LVL59:
 117:src/Riscv.cpp ****             int status = handle->wait();
 1518              		.loc 1 117 13 is_stmt 1
 117:src/Riscv.cpp ****             int status = handle->wait();
 1519              		.loc 1 117 38 is_stmt 0
 1520              	#NO_APP
 1521 03c0 97000000 		call	_ZN13SemaphoreBase4waitEv@plt
 1521      E7800000 
 1522              	.LVL60:
 118:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[status]"::[status]"r"(status));
 1523              		.loc 1 118 13 is_stmt 1
 118:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[status]"::[status]"r"(status));
 1524              		.loc 1 118 69 is_stmt 0
 1525              	#APP
 1526              	# 118 "src/Riscv.cpp" 1
 1527              		mv a0,a0
GAS LISTING /tmp/ccYCTr0w.s 			page 41


 1528              	# 0 "" 2
 1529              	#NO_APP
 1530              	.LBE392:
 1531 03cc 6FF05FEB 		j	.L10
 1532              	.LVL61:
 1533              	.L70:
 1534              	.LBB393:
 1535              	.LBB386:
 120:src/Riscv.cpp ****             SemaphoreBase* handle;
 1536              		.loc 1 120 13 is_stmt 1
 121:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 1537              		.loc 1 121 13
 121:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 1538              		.loc 1 121 69 is_stmt 0
 1539              	#APP
 1540              	# 121 "src/Riscv.cpp" 1
 1541              		mv a0,s2
 1542              	# 0 "" 2
 1543              	.LVL62:
 122:src/Riscv.cpp ****             int status = handle->signal();
 1544              		.loc 1 122 13 is_stmt 1
 122:src/Riscv.cpp ****             int status = handle->signal();
 1545              		.loc 1 122 40 is_stmt 0
 1546              	#NO_APP
 1547 03d4 97000000 		call	_ZN13SemaphoreBase6signalEv@plt
 1547      E7800000 
 1548              	.LVL63:
 123:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[status]"::[status]"r"(status));
 1549              		.loc 1 123 13 is_stmt 1
 123:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[status]"::[status]"r"(status));
 1550              		.loc 1 123 69 is_stmt 0
 1551              	#APP
 1552              	# 123 "src/Riscv.cpp" 1
 1553              		mv a0,a0
 1554              	# 0 "" 2
 1555              	#NO_APP
 1556              	.LBE386:
 1557 03e0 6FF01FEA 		j	.L10
 1558              	.LVL64:
 1559              	.L71:
 1560              	.LBB387:
 1561              	.LBB381:
 126:src/Riscv.cpp ****             char c = __getc();
 1562              		.loc 1 126 13 is_stmt 1
 126:src/Riscv.cpp ****             char c = __getc();
 1563              		.loc 1 126 28 is_stmt 0
 1564 03e4 97000000 		call	__getc@plt
 1564      E7800000 
 1565              	.LVL65:
 128:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[c]"::[c]"r"(c));
 1566              		.loc 1 128 13 is_stmt 1
 128:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[c]"::[c]"r"(c));
 1567              		.loc 1 128 54 is_stmt 0
 1568              	#APP
 1569              	# 128 "src/Riscv.cpp" 1
 129:src/Riscv.cpp ****             console_handler();
 1570              		mv a0,a0
GAS LISTING /tmp/ccYCTr0w.s 			page 42


 1571              	# 0 "" 2
 1572              		.loc 1 129 13 is_stmt 1
 129:src/Riscv.cpp ****             console_handler();
 1573              		.loc 1 129 28 is_stmt 0
 1574              	#NO_APP
 1575 03f0 97000000 		call	console_handler@plt
 1575      E7800000 
 1576              	.LVL66:
 1577              	.LBE381:
 1578 03f8 6FF09FE8 		j	.L10
 1579              	.LVL67:
 1580              	.L72:
 1581              	.LBB382:
 1582              	.LBB377:
 131:src/Riscv.cpp ****             char c;
 1583              		.loc 1 131 13 is_stmt 1
 132:src/Riscv.cpp ****             __asm__ volatile("mv %[c],s2":[c]"=r"(c));
 1584              		.loc 1 132 13
 132:src/Riscv.cpp ****             __asm__ volatile("mv %[c],s2":[c]"=r"(c));
 1585              		.loc 1 132 54 is_stmt 0
 1586              	#APP
 1587              	# 132 "src/Riscv.cpp" 1
 1588              		mv a0,s2
 1589              	# 0 "" 2
 1590              	.LVL68:
 133:src/Riscv.cpp ****             __putc(c);
 1591              		.loc 1 133 13 is_stmt 1
 133:src/Riscv.cpp ****             __putc(c);
 1592              		.loc 1 133 19 is_stmt 0
 1593              	#NO_APP
 1594 0400 1375F50F 		andi	a0,a0,0xff
 1595 0404 97000000 		call	__putc@plt
 1595      E7800000 
 1596              	.LVL69:
 1597              	.LBE377:
 1598 040c 6FF05FE7 		j	.L10
 1599              	.LVL70:
 1600              	.L73:
 1601              	.LBB378:
 1602              	.LBB371:
 136:src/Riscv.cpp ****             ms_sstatus(SSTATUS_SPP);
 1603              		.loc 1 136 13 is_stmt 1
 1604              	.LBB372:
 1605              	.LBB373:
 149:src/../h/Riscv.hpp **** }
 1606              		.loc 2 149 5
 149:src/../h/Riscv.hpp **** }
 1607              		.loc 2 149 65 is_stmt 0
 1608 0410 93070010 		li	a5,256
 1609              	.LVL71:
 1610              	#APP
 1611              	# 149 "src/../h/Riscv.hpp" 1
 1612              		csrs sstatus, a5
 1613              	# 0 "" 2
 1614              	.LVL72:
 1615              	#NO_APP
 1616              	.LBE373:
GAS LISTING /tmp/ccYCTr0w.s 			page 43


 1617              	.LBE372:
 137:src/Riscv.cpp ****             uint64 volatile pc;
 1618              		.loc 1 137 13 is_stmt 1
 138:src/Riscv.cpp ****             __asm__ volatile("mv %[pc], s6":[pc]"=r"(pc));
 1619              		.loc 1 138 13
 138:src/Riscv.cpp ****             __asm__ volatile("mv %[pc], s6":[pc]"=r"(pc));
 1620              		.loc 1 138 58 is_stmt 0
 1621              	#APP
 1622              	# 138 "src/Riscv.cpp" 1
 1623              		mv a5, s6
 1624              	# 0 "" 2
 1625              	#NO_APP
 1626 041c 2338F4F0 		sd	a5,-240(s0)
 139:src/Riscv.cpp ****             w_sepc(pc + 8);
 1627              		.loc 1 139 13 is_stmt 1
 139:src/Riscv.cpp ****             w_sepc(pc + 8);
 1628              		.loc 1 139 20 is_stmt 0
 1629 0420 833704F1 		ld	a5,-240(s0)
 139:src/Riscv.cpp ****             w_sepc(pc + 8);
 1630              		.loc 1 139 19
 1631 0424 93878700 		addi	a5,a5,8
 1632              	.LVL73:
 1633              	.LBB374:
 1634              	.LBB375:
  89:src/../h/Riscv.hpp **** }
 1635              		.loc 2 89 1 is_stmt 1
  89:src/../h/Riscv.hpp **** }
 1636              		.loc 2 89 60 is_stmt 0
 1637              	#APP
 1638              	# 89 "src/../h/Riscv.hpp" 1
 1639              		csrw sepc, a5
 1640              	# 0 "" 2
 1641              	.LVL74:
 1642              	#NO_APP
 1643              	.LBE375:
 1644              	.LBE374:
 140:src/Riscv.cpp ****             return;
 1645              		.loc 1 140 13 is_stmt 1
 1646 042c 6FF05FD4 		j	.L3
 1647              	.LVL75:
 1648              	.L48:
 1649              	.LBE371:
 1650              	.LBE378:
 1651              	.LBE382:
 1652              	.LBE387:
 1653              	.LBE393:
 1654              	.LBE400:
 1655              	.LBE410:
 1656              	.LBE428:
 1657              	.LBE443:
 1658              	.LBE455:
 1659              	.LBE468:
 1660              	.LBE482:
 1661              	.LBE500:
 1662              	.LBE513:
 1663              	.LBB514:
 1664              	.LBB337:
GAS LISTING /tmp/ccYCTr0w.s 			page 44


 1665              	.LBB317:
 1666              	.LBB301:
 165:src/Riscv.cpp ****             size_t sz;
 1667              		.loc 1 165 13
 166:src/Riscv.cpp ****             __asm__ volatile("mv %[sz],s2": [sz]"=r"(sz));
 1668              		.loc 1 166 13
 166:src/Riscv.cpp ****             __asm__ volatile("mv %[sz],s2": [sz]"=r"(sz));
 1669              		.loc 1 166 58 is_stmt 0
 1670              	#APP
 1671              	# 166 "src/Riscv.cpp" 1
 1672              		mv a0,s2
 1673              	# 0 "" 2
 1674              	.LVL76:
 167:src/Riscv.cpp ****             void* result = MemoryAllocator::malloc(sz);
 1675              		.loc 1 167 13 is_stmt 1
 167:src/Riscv.cpp ****             void* result = MemoryAllocator::malloc(sz);
 1676              		.loc 1 167 51 is_stmt 0
 1677              	#NO_APP
 1678 0434 97000000 		call	_ZN15MemoryAllocator6mallocEm@plt
 1678      E7800000 
 1679              	.LVL77:
 168:src/Riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(result)); // result is already in a0, but just in case
 1680              		.loc 1 168 13 is_stmt 1
 168:src/Riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(result)); // result is already in a0, but just in case
 1681              		.loc 1 168 54 is_stmt 0
 1682              	#APP
 1683              	# 168 "src/Riscv.cpp" 1
 1684              		mv a0,a0
 1685              	# 0 "" 2
 1686              	.LVL78:
 1687              	#NO_APP
 1688              	.L26:
 1689              	.LBE301:
 1690              	.LBE317:
 275:src/Riscv.cpp ****         __asm__ volatile("li s6,-1337");
 1691              		.loc 1 275 9 is_stmt 1
 275:src/Riscv.cpp ****         __asm__ volatile("li s6,-1337");
 1692              		.loc 1 275 40 is_stmt 0
 1693              	#APP
 1694              	# 275 "src/Riscv.cpp" 1
 276:src/Riscv.cpp ****         __asm__ volatile("li s5,-1337");
 1695              		li s6,-1337
 1696              	# 0 "" 2
 1697              		.loc 1 276 9 is_stmt 1
 276:src/Riscv.cpp ****         __asm__ volatile("li s5,-1337");
 1698              		.loc 1 276 40 is_stmt 0
 1699              	# 276 "src/Riscv.cpp" 1
 278:src/Riscv.cpp ****         uint64 volatile sepc = Riscv::r_sepc();
 1700              		li s5,-1337
 1701              	# 0 "" 2
 1702              		.loc 1 278 9 is_stmt 1
 1703              	#NO_APP
 1704              	.LBB318:
 1705              	.LBB319:
  83:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" :[sepc]"=r"(sepc));
 1706              		.loc 2 83 5
  84:src/../h/Riscv.hpp ****     return sepc;
GAS LISTING /tmp/ccYCTr0w.s 			page 45


 1707              		.loc 2 84 5
  84:src/../h/Riscv.hpp ****     return sepc;
 1708              		.loc 2 84 62 is_stmt 0
 1709              	#APP
 1710              	# 84 "src/../h/Riscv.hpp" 1
 1711              		csrr a5, sepc
 1712              	# 0 "" 2
 1713              	#NO_APP
 1714 044c 2330F4FC 		sd	a5,-64(s0)
  85:src/../h/Riscv.hpp **** }
 1715              		.loc 2 85 5 is_stmt 1
  85:src/../h/Riscv.hpp **** }
 1716              		.loc 2 85 12 is_stmt 0
 1717 0450 833704FC 		ld	a5,-64(s0)
 1718              	.LBE319:
 1719              	.LBE318:
 278:src/Riscv.cpp ****         uint64 volatile sepc = Riscv::r_sepc();
 1720              		.loc 1 278 46
 1721 0454 233CF4F4 		sd	a5,-168(s0)
 279:src/Riscv.cpp ****         Riscv::w_sepc(sepc+4);
 1722              		.loc 1 279 9 is_stmt 1
 279:src/Riscv.cpp ****         Riscv::w_sepc(sepc+4);
 1723              		.loc 1 279 23 is_stmt 0
 1724 0458 833784F5 		ld	a5,-168(s0)
 279:src/Riscv.cpp ****         Riscv::w_sepc(sepc+4);
 1725              		.loc 1 279 22
 1726 045c 93874700 		addi	a5,a5,4
 1727              	.LVL79:
 1728              	.LBB320:
 1729              	.LBB321:
  89:src/../h/Riscv.hpp **** }
 1730              		.loc 2 89 1 is_stmt 1
  89:src/../h/Riscv.hpp **** }
 1731              		.loc 2 89 60 is_stmt 0
 1732              	#APP
 1733              	# 89 "src/../h/Riscv.hpp" 1
  90:src/../h/Riscv.hpp **** 
 1734              		csrw sepc, a5
 1735              	# 0 "" 2
 1736              		.loc 2 90 1
 1737              	#NO_APP
 1738 0464 6FF05FD0 		j	.L6
 1739              	.LVL80:
 1740              	.L49:
 1741              	.LBE321:
 1742              	.LBE320:
 1743              	.LBB322:
 1744              	.LBB302:
 1745              	.LBB286:
 171:src/Riscv.cpp ****             void *addr = 0;
 1746              		.loc 1 171 13 is_stmt 1
 172:src/Riscv.cpp ****             __asm__ volatile("mv %0,s2":"=r"(addr));
 1747              		.loc 1 172 13
 172:src/Riscv.cpp ****             __asm__ volatile("mv %0,s2":"=r"(addr));
 1748              		.loc 1 172 52 is_stmt 0
 1749              	#APP
 1750              	# 172 "src/Riscv.cpp" 1
GAS LISTING /tmp/ccYCTr0w.s 			page 46


 1751              		mv a0,s2
 1752              	# 0 "" 2
 1753              	.LVL81:
 173:src/Riscv.cpp ****             int result = MemoryAllocator::free(addr);
 1754              		.loc 1 173 13 is_stmt 1
 173:src/Riscv.cpp ****             int result = MemoryAllocator::free(addr);
 1755              		.loc 1 173 47 is_stmt 0
 1756              	#NO_APP
 1757 046c 97000000 		call	_ZN15MemoryAllocator4freeEPv@plt
 1757      E7800000 
 1758              	.LVL82:
 174:src/Riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(result));
 1759              		.loc 1 174 13 is_stmt 1
 174:src/Riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(result));
 1760              		.loc 1 174 54 is_stmt 0
 1761              	#APP
 1762              	# 174 "src/Riscv.cpp" 1
 1763              		mv a0,a0
 1764              	# 0 "" 2
 1765              	#NO_APP
 1766              	.LBE286:
 1767 0478 6FF09FFC 		j	.L26
 1768              	.LVL83:
 1769              	.L50:
 1770              	.LBB287:
 1771              	.LBB272:
 177:src/Riscv.cpp ****             TCB** handle;
 1772              		.loc 1 177 13 is_stmt 1
 178:src/Riscv.cpp ****             void(*start_routine)(void*);
 1773              		.loc 1 178 13
 179:src/Riscv.cpp ****             void* arg;
 1774              		.loc 1 179 13
 180:src/Riscv.cpp ****             void* stack;
 1775              		.loc 1 180 13
 181:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 1776              		.loc 1 181 13
 181:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 1777              		.loc 1 181 69 is_stmt 0
 1778              	#APP
 1779              	# 181 "src/Riscv.cpp" 1
 1780              		mv s1,s2
 1781              	# 0 "" 2
 1782              	.LVL84:
 182:src/Riscv.cpp ****             __asm__ volatile("mv %[start_routine],s3":[start_routine]"=r"(start_routine));
 1783              		.loc 1 182 13 is_stmt 1
 182:src/Riscv.cpp ****             __asm__ volatile("mv %[start_routine],s3":[start_routine]"=r"(start_routine));
 1784              		.loc 1 182 90 is_stmt 0
 1785              	# 182 "src/Riscv.cpp" 1
 1786              		mv a0,s3
 1787              	# 0 "" 2
 1788              	.LVL85:
 183:src/Riscv.cpp ****             __asm__ volatile("mv %[arg],s4":[arg]"=r"(arg));
 1789              		.loc 1 183 13 is_stmt 1
 183:src/Riscv.cpp ****             __asm__ volatile("mv %[arg],s4":[arg]"=r"(arg));
 1790              		.loc 1 183 60 is_stmt 0
 1791              	# 183 "src/Riscv.cpp" 1
 1792              		mv a1,s4
GAS LISTING /tmp/ccYCTr0w.s 			page 47


 1793              	# 0 "" 2
 1794              	.LVL86:
 184:src/Riscv.cpp ****             __asm__ volatile("mv %[stack],s5":[stack]"=r"(stack));
 1795              		.loc 1 184 13 is_stmt 1
 184:src/Riscv.cpp ****             __asm__ volatile("mv %[stack],s5":[stack]"=r"(stack));
 1796              		.loc 1 184 66 is_stmt 0
 1797              	# 184 "src/Riscv.cpp" 1
 1798              		mv a2,s5
 1799              	# 0 "" 2
 1800              	.LVL87:
 186:src/Riscv.cpp ****             *handle = TCB::createThread(start_routine, arg, stack);
 1801              		.loc 1 186 13 is_stmt 1
 186:src/Riscv.cpp ****             *handle = TCB::createThread(start_routine, arg, stack);
 1802              		.loc 1 186 40 is_stmt 0
 1803              	#NO_APP
 1804 048c 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_S0_@plt
 1804      E7800000 
 1805              	.LVL88:
 186:src/Riscv.cpp ****             *handle = TCB::createThread(start_routine, arg, stack);
 1806              		.loc 1 186 21
 1807 0494 23B0A400 		sd	a0,0(s1)
 1808              	.LBE272:
 1809 0498 6FF09FFA 		j	.L26
 1810              	.LVL89:
 1811              	.L51:
 1812              	.LBB273:
 1813              	.LBB255:
 188:src/Riscv.cpp ****             int numberOfActiveThreads = TCB::numberOfActiveThreads;
 1814              		.loc 1 188 13 is_stmt 1
 188:src/Riscv.cpp ****             int numberOfActiveThreads = TCB::numberOfActiveThreads;
 1815              		.loc 1 188 17 is_stmt 0
 1816 049c 97070000 		la	a5,_ZN3TCB21numberOfActiveThreadsE
 1816      83B70700 
 1817              	.LVL90:
 1818 04a4 03A70700 		lw	a4,0(a5)
 1819              	.LVL91:
 189:src/Riscv.cpp ****             if(numberOfActiveThreads == 1){
 1820              		.loc 1 189 13 is_stmt 1
 1821              	.LBB256:
 1822 04a8 93071000 		li	a5,1
 1823 04ac 6316F700 		bne	a4,a5,.L30
 190:src/Riscv.cpp ****                 __asm__ volatile("li a0,-1");
 1824              		.loc 1 190 17
 190:src/Riscv.cpp ****                 __asm__ volatile("li a0,-1");
 1825              		.loc 1 190 45 is_stmt 0
 1826              	#APP
 1827              	# 190 "src/Riscv.cpp" 1
 1828              		li a0,-1
 1829              	# 0 "" 2
 1830              	#NO_APP
 1831 04b4 6FF0DFF8 		j	.L26
 1832              	.L30:
 1833              	.LBB257:
 192:src/Riscv.cpp ****                 TCB::running->setFinished(true);
 1834              		.loc 1 192 17 is_stmt 1
 192:src/Riscv.cpp ****                 TCB::running->setFinished(true);
 1835              		.loc 1 192 42 is_stmt 0
GAS LISTING /tmp/ccYCTr0w.s 			page 48


 1836 04b8 17090000 		la	s2,_ZN3TCB7runningE
 1836      03390900 
 1837 04c0 83340900 		ld	s1,0(s2)
 1838              	.LVL92:
 1839              	.LBB258:
 1840              	.LBB259:
  14:src/../h/TCB.hpp ****     uint64 getTimeSlice() const { return timeSlice;}
 1841              		.loc 3 14 37 is_stmt 1
  14:src/../h/TCB.hpp ****     uint64 getTimeSlice() const { return timeSlice;}
 1842              		.loc 3 14 52 is_stmt 0
 1843 04c4 93071000 		li	a5,1
 1844 04c8 238CF402 		sb	a5,56(s1)
 1845              	.LVL93:
 1846              	.LBE259:
 1847              	.LBE258:
 194:src/Riscv.cpp ****                 TCB* old = TCB::running;
 1848              		.loc 1 194 17 is_stmt 1
 195:src/Riscv.cpp ****                 numberOfActiveThreads--;
 1849              		.loc 1 195 17
 196:src/Riscv.cpp ****                 TCB::running = Scheduler::get()->data;
 1850              		.loc 1 196 17
 196:src/Riscv.cpp ****                 TCB::running = Scheduler::get()->data;
 1851              		.loc 1 196 46 is_stmt 0
 1852 04cc 97000000 		call	_ZN9Scheduler3getEv@plt
 1852      E7800000 
 1853              	.LVL94:
 196:src/Riscv.cpp ****                 TCB::running = Scheduler::get()->data;
 1854              		.loc 1 196 50
 1855 04d4 83350500 		ld	a1,0(a0)
 196:src/Riscv.cpp ****                 TCB::running = Scheduler::get()->data;
 1856              		.loc 1 196 30
 1857 04d8 2330B900 		sd	a1,0(s2)
 197:src/Riscv.cpp ****                 TCB::contextSwitch(&old->context, &TCB::running->context);
 1858              		.loc 1 197 17 is_stmt 1
 197:src/Riscv.cpp ****                 TCB::contextSwitch(&old->context, &TCB::running->context);
 1859              		.loc 1 197 35 is_stmt 0
 1860 04dc 93850501 		addi	a1,a1,16
 1861 04e0 13850401 		addi	a0,s1,16
 1862 04e4 97000000 		call	_ZN3TCB13contextSwitchEPNS_7ContextES1_@plt
 1862      E7800000 
 1863              	.LVL95:
 1864 04ec 6FF05FF5 		j	.L26
 1865              	.LVL96:
 1866              	.L52:
 1867              	.LBE257:
 1868              	.LBE256:
 1869              	.LBE255:
 1870              	.LBB260:
 1871              	.LBB235:
 200:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc() + 4;
 1872              		.loc 1 200 13 is_stmt 1
 1873              	.LBB236:
 1874              	.LBB237:
  83:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" :[sepc]"=r"(sepc));
 1875              		.loc 2 83 5
  84:src/../h/Riscv.hpp ****     return sepc;
 1876              		.loc 2 84 5
GAS LISTING /tmp/ccYCTr0w.s 			page 49


  84:src/../h/Riscv.hpp ****     return sepc;
 1877              		.loc 2 84 62 is_stmt 0
 1878              	#APP
 1879              	# 84 "src/../h/Riscv.hpp" 1
 1880              		csrr a5, sepc
 1881              	# 0 "" 2
 1882              	.LVL97:
 1883              	#NO_APP
 1884 04f4 2330F4FA 		sd	a5,-96(s0)
  85:src/../h/Riscv.hpp **** }
 1885              		.loc 2 85 5 is_stmt 1
  85:src/../h/Riscv.hpp **** }
 1886              		.loc 2 85 12 is_stmt 0
 1887 04f8 833704FA 		ld	a5,-96(s0)
 1888              	.LBE237:
 1889              	.LBE236:
 200:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc() + 4;
 1890              		.loc 1 200 45
 1891 04fc 93874700 		addi	a5,a5,4
 200:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc() + 4;
 1892              		.loc 1 200 47
 1893 0500 2334F4F2 		sd	a5,-216(s0)
 201:src/Riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 1894              		.loc 1 201 13 is_stmt 1
 1895              	.LBB238:
 1896              	.LBB239:
 157:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus":[sstatus]"=r"(sstatus));
 1897              		.loc 2 157 5
 158:src/../h/Riscv.hpp ****     return sstatus;
 1898              		.loc 2 158 5
 158:src/../h/Riscv.hpp ****     return sstatus;
 1899              		.loc 2 158 73 is_stmt 0
 1900              	#APP
 1901              	# 158 "src/../h/Riscv.hpp" 1
 1902              		csrr a5, sstatus
 1903              	# 0 "" 2
 1904              	#NO_APP
 1905 0508 233CF4F8 		sd	a5,-104(s0)
 159:src/../h/Riscv.hpp **** }
 1906              		.loc 2 159 5 is_stmt 1
 159:src/../h/Riscv.hpp **** }
 1907              		.loc 2 159 12 is_stmt 0
 1908 050c 833784F9 		ld	a5,-104(s0)
 1909              	.LBE239:
 1910              	.LBE238:
 201:src/Riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 1911              		.loc 1 201 49
 1912 0510 2338F4F2 		sd	a5,-208(s0)
 202:src/Riscv.cpp ****             TCB::timeSliceCounter = 0;
 1913              		.loc 1 202 13 is_stmt 1
 202:src/Riscv.cpp ****             TCB::timeSliceCounter = 0;
 1914              		.loc 1 202 35 is_stmt 0
 1915 0514 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 1915      83B70700 
 1916 051c 23B00700 		sd	zero,0(a5)
 204:src/Riscv.cpp ****             TCB::dispatch();
 1917              		.loc 1 204 13 is_stmt 1
GAS LISTING /tmp/ccYCTr0w.s 			page 50


 204:src/Riscv.cpp ****             TCB::dispatch();
 1918              		.loc 1 204 26 is_stmt 0
 1919 0520 97000000 		call	_ZN3TCB8dispatchEv@plt
 1919      E7800000 
 1920              	.LVL98:
 205:src/Riscv.cpp ****             w_sstatus(sstatus);
 1921              		.loc 1 205 13 is_stmt 1
 205:src/Riscv.cpp ****             w_sstatus(sstatus);
 1922              		.loc 1 205 22 is_stmt 0
 1923 0528 833704F3 		ld	a5,-208(s0)
 1924              	.LVL99:
 1925              	.LBB240:
 1926              	.LBB241:
 163:src/../h/Riscv.hpp **** };
 1927              		.loc 2 163 5 is_stmt 1
 163:src/../h/Riscv.hpp **** };
 1928              		.loc 2 163 75 is_stmt 0
 1929              	#APP
 1930              	# 163 "src/../h/Riscv.hpp" 1
 1931              		csrw sstatus, a5
 1932              	# 0 "" 2
 1933              	.LVL100:
 1934              	#NO_APP
 1935              	.LBE241:
 1936              	.LBE240:
 206:src/Riscv.cpp ****             w_sepc(sepc);
 1937              		.loc 1 206 13 is_stmt 1
 206:src/Riscv.cpp ****             w_sepc(sepc);
 1938              		.loc 1 206 19 is_stmt 0
 1939 0530 833784F2 		ld	a5,-216(s0)
 1940              	.LVL101:
 1941              	.LBB242:
 1942              	.LBB243:
  89:src/../h/Riscv.hpp **** }
 1943              		.loc 2 89 1 is_stmt 1
  89:src/../h/Riscv.hpp **** }
 1944              		.loc 2 89 60 is_stmt 0
 1945              	#APP
 1946              	# 89 "src/../h/Riscv.hpp" 1
 1947              		csrw sepc, a5
 1948              	# 0 "" 2
 1949              	.LVL102:
 1950              	#NO_APP
 1951              	.LBE243:
 1952              	.LBE242:
 207:src/Riscv.cpp ****             return;
 1953              		.loc 1 207 13 is_stmt 1
 1954 0538 6FF09FC3 		j	.L3
 1955              	.LVL103:
 1956              	.L53:
 1957              	.LBE235:
 1958              	.LBB244:
 1959              	.LBB222:
 209:src/Riscv.cpp ****             SemaphoreBase** handle;
 1960              		.loc 1 209 13
 210:src/Riscv.cpp ****             unsigned val;
 1961              		.loc 1 210 13
GAS LISTING /tmp/ccYCTr0w.s 			page 51


 211:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 1962              		.loc 1 211 13
 211:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 1963              		.loc 1 211 69 is_stmt 0
 1964              	#APP
 1965              	# 211 "src/Riscv.cpp" 1
 1966              		mv s2,s2
 1967              	# 0 "" 2
 1968              	.LVL104:
 212:src/Riscv.cpp ****             __asm__ volatile("mv %[val],s3":[val]"=r"(val));
 1969              		.loc 1 212 13 is_stmt 1
 212:src/Riscv.cpp ****             __asm__ volatile("mv %[val],s3":[val]"=r"(val));
 1970              		.loc 1 212 60 is_stmt 0
 1971              	# 212 "src/Riscv.cpp" 1
 1972              		mv s3,s3
 1973              	# 0 "" 2
 1974              	.LVL105:
 215:src/Riscv.cpp ****             *handle = new SemaphoreBase(val);
 1975              		.loc 1 215 13 is_stmt 1
 1976              	#NO_APP
 1977              	.LBB223:
 1978              	.LBB224:
  31:src/../h/SemaphoreBase.hpp ****         return p;
 1979              		.loc 4 31 9
  31:src/../h/SemaphoreBase.hpp ****         return p;
 1980              		.loc 4 31 29 is_stmt 0
 1981 0544 13058001 		li	a0,24
 1982 0548 97000000 		call	_Z10kmem_allocm@plt
 1982      E7800000 
 1983              	.LVL106:
 1984              	.LEHE2:
 1985 0550 93040500 		mv	s1,a0
 1986              	.LVL107:
 1987              		.loc 4 32 9 is_stmt 1
 1988              	.LBE224:
 1989              	.LBE223:
 215:src/Riscv.cpp ****             *handle = new SemaphoreBase(val);
 1990              		.loc 1 215 44 is_stmt 0
 1991 0554 9B850900 		sext.w	a1,s3
 1992              	.LEHB3:
 1993 0558 97000000 		call	_ZN13SemaphoreBaseC1Ei@plt
 1993      E7800000 
 1994              	.LVL108:
 1995              	.LEHE3:
 215:src/Riscv.cpp ****             *handle = new SemaphoreBase(val);
 1996              		.loc 1 215 21 discriminator 2
 1997 0560 23309900 		sd	s1,0(s2)
 1998              	.LBE222:
 1999 0564 6FF0DFED 		j	.L26
 2000              	.LVL109:
 2001              	.L54:
 2002              	.LBB225:
 2003              	.LBB213:
 217:src/Riscv.cpp ****             SemaphoreBase* handle;
 2004              		.loc 1 217 13 is_stmt 1
 218:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 2005              		.loc 1 218 13
GAS LISTING /tmp/ccYCTr0w.s 			page 52


 218:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 2006              		.loc 1 218 69 is_stmt 0
 2007              	#APP
 2008              	# 218 "src/Riscv.cpp" 1
 2009              		mv a0,s2
 2010              	# 0 "" 2
 2011              	.LVL110:
 219:src/Riscv.cpp ****             int status = handle->close();
 2012              		.loc 1 219 13 is_stmt 1
 2013              	.LEHB4:
 219:src/Riscv.cpp ****             int status = handle->close();
 2014              		.loc 1 219 39 is_stmt 0
 2015              	#NO_APP
 2016 056c 97000000 		call	_ZN13SemaphoreBase5closeEv@plt
 2016      E7800000 
 2017              	.LVL111:
 220:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[status]"::[status]"r"(status));
 2018              		.loc 1 220 13 is_stmt 1
 220:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[status]"::[status]"r"(status));
 2019              		.loc 1 220 69 is_stmt 0
 2020              	#APP
 2021              	# 220 "src/Riscv.cpp" 1
 2022              		mv a0,a0
 2023              	# 0 "" 2
 2024              	#NO_APP
 2025              	.LBE213:
 2026 0578 6FF09FEC 		j	.L26
 2027              	.LVL112:
 2028              	.L55:
 2029              	.LBB214:
 2030              	.LBB205:
 222:src/Riscv.cpp ****             SemaphoreBase* handle;
 2031              		.loc 1 222 13 is_stmt 1
 223:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 2032              		.loc 1 223 13
 223:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 2033              		.loc 1 223 69 is_stmt 0
 2034              	#APP
 2035              	# 223 "src/Riscv.cpp" 1
 2036              		mv a0,s2
 2037              	# 0 "" 2
 2038              	.LVL113:
 224:src/Riscv.cpp ****             int status = handle->wait();
 2039              		.loc 1 224 13 is_stmt 1
 224:src/Riscv.cpp ****             int status = handle->wait();
 2040              		.loc 1 224 38 is_stmt 0
 2041              	#NO_APP
 2042 0580 97000000 		call	_ZN13SemaphoreBase4waitEv@plt
 2042      E7800000 
 2043              	.LVL114:
 225:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[status]"::[status]"r"(status));
 2044              		.loc 1 225 13 is_stmt 1
 225:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[status]"::[status]"r"(status));
 2045              		.loc 1 225 69 is_stmt 0
 2046              	#APP
 2047              	# 225 "src/Riscv.cpp" 1
 2048              		mv a0,a0
GAS LISTING /tmp/ccYCTr0w.s 			page 53


 2049              	# 0 "" 2
 2050              	#NO_APP
 2051              	.LBE205:
 2052 058c 6FF05FEB 		j	.L26
 2053              	.LVL115:
 2054              	.L56:
 2055              	.LBB206:
 2056              	.LBB198:
 227:src/Riscv.cpp ****             SemaphoreBase* handle;
 2057              		.loc 1 227 13 is_stmt 1
 228:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 2058              		.loc 1 228 13
 228:src/Riscv.cpp ****             __asm__ volatile("mv %[handle],s2":[handle]"=r"(handle));
 2059              		.loc 1 228 69 is_stmt 0
 2060              	#APP
 2061              	# 228 "src/Riscv.cpp" 1
 2062              		mv a0,s2
 2063              	# 0 "" 2
 2064              	.LVL116:
 229:src/Riscv.cpp ****             int status = handle->signal();
 2065              		.loc 1 229 13 is_stmt 1
 229:src/Riscv.cpp ****             int status = handle->signal();
 2066              		.loc 1 229 40 is_stmt 0
 2067              	#NO_APP
 2068 0594 97000000 		call	_ZN13SemaphoreBase6signalEv@plt
 2068      E7800000 
 2069              	.LVL117:
 230:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[status]"::[status]"r"(status));
 2070              		.loc 1 230 13 is_stmt 1
 230:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[status]"::[status]"r"(status));
 2071              		.loc 1 230 69 is_stmt 0
 2072              	#APP
 2073              	# 230 "src/Riscv.cpp" 1
 2074              		mv a0,a0
 2075              	# 0 "" 2
 2076              	#NO_APP
 2077              	.LBE198:
 2078 05a0 6FF01FEA 		j	.L26
 2079              	.LVL118:
 2080              	.L57:
 2081              	.LBB199:
 2082              	.LBB192:
 233:src/Riscv.cpp ****             char c = __getc();
 2083              		.loc 1 233 13 is_stmt 1
 233:src/Riscv.cpp ****             char c = __getc();
 2084              		.loc 1 233 28 is_stmt 0
 2085 05a4 97000000 		call	__getc@plt
 2085      E7800000 
 2086              	.LVL119:
 236:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[c]"::[c]"r"(c));
 2087              		.loc 1 236 13 is_stmt 1
 236:src/Riscv.cpp ****             __asm__ volatile("mv a0,%[c]"::[c]"r"(c));
 2088              		.loc 1 236 54 is_stmt 0
 2089              	#APP
 2090              	# 236 "src/Riscv.cpp" 1
 2091              		mv a0,a0
 2092              	# 0 "" 2
GAS LISTING /tmp/ccYCTr0w.s 			page 54


 2093              	#NO_APP
 2094              	.LBE192:
 2095 05b0 6FF01FE9 		j	.L26
 2096              	.LVL120:
 2097              	.L58:
 2098              	.LBB193:
 2099              	.LBB187:
 238:src/Riscv.cpp ****             char c;
 2100              		.loc 1 238 13 is_stmt 1
 239:src/Riscv.cpp ****             __asm__ volatile("mv %[c],s2":[c]"=r"(c));
 2101              		.loc 1 239 13
 239:src/Riscv.cpp ****             __asm__ volatile("mv %[c],s2":[c]"=r"(c));
 2102              		.loc 1 239 54 is_stmt 0
 2103              	#APP
 2104              	# 239 "src/Riscv.cpp" 1
 2105              		mv a0,s2
 2106              	# 0 "" 2
 2107              	.LVL121:
 240:src/Riscv.cpp ****             __putc(c);
 2108              		.loc 1 240 13 is_stmt 1
 240:src/Riscv.cpp ****             __putc(c);
 2109              		.loc 1 240 19 is_stmt 0
 2110              	#NO_APP
 2111 05b8 1375F50F 		andi	a0,a0,0xff
 2112 05bc 97000000 		call	__putc@plt
 2112      E7800000 
 2113              	.LVL122:
 2114              	.LBE187:
 2115 05c4 6FF0DFE7 		j	.L26
 2116              	.LVL123:
 2117              	.L59:
 2118              	.LBB188:
 2119              	.LBB175:
 243:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc() + 4;
 2120              		.loc 1 243 13 is_stmt 1
 2121              	.LBB176:
 2122              	.LBB177:
  83:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" :[sepc]"=r"(sepc));
 2123              		.loc 2 83 5
  84:src/../h/Riscv.hpp ****     return sepc;
 2124              		.loc 2 84 5
  84:src/../h/Riscv.hpp ****     return sepc;
 2125              		.loc 2 84 62 is_stmt 0
 2126              	#APP
 2127              	# 84 "src/../h/Riscv.hpp" 1
 2128              		csrr a5, sepc
 2129              	# 0 "" 2
 2130              	.LVL124:
 2131              	#NO_APP
 2132 05cc 2338F4FA 		sd	a5,-80(s0)
  85:src/../h/Riscv.hpp **** }
 2133              		.loc 2 85 5 is_stmt 1
  85:src/../h/Riscv.hpp **** }
 2134              		.loc 2 85 12 is_stmt 0
 2135 05d0 833704FB 		ld	a5,-80(s0)
 2136              	.LBE177:
 2137              	.LBE176:
GAS LISTING /tmp/ccYCTr0w.s 			page 55


 243:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc() + 4;
 2138              		.loc 1 243 45
 2139 05d4 93874700 		addi	a5,a5,4
 243:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc() + 4;
 2140              		.loc 1 243 47
 2141 05d8 233CF4F2 		sd	a5,-200(s0)
 244:src/Riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 2142              		.loc 1 244 13 is_stmt 1
 2143              	.LBB178:
 2144              	.LBB179:
 157:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus":[sstatus]"=r"(sstatus));
 2145              		.loc 2 157 5
 158:src/../h/Riscv.hpp ****     return sstatus;
 2146              		.loc 2 158 5
 158:src/../h/Riscv.hpp ****     return sstatus;
 2147              		.loc 2 158 73 is_stmt 0
 2148              	#APP
 2149              	# 158 "src/../h/Riscv.hpp" 1
 2150              		csrr a5, sstatus
 2151              	# 0 "" 2
 2152              	#NO_APP
 2153 05e0 2334F4FA 		sd	a5,-88(s0)
 159:src/../h/Riscv.hpp **** }
 2154              		.loc 2 159 5 is_stmt 1
 159:src/../h/Riscv.hpp **** }
 2155              		.loc 2 159 12 is_stmt 0
 2156 05e4 833784FA 		ld	a5,-88(s0)
 2157              	.LBE179:
 2158              	.LBE178:
 244:src/Riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 2159              		.loc 1 244 49
 2160 05e8 2330F4F4 		sd	a5,-192(s0)
 246:src/Riscv.cpp ****             TCB* old = TCB::running;
 2161              		.loc 1 246 13 is_stmt 1
 246:src/Riscv.cpp ****             TCB* old = TCB::running;
 2162              		.loc 1 246 18 is_stmt 0
 2163 05ec 97040000 		la	s1,_ZN3TCB7runningE
 2163      83B40400 
 2164 05f4 03B90400 		ld	s2,0(s1)
 2165              	.LVL125:
 247:src/Riscv.cpp ****             TCB::numberOfActiveThreads--;
 2166              		.loc 1 247 13 is_stmt 1
 247:src/Riscv.cpp ****             TCB::numberOfActiveThreads--;
 2167              		.loc 1 247 39 is_stmt 0
 2168 05f8 17070000 		la	a4,_ZN3TCB21numberOfActiveThreadsE
 2168      03370700 
 2169 0600 83370700 		ld	a5,0(a4)
 2170 0604 9387F7FF 		addi	a5,a5,-1
 2171 0608 2330F700 		sd	a5,0(a4)
 249:src/Riscv.cpp ****             TCB::running = Scheduler::get()->data;
 2172              		.loc 1 249 13 is_stmt 1
 249:src/Riscv.cpp ****             TCB::running = Scheduler::get()->data;
 2173              		.loc 1 249 42 is_stmt 0
 2174 060c 97000000 		call	_ZN9Scheduler3getEv@plt
 2174      E7800000 
 2175              	.LVL126:
 249:src/Riscv.cpp ****             TCB::running = Scheduler::get()->data;
GAS LISTING /tmp/ccYCTr0w.s 			page 56


 2176              		.loc 1 249 46
 2177 0614 83350500 		ld	a1,0(a0)
 249:src/Riscv.cpp ****             TCB::running = Scheduler::get()->data;
 2178              		.loc 1 249 26
 2179 0618 23B0B400 		sd	a1,0(s1)
 250:src/Riscv.cpp ****             TCB::contextSwitch(&old->context, &TCB::running->context);
 2180              		.loc 1 250 13 is_stmt 1
 250:src/Riscv.cpp ****             TCB::contextSwitch(&old->context, &TCB::running->context);
 2181              		.loc 1 250 31 is_stmt 0
 2182 061c 93850501 		addi	a1,a1,16
 2183 0620 13050901 		addi	a0,s2,16
 2184 0624 97000000 		call	_ZN3TCB13contextSwitchEPNS_7ContextES1_@plt
 2184      E7800000 
 2185              	.LVL127:
 252:src/Riscv.cpp ****             w_sstatus(sstatus);
 2186              		.loc 1 252 13 is_stmt 1
 252:src/Riscv.cpp ****             w_sstatus(sstatus);
 2187              		.loc 1 252 22 is_stmt 0
 2188 062c 833704F4 		ld	a5,-192(s0)
 2189              	.LVL128:
 2190              	.LBB180:
 2191              	.LBB181:
 163:src/../h/Riscv.hpp **** };
 2192              		.loc 2 163 5 is_stmt 1
 163:src/../h/Riscv.hpp **** };
 2193              		.loc 2 163 75 is_stmt 0
 2194              	#APP
 2195              	# 163 "src/../h/Riscv.hpp" 1
 2196              		csrw sstatus, a5
 2197              	# 0 "" 2
 2198              	.LVL129:
 2199              	#NO_APP
 2200              	.LBE181:
 2201              	.LBE180:
 253:src/Riscv.cpp ****             w_sepc(sepc);
 2202              		.loc 1 253 13 is_stmt 1
 253:src/Riscv.cpp ****             w_sepc(sepc);
 2203              		.loc 1 253 19 is_stmt 0
 2204 0634 833784F3 		ld	a5,-200(s0)
 2205              	.LVL130:
 2206              	.LBB182:
 2207              	.LBB183:
  89:src/../h/Riscv.hpp **** }
 2208              		.loc 2 89 1 is_stmt 1
  89:src/../h/Riscv.hpp **** }
 2209              		.loc 2 89 60 is_stmt 0
 2210              	#APP
 2211              	# 89 "src/../h/Riscv.hpp" 1
 2212              		csrw sepc, a5
 2213              	# 0 "" 2
 2214              	.LVL131:
 2215              	#NO_APP
 2216              	.LBE183:
 2217              	.LBE182:
 254:src/Riscv.cpp ****             return;
 2218              		.loc 1 254 13 is_stmt 1
 2219 063c 6FF05FB3 		j	.L3
GAS LISTING /tmp/ccYCTr0w.s 			page 57


 2220              	.LVL132:
 2221              	.L60:
 2222              	.LBE175:
 2223              	.LBB184:
 2224              	.LBB167:
 256:src/Riscv.cpp ****             Riscv::mc_sstatus(Riscv::SSTATUS_SPP);
 2225              		.loc 1 256 13
 2226              	.LBB168:
 2227              	.LBB169:
 153:src/../h/Riscv.hpp **** }
 2228              		.loc 2 153 5
 153:src/../h/Riscv.hpp **** }
 2229              		.loc 2 153 65 is_stmt 0
 2230 0640 93070010 		li	a5,256
 2231              	.LVL133:
 2232              	#APP
 2233              	# 153 "src/../h/Riscv.hpp" 1
 2234              		csrc sstatus, a5
 2235              	# 0 "" 2
 2236              	.LVL134:
 2237              	#NO_APP
 2238              	.LBE169:
 2239              	.LBE168:
 257:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc();
 2240              		.loc 1 257 13 is_stmt 1
 2241              	.LBB170:
 2242              	.LBB171:
  83:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" :[sepc]"=r"(sepc));
 2243              		.loc 2 83 5
  84:src/../h/Riscv.hpp ****     return sepc;
 2244              		.loc 2 84 5
  84:src/../h/Riscv.hpp ****     return sepc;
 2245              		.loc 2 84 62 is_stmt 0
 2246              	#APP
 2247              	# 84 "src/../h/Riscv.hpp" 1
 2248              		csrr a5, sepc
 2249              	# 0 "" 2
 2250              	#NO_APP
 2251 064c 233CF4FA 		sd	a5,-72(s0)
  85:src/../h/Riscv.hpp **** }
 2252              		.loc 2 85 5 is_stmt 1
  85:src/../h/Riscv.hpp **** }
 2253              		.loc 2 85 12 is_stmt 0
 2254 0650 833784FB 		ld	a5,-72(s0)
 2255              	.LBE171:
 2256              	.LBE170:
 257:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc();
 2257              		.loc 1 257 43
 2258 0654 2334F4F4 		sd	a5,-184(s0)
 258:src/Riscv.cpp ****             w_sepc(sepc + 4);
 2259              		.loc 1 258 13 is_stmt 1
 258:src/Riscv.cpp ****             w_sepc(sepc + 4);
 2260              		.loc 1 258 20 is_stmt 0
 2261 0658 833784F4 		ld	a5,-184(s0)
 258:src/Riscv.cpp ****             w_sepc(sepc + 4);
 2262              		.loc 1 258 19
 2263 065c 93874700 		addi	a5,a5,4
GAS LISTING /tmp/ccYCTr0w.s 			page 58


 2264              	.LVL135:
 2265              	.LBB172:
 2266              	.LBB173:
  89:src/../h/Riscv.hpp **** }
 2267              		.loc 2 89 1 is_stmt 1
  89:src/../h/Riscv.hpp **** }
 2268              		.loc 2 89 60 is_stmt 0
 2269              	#APP
 2270              	# 89 "src/../h/Riscv.hpp" 1
 2271              		csrw sepc, a5
 2272              	# 0 "" 2
 2273              	.LVL136:
 2274              	#NO_APP
 2275              	.LBE173:
 2276              	.LBE172:
 259:src/Riscv.cpp ****             return;
 2277              		.loc 1 259 13 is_stmt 1
 2278 0664 6FF0DFB0 		j	.L3
 2279              	.L24:
 2280              	.LBE167:
 2281              	.LBE184:
 2282              	.LBE188:
 2283              	.LBE193:
 2284              	.LBE199:
 2285              	.LBE206:
 2286              	.LBE214:
 2287              	.LBE225:
 2288              	.LBE244:
 2289              	.LBE260:
 2290              	.LBE273:
 2291              	.LBE287:
 2292              	.LBE302:
 2293              	.LBE322:
 2294              	.LBE337:
 342:src/Riscv.cpp ****         kprintString("scause :");
 2295              		.loc 1 342 9
 342:src/Riscv.cpp ****         kprintString("scause :");
 2296              		.loc 1 342 21 is_stmt 0
 2297 0668 17050000 		lla	a0,.LC0
 2297      13050500 
 2298 0670 97000000 		call	_Z12kprintStringPKc@plt
 2298      E7800000 
 2299              	.LVL137:
 343:src/Riscv.cpp ****         kprintInteger(scause);
 2300              		.loc 1 343 9 is_stmt 1
 343:src/Riscv.cpp ****         kprintInteger(scause);
 2301              		.loc 1 343 22 is_stmt 0
 2302 0678 033584FC 		ld	a0,-56(s0)
 2303 067c 97000000 		call	_Z13kprintIntegerm@plt
 2303      E7800000 
 2304              	.LVL138:
 344:src/Riscv.cpp ****         kprintString("\n");
 2305              		.loc 1 344 9 is_stmt 1
 344:src/Riscv.cpp ****         kprintString("\n");
 2306              		.loc 1 344 21 is_stmt 0
 2307 0684 17050000 		lla	a0,.LC1
 2307      13050500 
GAS LISTING /tmp/ccYCTr0w.s 			page 59


 2308 068c 97000000 		call	_Z12kprintStringPKc@plt
 2308      E7800000 
 2309              	.LVL139:
 2310 0694 6FF05FAD 		j	.L6
 2311              	.LVL140:
 2312              	.L42:
 2313 0698 13090500 		mv	s2,a0
 2314              	.LVL141:
 2315              	.LBE514:
 2316              	.LBB515:
 2317              	.LBB501:
 2318              	.LBB483:
 2319              	.LBB469:
 2320              	.LBB456:
 2321              	.LBB444:
 2322              	.LBB429:
 2323              	.LBB411:
 108:src/Riscv.cpp ****             *handle = new SemaphoreBase(val);
 2324              		.loc 1 108 44
 2325 069c 13850400 		mv	a0,s1
 2326 06a0 97000000 		call	_ZdlPv@plt
 2326      E7800000 
 2327              	.LVL142:
 2328 06a8 13050900 		mv	a0,s2
 2329 06ac 97000000 		call	_Unwind_Resume@plt
 2329      E7800000 
 2330              	.LVL143:
 2331              	.L43:
 2332 06b4 13090500 		mv	s2,a0
 2333              	.LVL144:
 2334              	.LBE411:
 2335              	.LBE429:
 2336              	.LBE444:
 2337              	.LBE456:
 2338              	.LBE469:
 2339              	.LBE483:
 2340              	.LBE501:
 2341              	.LBE515:
 2342              	.LBB516:
 2343              	.LBB338:
 2344              	.LBB323:
 2345              	.LBB303:
 2346              	.LBB288:
 2347              	.LBB274:
 2348              	.LBB261:
 2349              	.LBB245:
 2350              	.LBB226:
 215:src/Riscv.cpp ****             *handle = new SemaphoreBase(val);
 2351              		.loc 1 215 44
 2352 06b8 13850400 		mv	a0,s1
 2353 06bc 97000000 		call	_ZdlPv@plt
 2353      E7800000 
 2354              	.LVL145:
 2355 06c4 13050900 		mv	a0,s2
 2356 06c8 97000000 		call	_Unwind_Resume@plt
 2356      E7800000 
 2357              	.LVL146:
GAS LISTING /tmp/ccYCTr0w.s 			page 60


 2358              	.LEHE4:
 2359              	.LBE226:
 2360              	.LBE245:
 2361              	.LBE261:
 2362              	.LBE274:
 2363              	.LBE288:
 2364              	.LBE303:
 2365              	.LBE323:
 2366              	.LBE338:
 2367              	.LBE516:
 2368              	.LBE543:
 2369              	.LBE588:
 2370              	.LBE617:
 2371              		.cfi_endproc
 2372              	.LFE42:
 2373              		.globl	__gxx_personality_v0
 2374              		.section	.gcc_except_table,"a",@progbits
 2375              	.LLSDA42:
 2376 0000 FF       		.byte	0xff
 2377 0001 FF       		.byte	0xff
 2378 0002 03       		.byte	0x3
 2379 0003 41       		.byte	0x41
 2380 0004 00000000 		.4byte	.LEHB0-.LFB42
 2381 0008 00000000 		.4byte	.LEHE0-.LEHB0
 2382 000c 00000000 		.4byte	0
 2383 0010 00       		.byte	0
 2384 0011 00000000 		.4byte	.LEHB1-.LFB42
 2385 0015 00000000 		.4byte	.LEHE1-.LEHB1
 2386 0019 00000000 		.4byte	.L42-.LFB42
 2387 001d 00       		.byte	0
 2388 001e 00000000 		.4byte	.LEHB2-.LFB42
 2389 0022 00000000 		.4byte	.LEHE2-.LEHB2
 2390 0026 00000000 		.4byte	0
 2391 002a 00       		.byte	0
 2392 002b 00000000 		.4byte	.LEHB3-.LFB42
 2393 002f 00000000 		.4byte	.LEHE3-.LEHB3
 2394 0033 00000000 		.4byte	.L43-.LFB42
 2395 0037 00       		.byte	0
 2396 0038 00000000 		.4byte	.LEHB4-.LFB42
 2397 003c 00000000 		.4byte	.LEHE4-.LEHB4
 2398 0040 00000000 		.4byte	0
 2399 0044 00       		.byte	0
 2400              		.text
 2402              	.Letext0:
 2403              		.file 5 "src/../h/../lib/hw.h"
 2404              		.file 6 "src/../h/MemoryAllocator.hpp"
 2405              		.file 7 "src/../h/SchedulerNode.hpp"
 2406              		.file 8 "src/../h/Scheduler.hpp"
 2407              		.file 9 "src/../h/SemaphoreNode.hpp"
 2408              		.file 10 "src/../h/kernel_functions.hpp"
 2409              		.file 11 "src/../lib/console.h"
 7537              		.align	3
 7540              	DW.ref.__gxx_personality_v0:
 7541 0000 00000000 		.dword	__gxx_personality_v0
 7541      00000000 
 7542              		.ident	"GCC: (Ubuntu 9.4.0-1ubuntu1~20.04) 9.4.0"
 7543              		.section	.note.GNU-stack,"",@progbits
GAS LISTING /tmp/ccYCTr0w.s 			page 61


GAS LISTING /tmp/ccYCTr0w.s 			page 62


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/ccYCTr0w.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccYCTr0w.s:13     .text:0000000000000000 .L0 
     /tmp/ccYCTr0w.s:14     .text:0000000000000000 .L0 
     /tmp/ccYCTr0w.s:15     .text:0000000000000004 .L0 
     /tmp/ccYCTr0w.s:17     .text:0000000000000008 .L0 
     /tmp/ccYCTr0w.s:19     .text:000000000000000c .L0 
     /tmp/ccYCTr0w.s:21     .text:000000000000000c .L0 
       src/Riscv.cpp:15     .text:000000000000000c .L0 
     /tmp/ccYCTr0w.s:27     .text:0000000000000010 .L0 
       src/Riscv.cpp:16     .text:0000000000000010 .L0 
     /tmp/ccYCTr0w.s:33     .text:0000000000000014 .L0 
     /tmp/ccYCTr0w.s:34     .text:0000000000000018 .L0 
     /tmp/ccYCTr0w.s:35     .text:0000000000000018 .L0 
     /tmp/ccYCTr0w.s:37     .text:000000000000001c .L0 
     /tmp/ccYCTr0w.s:39     .text:0000000000000020 .L0 
     /tmp/ccYCTr0w.s:53     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccYCTr0w.s:56     .text:0000000000000020 .L0 
     /tmp/ccYCTr0w.s:7540   .data.rel.local.DW.ref.__gxx_personality_v0:0000000000000000 DW.ref.__gxx_personality_v0
     /tmp/ccYCTr0w.s:59     .text:0000000000000020 .L0 
     /tmp/ccYCTr0w.s:60     .text:0000000000000024 .L0 
     /tmp/ccYCTr0w.s:66     .text:0000000000000038 .L0 
     /tmp/ccYCTr0w.s:67     .text:0000000000000038 .L0 
     /tmp/ccYCTr0w.s:68     .text:0000000000000038 .L0 
     /tmp/ccYCTr0w.s:69     .text:0000000000000038 .L0 
     /tmp/ccYCTr0w.s:70     .text:0000000000000038 .L0 
     /tmp/ccYCTr0w.s:72     .text:000000000000003c .L0 
     /tmp/ccYCTr0w.s:74     .text:000000000000003c .L0 
       src/Riscv.cpp:21     .text:000000000000003c .L0 
     /tmp/ccYCTr0w.s:80     .text:0000000000000040 .L0 
       src/Riscv.cpp:22     .text:0000000000000040 .L0 
     /tmp/ccYCTr0w.s:85     .text:0000000000000044 .L0 
       src/Riscv.cpp:23     .text:0000000000000044 .L0 
     /tmp/ccYCTr0w.s:90     .text:0000000000000048 .L0 
       src/Riscv.cpp:24     .text:0000000000000048 .L0 
     /tmp/ccYCTr0w.s:95     .text:000000000000004c .L0 
       src/Riscv.cpp:25     .text:000000000000004c .L0 
     /tmp/ccYCTr0w.s:104    .text:0000000000000050 .L0 
     /tmp/ccYCTr0w.s:105    .text:0000000000000050 .L0 
     /tmp/ccYCTr0w.s:106    .text:0000000000000050 .L0 
  src/../h/Riscv.hpp:74     .text:0000000000000050 .L0 
     /tmp/ccYCTr0w.s:114    .text:0000000000000058 .L0 
     /tmp/ccYCTr0w.s:115    .text:0000000000000058 .L0 
     /tmp/ccYCTr0w.s:119    .text:000000000000005c .L0 
     /tmp/ccYCTr0w.s:122    .text:0000000000000060 .L0 
     /tmp/ccYCTr0w.s:123    .text:0000000000000060 .L0 
     /tmp/ccYCTr0w.s:125    .text:0000000000000064 .L0 
     /tmp/ccYCTr0w.s:133    .text:0000000000000074 .L0 
     /tmp/ccYCTr0w.s:134    .text:0000000000000074 .L0 
     /tmp/ccYCTr0w.s:136    .text:0000000000000078 .L0 
     /tmp/ccYCTr0w.s:146    .text:0000000000000088 .L0 
     /tmp/ccYCTr0w.s:147    .text:0000000000000088 .L0 
     /tmp/ccYCTr0w.s:149    .text:000000000000008c .L0 
     /tmp/ccYCTr0w.s:159    .text:0000000000000094 .L0 
     /tmp/ccYCTr0w.s:160    .text:0000000000000094 .L0 
     /tmp/ccYCTr0w.s:162    .text:0000000000000098 .L0 
GAS LISTING /tmp/ccYCTr0w.s 			page 63


     /tmp/ccYCTr0w.s:166    .text:00000000000000a0 .L0 
     /tmp/ccYCTr0w.s:167    .text:00000000000000a0 .L0 
       src/Riscv.cpp:163    .text:00000000000000a0 .L0 
     /tmp/ccYCTr0w.s:177    .text:00000000000000a8 .L0 
     /tmp/ccYCTr0w.s:193    .text:00000000000000b0 .L0 
     /tmp/ccYCTr0w.s:211    .text:00000000000000b8 .L0 
     /tmp/ccYCTr0w.s:231    .text:00000000000000c0 .L0 
     /tmp/ccYCTr0w.s:253    .text:00000000000000c8 .L0 
     /tmp/ccYCTr0w.s:277    .text:00000000000000d0 .L0 
     /tmp/ccYCTr0w.s:303    .text:00000000000000d8 .L0 
     /tmp/ccYCTr0w.s:331    .text:00000000000000e0 .L0 
     /tmp/ccYCTr0w.s:361    .text:00000000000000e8 .L0 
     /tmp/ccYCTr0w.s:393    .text:00000000000000f0 .L0 
     /tmp/ccYCTr0w.s:427    .text:00000000000000f8 .L0 
     /tmp/ccYCTr0w.s:463    .text:0000000000000100 .L0 
     /tmp/ccYCTr0w.s:501    .text:0000000000000108 .L0 
     /tmp/ccYCTr0w.s:541    .text:0000000000000110 .L0 
     /tmp/ccYCTr0w.s:548    .text:0000000000000118 .L0 
     /tmp/ccYCTr0w.s:549    .text:0000000000000118 .L0 
     /tmp/ccYCTr0w.s:550    .text:0000000000000118 .L0 
     /tmp/ccYCTr0w.s:561    .text:0000000000000120 .L0 
     /tmp/ccYCTr0w.s:562    .text:0000000000000120 .L0 
       src/Riscv.cpp:263    .text:0000000000000120 .L0 
     /tmp/ccYCTr0w.s:570    .text:0000000000000128 .L0 
     /tmp/ccYCTr0w.s:571    .text:0000000000000128 .L0 
     /tmp/ccYCTr0w.s:573    .text:000000000000012c .L0 
     /tmp/ccYCTr0w.s:578    .text:0000000000000130 .L0 
  src/../h/Riscv.hpp:89     .text:0000000000000130 .L0 
     /tmp/ccYCTr0w.s:588    .text:0000000000000134 .L0 
     /tmp/ccYCTr0w.s:611    .text:0000000000000138 .L0 
     /tmp/ccYCTr0w.s:612    .text:0000000000000138 .L0 
     /tmp/ccYCTr0w.s:618    .text:000000000000014c .L0 
     /tmp/ccYCTr0w.s:619    .text:000000000000014c .L0 
     /tmp/ccYCTr0w.s:626    .text:0000000000000158 .L0 
     /tmp/ccYCTr0w.s:627    .text:0000000000000158 .L0 
     /tmp/ccYCTr0w.s:632    .text:000000000000015c .L0 
     /tmp/ccYCTr0w.s:639    .text:0000000000000160 .L0 
     /tmp/ccYCTr0w.s:640    .text:0000000000000160 .L0 
     /tmp/ccYCTr0w.s:641    .text:0000000000000160 .L0 
     /tmp/ccYCTr0w.s:655    .text:0000000000000168 .L0 
     /tmp/ccYCTr0w.s:656    .text:0000000000000168 .L0 
     /tmp/ccYCTr0w.s:660    .text:0000000000000170 .L0 
     /tmp/ccYCTr0w.s:661    .text:0000000000000174 .L0 
     /tmp/ccYCTr0w.s:662    .text:0000000000000174 .L0 
     /tmp/ccYCTr0w.s:664    .text:0000000000000178 .L0 
     /tmp/ccYCTr0w.s:665    .text:0000000000000178 .L0 
     /tmp/ccYCTr0w.s:667    .text:000000000000017c .L0 
     /tmp/ccYCTr0w.s:669    .text:0000000000000180 .L0 
     /tmp/ccYCTr0w.s:671    .text:0000000000000184 .L0 
     /tmp/ccYCTr0w.s:673    .text:0000000000000188 .L0 
     /tmp/ccYCTr0w.s:676    .text:000000000000018c .L0 
     /tmp/ccYCTr0w.s:684    .text:000000000000018c .L0 
     /tmp/ccYCTr0w.s:685    .text:000000000000018c .L0 
     /tmp/ccYCTr0w.s:686    .text:000000000000018c .L0 
  src/../h/Riscv.hpp:84     .text:000000000000018c .L0 
     /tmp/ccYCTr0w.s:694    .text:0000000000000194 .L0 
     /tmp/ccYCTr0w.s:695    .text:0000000000000194 .L0 
GAS LISTING /tmp/ccYCTr0w.s 			page 64


     /tmp/ccYCTr0w.s:699    .text:0000000000000198 .L0 
     /tmp/ccYCTr0w.s:703    .text:000000000000019c .L0 
     /tmp/ccYCTr0w.s:704    .text:000000000000019c .L0 
     /tmp/ccYCTr0w.s:705    .text:000000000000019c .L0 
  src/../h/Riscv.hpp:158    .text:000000000000019c .L0 
     /tmp/ccYCTr0w.s:713    .text:00000000000001a4 .L0 
     /tmp/ccYCTr0w.s:714    .text:00000000000001a4 .L0 
     /tmp/ccYCTr0w.s:718    .text:00000000000001a8 .L0 
     /tmp/ccYCTr0w.s:720    .text:00000000000001ac .L0 
     /tmp/ccYCTr0w.s:721    .text:00000000000001ac .L0 
     /tmp/ccYCTr0w.s:724    .text:00000000000001b8 .L0 
     /tmp/ccYCTr0w.s:725    .text:00000000000001b8 .L0 
     /tmp/ccYCTr0w.s:728    .text:00000000000001c0 .L0 
     /tmp/ccYCTr0w.s:729    .text:00000000000001c0 .L0 
     /tmp/ccYCTr0w.s:734    .text:00000000000001c4 .L0 
  src/../h/Riscv.hpp:163    .text:00000000000001c4 .L0 
     /tmp/ccYCTr0w.s:744    .text:00000000000001c8 .L0 
     /tmp/ccYCTr0w.s:745    .text:00000000000001c8 .L0 
     /tmp/ccYCTr0w.s:750    .text:00000000000001cc .L0 
  src/../h/Riscv.hpp:89     .text:00000000000001cc .L0 
     /tmp/ccYCTr0w.s:757    .text:00000000000001d0 .L0 
     /tmp/ccYCTr0w.s:767    .text:00000000000001d4 .L0 
     /tmp/ccYCTr0w.s:768    .text:00000000000001d4 .L0 
     /tmp/ccYCTr0w.s:775    .text:00000000000001e0 .L0 
     /tmp/ccYCTr0w.s:776    .text:00000000000001e0 .L0 
       src/Riscv.cpp:59     .text:00000000000001e0 .L0 
     /tmp/ccYCTr0w.s:786    .text:00000000000001e8 .L0 
     /tmp/ccYCTr0w.s:800    .text:00000000000001f0 .L0 
     /tmp/ccYCTr0w.s:816    .text:00000000000001f8 .L0 
     /tmp/ccYCTr0w.s:834    .text:0000000000000200 .L0 
     /tmp/ccYCTr0w.s:854    .text:0000000000000208 .L0 
     /tmp/ccYCTr0w.s:876    .text:0000000000000210 .L0 
     /tmp/ccYCTr0w.s:900    .text:0000000000000218 .L0 
     /tmp/ccYCTr0w.s:926    .text:0000000000000220 .L0 
     /tmp/ccYCTr0w.s:954    .text:0000000000000228 .L0 
     /tmp/ccYCTr0w.s:984    .text:0000000000000230 .L0 
     /tmp/ccYCTr0w.s:1016   .text:0000000000000238 .L0 
     /tmp/ccYCTr0w.s:1050   .text:0000000000000240 .L0 
     /tmp/ccYCTr0w.s:1086   .text:0000000000000248 .L0 
     /tmp/ccYCTr0w.s:1092   .text:0000000000000250 .L0 
     /tmp/ccYCTr0w.s:1093   .text:0000000000000250 .L0 
     /tmp/ccYCTr0w.s:1094   .text:0000000000000250 .L0 
  src/../h/Riscv.hpp:84     .text:0000000000000250 .L0 
     /tmp/ccYCTr0w.s:1103   .text:0000000000000258 .L0 
     /tmp/ccYCTr0w.s:1104   .text:0000000000000258 .L0 
     /tmp/ccYCTr0w.s:1108   .text:000000000000025c .L0 
     /tmp/ccYCTr0w.s:1110   .text:0000000000000260 .L0 
     /tmp/ccYCTr0w.s:1111   .text:0000000000000260 .L0 
     /tmp/ccYCTr0w.s:1113   .text:0000000000000264 .L0 
     /tmp/ccYCTr0w.s:1118   .text:0000000000000268 .L0 
  src/../h/Riscv.hpp:89     .text:0000000000000268 .L0 
     /tmp/ccYCTr0w.s:1128   .text:000000000000026c .L0 
     /tmp/ccYCTr0w.s:1146   .text:0000000000000270 .L0 
     /tmp/ccYCTr0w.s:1147   .text:0000000000000270 .L0 
       src/Riscv.cpp:62     .text:0000000000000270 .L0 
     /tmp/ccYCTr0w.s:1154   .text:0000000000000274 .L0 
     /tmp/ccYCTr0w.s:1156   .text:0000000000000274 .L0 
GAS LISTING /tmp/ccYCTr0w.s 			page 65


     /tmp/ccYCTr0w.s:1159   .text:000000000000027c .L0 
       src/Riscv.cpp:64     .text:000000000000027c .L0 
     /tmp/ccYCTr0w.s:1170   .text:0000000000000280 .L0 
       src/Riscv.cpp:154    .text:0000000000000280 .L0 
     /tmp/ccYCTr0w.s:1176   .text:0000000000000284 .L0 
       src/Riscv.cpp:155    .text:0000000000000284 .L0 
     /tmp/ccYCTr0w.s:1184   .text:0000000000000288 .L0 
     /tmp/ccYCTr0w.s:1185   .text:0000000000000288 .L0 
     /tmp/ccYCTr0w.s:1186   .text:0000000000000288 .L0 
  src/../h/Riscv.hpp:84     .text:0000000000000288 .L0 
     /tmp/ccYCTr0w.s:1194   .text:0000000000000290 .L0 
     /tmp/ccYCTr0w.s:1195   .text:0000000000000290 .L0 
     /tmp/ccYCTr0w.s:1199   .text:0000000000000294 .L0 
     /tmp/ccYCTr0w.s:1201   .text:0000000000000298 .L0 
     /tmp/ccYCTr0w.s:1202   .text:0000000000000298 .L0 
     /tmp/ccYCTr0w.s:1204   .text:000000000000029c .L0 
     /tmp/ccYCTr0w.s:1209   .text:00000000000002a0 .L0 
  src/../h/Riscv.hpp:89     .text:00000000000002a0 .L0 
     /tmp/ccYCTr0w.s:1216   .text:00000000000002a4 .L0 
     /tmp/ccYCTr0w.s:1225   .text:00000000000002a8 .L0 
     /tmp/ccYCTr0w.s:1226   .text:00000000000002a8 .L0 
       src/Riscv.cpp:67     .text:00000000000002a8 .L0 
     /tmp/ccYCTr0w.s:1233   .text:00000000000002ac .L0 
     /tmp/ccYCTr0w.s:1235   .text:00000000000002ac .L0 
     /tmp/ccYCTr0w.s:1238   .text:00000000000002b4 .L0 
       src/Riscv.cpp:69     .text:00000000000002b4 .L0 
     /tmp/ccYCTr0w.s:1251   .text:00000000000002bc .L0 
     /tmp/ccYCTr0w.s:1252   .text:00000000000002bc .L0 
     /tmp/ccYCTr0w.s:1253   .text:00000000000002bc .L0 
     /tmp/ccYCTr0w.s:1254   .text:00000000000002bc .L0 
     /tmp/ccYCTr0w.s:1255   .text:00000000000002bc .L0 
       src/Riscv.cpp:75     .text:00000000000002bc .L0 
     /tmp/ccYCTr0w.s:1262   .text:00000000000002c0 .L0 
       src/Riscv.cpp:76     .text:00000000000002c0 .L0 
     /tmp/ccYCTr0w.s:1268   .text:00000000000002c4 .L0 
       src/Riscv.cpp:77     .text:00000000000002c4 .L0 
     /tmp/ccYCTr0w.s:1274   .text:00000000000002c8 .L0 
       src/Riscv.cpp:78     .text:00000000000002c8 .L0 
     /tmp/ccYCTr0w.s:1280   .text:00000000000002cc .L0 
     /tmp/ccYCTr0w.s:1282   .text:00000000000002cc .L0 
     /tmp/ccYCTr0w.s:1285   .text:00000000000002d4 .L0 
     /tmp/ccYCTr0w.s:1293   .text:00000000000002dc .L0 
     /tmp/ccYCTr0w.s:1294   .text:00000000000002dc .L0 
     /tmp/ccYCTr0w.s:1300   .text:00000000000002e8 .L0 
     /tmp/ccYCTr0w.s:1303   .text:00000000000002f0 .L0 
       src/Riscv.cpp:84     .text:00000000000002f0 .L0 
     /tmp/ccYCTr0w.s:1313   .text:00000000000002f8 .L0 
     /tmp/ccYCTr0w.s:1314   .text:00000000000002f8 .L0 
     /tmp/ccYCTr0w.s:1320   .text:0000000000000304 .L0 
     /tmp/ccYCTr0w.s:1321   .text:0000000000000304 .L0 
     /tmp/ccYCTr0w.s:1327   .text:000000000000030c .L0 
     /tmp/ccYCTr0w.s:1328   .text:000000000000030c .L0 
     /tmp/ccYCTr0w.s:1329   .text:000000000000030c .L0 
     /tmp/ccYCTr0w.s:1330   .text:000000000000030c .L0 
     /tmp/ccYCTr0w.s:1333   .text:0000000000000314 .L0 
     /tmp/ccYCTr0w.s:1335   .text:0000000000000318 .L0 
     /tmp/ccYCTr0w.s:1337   .text:000000000000031c .L0 
GAS LISTING /tmp/ccYCTr0w.s 			page 66


     /tmp/ccYCTr0w.s:1338   .text:000000000000031c .L0 
     /tmp/ccYCTr0w.s:1353   .text:0000000000000330 .L0 
     /tmp/ccYCTr0w.s:1354   .text:0000000000000330 .L0 
     /tmp/ccYCTr0w.s:1355   .text:0000000000000330 .L0 
  src/../h/Riscv.hpp:84     .text:0000000000000330 .L0 
     /tmp/ccYCTr0w.s:1364   .text:0000000000000338 .L0 
     /tmp/ccYCTr0w.s:1365   .text:0000000000000338 .L0 
     /tmp/ccYCTr0w.s:1369   .text:000000000000033c .L0 
     /tmp/ccYCTr0w.s:1371   .text:0000000000000340 .L0 
     /tmp/ccYCTr0w.s:1375   .text:0000000000000344 .L0 
     /tmp/ccYCTr0w.s:1376   .text:0000000000000344 .L0 
     /tmp/ccYCTr0w.s:1377   .text:0000000000000344 .L0 
  src/../h/Riscv.hpp:158    .text:0000000000000344 .L0 
     /tmp/ccYCTr0w.s:1385   .text:000000000000034c .L0 
     /tmp/ccYCTr0w.s:1386   .text:000000000000034c .L0 
     /tmp/ccYCTr0w.s:1390   .text:0000000000000350 .L0 
     /tmp/ccYCTr0w.s:1392   .text:0000000000000354 .L0 
     /tmp/ccYCTr0w.s:1393   .text:0000000000000354 .L0 
     /tmp/ccYCTr0w.s:1396   .text:0000000000000360 .L0 
     /tmp/ccYCTr0w.s:1397   .text:0000000000000360 .L0 
     /tmp/ccYCTr0w.s:1400   .text:0000000000000368 .L0 
     /tmp/ccYCTr0w.s:1401   .text:0000000000000368 .L0 
     /tmp/ccYCTr0w.s:1406   .text:000000000000036c .L0 
  src/../h/Riscv.hpp:163    .text:000000000000036c .L0 
     /tmp/ccYCTr0w.s:1416   .text:0000000000000370 .L0 
     /tmp/ccYCTr0w.s:1417   .text:0000000000000370 .L0 
     /tmp/ccYCTr0w.s:1422   .text:0000000000000374 .L0 
  src/../h/Riscv.hpp:89     .text:0000000000000374 .L0 
     /tmp/ccYCTr0w.s:1432   .text:0000000000000378 .L0 
     /tmp/ccYCTr0w.s:1439   .text:000000000000037c .L0 
     /tmp/ccYCTr0w.s:1440   .text:000000000000037c .L0 
     /tmp/ccYCTr0w.s:1441   .text:000000000000037c .L0 
       src/Riscv.cpp:105    .text:000000000000037c .L0 
     /tmp/ccYCTr0w.s:1448   .text:0000000000000380 .L0 
       src/Riscv.cpp:106    .text:0000000000000380 .L0 
     /tmp/ccYCTr0w.s:1458   .text:0000000000000384 .L0 
     /tmp/ccYCTr0w.s:1459   .text:0000000000000384 .L0 
     /tmp/ccYCTr0w.s:1460   .text:0000000000000384 .L0 
     /tmp/ccYCTr0w.s:1469   .text:0000000000000394 .L0 
     /tmp/ccYCTr0w.s:1470   .text:0000000000000394 .L0 
     /tmp/ccYCTr0w.s:1476   .text:00000000000003a0 .L0 
     /tmp/ccYCTr0w.s:1484   .text:00000000000003a8 .L0 
     /tmp/ccYCTr0w.s:1485   .text:00000000000003a8 .L0 
       src/Riscv.cpp:111    .text:00000000000003a8 .L0 
     /tmp/ccYCTr0w.s:1493   .text:00000000000003ac .L0 
     /tmp/ccYCTr0w.s:1495   .text:00000000000003ac .L0 
     /tmp/ccYCTr0w.s:1498   .text:00000000000003b4 .L0 
       src/Riscv.cpp:113    .text:00000000000003b4 .L0 
     /tmp/ccYCTr0w.s:1511   .text:00000000000003bc .L0 
     /tmp/ccYCTr0w.s:1512   .text:00000000000003bc .L0 
       src/Riscv.cpp:116    .text:00000000000003bc .L0 
     /tmp/ccYCTr0w.s:1519   .text:00000000000003c0 .L0 
     /tmp/ccYCTr0w.s:1521   .text:00000000000003c0 .L0 
     /tmp/ccYCTr0w.s:1524   .text:00000000000003c8 .L0 
       src/Riscv.cpp:118    .text:00000000000003c8 .L0 
     /tmp/ccYCTr0w.s:1537   .text:00000000000003d0 .L0 
     /tmp/ccYCTr0w.s:1538   .text:00000000000003d0 .L0 
GAS LISTING /tmp/ccYCTr0w.s 			page 67


       src/Riscv.cpp:121    .text:00000000000003d0 .L0 
     /tmp/ccYCTr0w.s:1545   .text:00000000000003d4 .L0 
     /tmp/ccYCTr0w.s:1547   .text:00000000000003d4 .L0 
     /tmp/ccYCTr0w.s:1550   .text:00000000000003dc .L0 
       src/Riscv.cpp:123    .text:00000000000003dc .L0 
     /tmp/ccYCTr0w.s:1563   .text:00000000000003e4 .L0 
     /tmp/ccYCTr0w.s:1564   .text:00000000000003e4 .L0 
     /tmp/ccYCTr0w.s:1567   .text:00000000000003ec .L0 
       src/Riscv.cpp:128    .text:00000000000003ec .L0 
     /tmp/ccYCTr0w.s:1573   .text:00000000000003f0 .L0 
     /tmp/ccYCTr0w.s:1575   .text:00000000000003f0 .L0 
     /tmp/ccYCTr0w.s:1584   .text:00000000000003fc .L0 
     /tmp/ccYCTr0w.s:1585   .text:00000000000003fc .L0 
       src/Riscv.cpp:132    .text:00000000000003fc .L0 
     /tmp/ccYCTr0w.s:1592   .text:0000000000000400 .L0 
     /tmp/ccYCTr0w.s:1594   .text:0000000000000400 .L0 
     /tmp/ccYCTr0w.s:1606   .text:0000000000000410 .L0 
     /tmp/ccYCTr0w.s:1607   .text:0000000000000410 .L0 
     /tmp/ccYCTr0w.s:1608   .text:0000000000000410 .L0 
     /tmp/ccYCTr0w.s:1619   .text:0000000000000418 .L0 
     /tmp/ccYCTr0w.s:1620   .text:0000000000000418 .L0 
       src/Riscv.cpp:138    .text:0000000000000418 .L0 
     /tmp/ccYCTr0w.s:1628   .text:0000000000000420 .L0 
     /tmp/ccYCTr0w.s:1629   .text:0000000000000420 .L0 
     /tmp/ccYCTr0w.s:1631   .text:0000000000000424 .L0 
     /tmp/ccYCTr0w.s:1636   .text:0000000000000428 .L0 
  src/../h/Riscv.hpp:89     .text:0000000000000428 .L0 
     /tmp/ccYCTr0w.s:1646   .text:000000000000042c .L0 
     /tmp/ccYCTr0w.s:1668   .text:0000000000000430 .L0 
     /tmp/ccYCTr0w.s:1669   .text:0000000000000430 .L0 
       src/Riscv.cpp:166    .text:0000000000000430 .L0 
     /tmp/ccYCTr0w.s:1676   .text:0000000000000434 .L0 
     /tmp/ccYCTr0w.s:1678   .text:0000000000000434 .L0 
     /tmp/ccYCTr0w.s:1681   .text:000000000000043c .L0 
       src/Riscv.cpp:168    .text:000000000000043c .L0 
     /tmp/ccYCTr0w.s:1692   .text:0000000000000440 .L0 
       src/Riscv.cpp:275    .text:0000000000000440 .L0 
     /tmp/ccYCTr0w.s:1698   .text:0000000000000444 .L0 
       src/Riscv.cpp:276    .text:0000000000000444 .L0 
     /tmp/ccYCTr0w.s:1706   .text:0000000000000448 .L0 
     /tmp/ccYCTr0w.s:1707   .text:0000000000000448 .L0 
     /tmp/ccYCTr0w.s:1708   .text:0000000000000448 .L0 
  src/../h/Riscv.hpp:84     .text:0000000000000448 .L0 
     /tmp/ccYCTr0w.s:1716   .text:0000000000000450 .L0 
     /tmp/ccYCTr0w.s:1717   .text:0000000000000450 .L0 
     /tmp/ccYCTr0w.s:1721   .text:0000000000000454 .L0 
     /tmp/ccYCTr0w.s:1723   .text:0000000000000458 .L0 
     /tmp/ccYCTr0w.s:1724   .text:0000000000000458 .L0 
     /tmp/ccYCTr0w.s:1726   .text:000000000000045c .L0 
     /tmp/ccYCTr0w.s:1731   .text:0000000000000460 .L0 
  src/../h/Riscv.hpp:89     .text:0000000000000460 .L0 
     /tmp/ccYCTr0w.s:1738   .text:0000000000000464 .L0 
     /tmp/ccYCTr0w.s:1747   .text:0000000000000468 .L0 
     /tmp/ccYCTr0w.s:1748   .text:0000000000000468 .L0 
       src/Riscv.cpp:172    .text:0000000000000468 .L0 
     /tmp/ccYCTr0w.s:1755   .text:000000000000046c .L0 
     /tmp/ccYCTr0w.s:1757   .text:000000000000046c .L0 
GAS LISTING /tmp/ccYCTr0w.s 			page 68


     /tmp/ccYCTr0w.s:1760   .text:0000000000000474 .L0 
       src/Riscv.cpp:174    .text:0000000000000474 .L0 
     /tmp/ccYCTr0w.s:1773   .text:000000000000047c .L0 
     /tmp/ccYCTr0w.s:1774   .text:000000000000047c .L0 
     /tmp/ccYCTr0w.s:1775   .text:000000000000047c .L0 
     /tmp/ccYCTr0w.s:1776   .text:000000000000047c .L0 
     /tmp/ccYCTr0w.s:1777   .text:000000000000047c .L0 
       src/Riscv.cpp:181    .text:000000000000047c .L0 
     /tmp/ccYCTr0w.s:1784   .text:0000000000000480 .L0 
       src/Riscv.cpp:182    .text:0000000000000480 .L0 
     /tmp/ccYCTr0w.s:1790   .text:0000000000000484 .L0 
       src/Riscv.cpp:183    .text:0000000000000484 .L0 
     /tmp/ccYCTr0w.s:1796   .text:0000000000000488 .L0 
       src/Riscv.cpp:184    .text:0000000000000488 .L0 
     /tmp/ccYCTr0w.s:1802   .text:000000000000048c .L0 
     /tmp/ccYCTr0w.s:1804   .text:000000000000048c .L0 
     /tmp/ccYCTr0w.s:1807   .text:0000000000000494 .L0 
     /tmp/ccYCTr0w.s:1815   .text:000000000000049c .L0 
     /tmp/ccYCTr0w.s:1816   .text:000000000000049c .L0 
     /tmp/ccYCTr0w.s:1822   .text:00000000000004a8 .L0 
     /tmp/ccYCTr0w.s:1825   .text:00000000000004b0 .L0 
       src/Riscv.cpp:190    .text:00000000000004b0 .L0 
     /tmp/ccYCTr0w.s:1835   .text:00000000000004b8 .L0 
     /tmp/ccYCTr0w.s:1836   .text:00000000000004b8 .L0 
     /tmp/ccYCTr0w.s:1842   .text:00000000000004c4 .L0 
     /tmp/ccYCTr0w.s:1843   .text:00000000000004c4 .L0 
     /tmp/ccYCTr0w.s:1849   .text:00000000000004cc .L0 
     /tmp/ccYCTr0w.s:1850   .text:00000000000004cc .L0 
     /tmp/ccYCTr0w.s:1851   .text:00000000000004cc .L0 
     /tmp/ccYCTr0w.s:1852   .text:00000000000004cc .L0 
     /tmp/ccYCTr0w.s:1855   .text:00000000000004d4 .L0 
     /tmp/ccYCTr0w.s:1857   .text:00000000000004d8 .L0 
     /tmp/ccYCTr0w.s:1859   .text:00000000000004dc .L0 
     /tmp/ccYCTr0w.s:1860   .text:00000000000004dc .L0 
     /tmp/ccYCTr0w.s:1875   .text:00000000000004f0 .L0 
     /tmp/ccYCTr0w.s:1876   .text:00000000000004f0 .L0 
     /tmp/ccYCTr0w.s:1877   .text:00000000000004f0 .L0 
  src/../h/Riscv.hpp:84     .text:00000000000004f0 .L0 
     /tmp/ccYCTr0w.s:1886   .text:00000000000004f8 .L0 
     /tmp/ccYCTr0w.s:1887   .text:00000000000004f8 .L0 
     /tmp/ccYCTr0w.s:1891   .text:00000000000004fc .L0 
     /tmp/ccYCTr0w.s:1893   .text:0000000000000500 .L0 
     /tmp/ccYCTr0w.s:1897   .text:0000000000000504 .L0 
     /tmp/ccYCTr0w.s:1898   .text:0000000000000504 .L0 
     /tmp/ccYCTr0w.s:1899   .text:0000000000000504 .L0 
  src/../h/Riscv.hpp:158    .text:0000000000000504 .L0 
     /tmp/ccYCTr0w.s:1907   .text:000000000000050c .L0 
     /tmp/ccYCTr0w.s:1908   .text:000000000000050c .L0 
     /tmp/ccYCTr0w.s:1912   .text:0000000000000510 .L0 
     /tmp/ccYCTr0w.s:1914   .text:0000000000000514 .L0 
     /tmp/ccYCTr0w.s:1915   .text:0000000000000514 .L0 
     /tmp/ccYCTr0w.s:1918   .text:0000000000000520 .L0 
     /tmp/ccYCTr0w.s:1919   .text:0000000000000520 .L0 
     /tmp/ccYCTr0w.s:1922   .text:0000000000000528 .L0 
     /tmp/ccYCTr0w.s:1923   .text:0000000000000528 .L0 
     /tmp/ccYCTr0w.s:1928   .text:000000000000052c .L0 
  src/../h/Riscv.hpp:163    .text:000000000000052c .L0 
GAS LISTING /tmp/ccYCTr0w.s 			page 69


     /tmp/ccYCTr0w.s:1938   .text:0000000000000530 .L0 
     /tmp/ccYCTr0w.s:1939   .text:0000000000000530 .L0 
     /tmp/ccYCTr0w.s:1944   .text:0000000000000534 .L0 
  src/../h/Riscv.hpp:89     .text:0000000000000534 .L0 
     /tmp/ccYCTr0w.s:1954   .text:0000000000000538 .L0 
     /tmp/ccYCTr0w.s:1961   .text:000000000000053c .L0 
     /tmp/ccYCTr0w.s:1962   .text:000000000000053c .L0 
     /tmp/ccYCTr0w.s:1963   .text:000000000000053c .L0 
       src/Riscv.cpp:211    .text:000000000000053c .L0 
     /tmp/ccYCTr0w.s:1970   .text:0000000000000540 .L0 
       src/Riscv.cpp:212    .text:0000000000000540 .L0 
     /tmp/ccYCTr0w.s:1979   .text:0000000000000544 .L0 
     /tmp/ccYCTr0w.s:1980   .text:0000000000000544 .L0 
     /tmp/ccYCTr0w.s:1981   .text:0000000000000544 .L0 
     /tmp/ccYCTr0w.s:1990   .text:0000000000000554 .L0 
     /tmp/ccYCTr0w.s:1991   .text:0000000000000554 .L0 
     /tmp/ccYCTr0w.s:1997   .text:0000000000000560 .L0 
     /tmp/ccYCTr0w.s:2005   .text:0000000000000568 .L0 
     /tmp/ccYCTr0w.s:2006   .text:0000000000000568 .L0 
       src/Riscv.cpp:218    .text:0000000000000568 .L0 
     /tmp/ccYCTr0w.s:2014   .text:000000000000056c .L0 
     /tmp/ccYCTr0w.s:2016   .text:000000000000056c .L0 
     /tmp/ccYCTr0w.s:2019   .text:0000000000000574 .L0 
       src/Riscv.cpp:220    .text:0000000000000574 .L0 
     /tmp/ccYCTr0w.s:2032   .text:000000000000057c .L0 
     /tmp/ccYCTr0w.s:2033   .text:000000000000057c .L0 
       src/Riscv.cpp:223    .text:000000000000057c .L0 
     /tmp/ccYCTr0w.s:2040   .text:0000000000000580 .L0 
     /tmp/ccYCTr0w.s:2042   .text:0000000000000580 .L0 
     /tmp/ccYCTr0w.s:2045   .text:0000000000000588 .L0 
       src/Riscv.cpp:225    .text:0000000000000588 .L0 
     /tmp/ccYCTr0w.s:2058   .text:0000000000000590 .L0 
     /tmp/ccYCTr0w.s:2059   .text:0000000000000590 .L0 
       src/Riscv.cpp:228    .text:0000000000000590 .L0 
     /tmp/ccYCTr0w.s:2066   .text:0000000000000594 .L0 
     /tmp/ccYCTr0w.s:2068   .text:0000000000000594 .L0 
     /tmp/ccYCTr0w.s:2071   .text:000000000000059c .L0 
       src/Riscv.cpp:230    .text:000000000000059c .L0 
     /tmp/ccYCTr0w.s:2084   .text:00000000000005a4 .L0 
     /tmp/ccYCTr0w.s:2085   .text:00000000000005a4 .L0 
     /tmp/ccYCTr0w.s:2088   .text:00000000000005ac .L0 
       src/Riscv.cpp:236    .text:00000000000005ac .L0 
     /tmp/ccYCTr0w.s:2101   .text:00000000000005b4 .L0 
     /tmp/ccYCTr0w.s:2102   .text:00000000000005b4 .L0 
       src/Riscv.cpp:239    .text:00000000000005b4 .L0 
     /tmp/ccYCTr0w.s:2109   .text:00000000000005b8 .L0 
     /tmp/ccYCTr0w.s:2111   .text:00000000000005b8 .L0 
     /tmp/ccYCTr0w.s:2123   .text:00000000000005c8 .L0 
     /tmp/ccYCTr0w.s:2124   .text:00000000000005c8 .L0 
     /tmp/ccYCTr0w.s:2125   .text:00000000000005c8 .L0 
  src/../h/Riscv.hpp:84     .text:00000000000005c8 .L0 
     /tmp/ccYCTr0w.s:2134   .text:00000000000005d0 .L0 
     /tmp/ccYCTr0w.s:2135   .text:00000000000005d0 .L0 
     /tmp/ccYCTr0w.s:2139   .text:00000000000005d4 .L0 
     /tmp/ccYCTr0w.s:2141   .text:00000000000005d8 .L0 
     /tmp/ccYCTr0w.s:2145   .text:00000000000005dc .L0 
     /tmp/ccYCTr0w.s:2146   .text:00000000000005dc .L0 
GAS LISTING /tmp/ccYCTr0w.s 			page 70


     /tmp/ccYCTr0w.s:2147   .text:00000000000005dc .L0 
  src/../h/Riscv.hpp:158    .text:00000000000005dc .L0 
     /tmp/ccYCTr0w.s:2155   .text:00000000000005e4 .L0 
     /tmp/ccYCTr0w.s:2156   .text:00000000000005e4 .L0 
     /tmp/ccYCTr0w.s:2160   .text:00000000000005e8 .L0 
     /tmp/ccYCTr0w.s:2162   .text:00000000000005ec .L0 
     /tmp/ccYCTr0w.s:2163   .text:00000000000005ec .L0 
     /tmp/ccYCTr0w.s:2167   .text:00000000000005f8 .L0 
     /tmp/ccYCTr0w.s:2168   .text:00000000000005f8 .L0 
     /tmp/ccYCTr0w.s:2173   .text:000000000000060c .L0 
     /tmp/ccYCTr0w.s:2174   .text:000000000000060c .L0 
     /tmp/ccYCTr0w.s:2177   .text:0000000000000614 .L0 
     /tmp/ccYCTr0w.s:2179   .text:0000000000000618 .L0 
     /tmp/ccYCTr0w.s:2181   .text:000000000000061c .L0 
     /tmp/ccYCTr0w.s:2182   .text:000000000000061c .L0 
     /tmp/ccYCTr0w.s:2187   .text:000000000000062c .L0 
     /tmp/ccYCTr0w.s:2188   .text:000000000000062c .L0 
     /tmp/ccYCTr0w.s:2193   .text:0000000000000630 .L0 
  src/../h/Riscv.hpp:163    .text:0000000000000630 .L0 
     /tmp/ccYCTr0w.s:2203   .text:0000000000000634 .L0 
     /tmp/ccYCTr0w.s:2204   .text:0000000000000634 .L0 
     /tmp/ccYCTr0w.s:2209   .text:0000000000000638 .L0 
  src/../h/Riscv.hpp:89     .text:0000000000000638 .L0 
     /tmp/ccYCTr0w.s:2219   .text:000000000000063c .L0 
     /tmp/ccYCTr0w.s:2228   .text:0000000000000640 .L0 
     /tmp/ccYCTr0w.s:2229   .text:0000000000000640 .L0 
     /tmp/ccYCTr0w.s:2230   .text:0000000000000640 .L0 
     /tmp/ccYCTr0w.s:2243   .text:0000000000000648 .L0 
     /tmp/ccYCTr0w.s:2244   .text:0000000000000648 .L0 
     /tmp/ccYCTr0w.s:2245   .text:0000000000000648 .L0 
  src/../h/Riscv.hpp:84     .text:0000000000000648 .L0 
     /tmp/ccYCTr0w.s:2253   .text:0000000000000650 .L0 
     /tmp/ccYCTr0w.s:2254   .text:0000000000000650 .L0 
     /tmp/ccYCTr0w.s:2258   .text:0000000000000654 .L0 
     /tmp/ccYCTr0w.s:2260   .text:0000000000000658 .L0 
     /tmp/ccYCTr0w.s:2261   .text:0000000000000658 .L0 
     /tmp/ccYCTr0w.s:2263   .text:000000000000065c .L0 
     /tmp/ccYCTr0w.s:2268   .text:0000000000000660 .L0 
  src/../h/Riscv.hpp:89     .text:0000000000000660 .L0 
     /tmp/ccYCTr0w.s:2278   .text:0000000000000664 .L0 
     /tmp/ccYCTr0w.s:2296   .text:0000000000000668 .L0 
     /tmp/ccYCTr0w.s:2297   .text:0000000000000668 .L0 
     /tmp/ccYCTr0w.s:2301   .text:0000000000000678 .L0 
     /tmp/ccYCTr0w.s:2302   .text:0000000000000678 .L0 
     /tmp/ccYCTr0w.s:2306   .text:0000000000000684 .L0 
     /tmp/ccYCTr0w.s:2307   .text:0000000000000684 .L0 
     /tmp/ccYCTr0w.s:2325   .text:000000000000069c .L0 
     /tmp/ccYCTr0w.s:2352   .text:00000000000006b8 .L0 
     /tmp/ccYCTr0w.s:2371   .text:00000000000006d0 .L0 
     /tmp/ccYCTr0w.s:2410   .text:00000000000006d0 .L0 
     /tmp/ccYCTr0w.s:612    .text:0000000000000138 .L0 
     /tmp/ccYCTr0w.s:619    .text:000000000000014c .L0 
     /tmp/ccYCTr0w.s:721    .text:00000000000001ac .L0 
     /tmp/ccYCTr0w.s:1294   .text:00000000000002dc .L0 
     /tmp/ccYCTr0w.s:1314   .text:00000000000002f8 .L0 
     /tmp/ccYCTr0w.s:1393   .text:0000000000000354 .L0 
     /tmp/ccYCTr0w.s:1816   .text:000000000000049c .L0 
GAS LISTING /tmp/ccYCTr0w.s 			page 71


     /tmp/ccYCTr0w.s:1836   .text:00000000000004b8 .L0 
     /tmp/ccYCTr0w.s:1915   .text:0000000000000514 .L0 
     /tmp/ccYCTr0w.s:2163   .text:00000000000005ec .L0 
     /tmp/ccYCTr0w.s:2168   .text:00000000000005f8 .L0 
     /tmp/ccYCTr0w.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccYCTr0w.s:2297   .text:0000000000000668 .L0 
     /tmp/ccYCTr0w.s:47     .rodata.str1.8:0000000000000010 .LC1
     /tmp/ccYCTr0w.s:2307   .text:0000000000000684 .L0 
     /tmp/ccYCTr0w.s:589    .text:0000000000000138 .L45
     /tmp/ccYCTr0w.s:759    .text:00000000000001d4 .L46
     /tmp/ccYCTr0w.s:771    .text:00000000000001e0 .L47
     /tmp/ccYCTr0w.s:2279   .text:0000000000000668 .L24
     /tmp/ccYCTr0w.s:1648   .text:0000000000000430 .L48
     /tmp/ccYCTr0w.s:1740   .text:0000000000000468 .L49
     /tmp/ccYCTr0w.s:1769   .text:000000000000047c .L50
     /tmp/ccYCTr0w.s:1811   .text:000000000000049c .L51
     /tmp/ccYCTr0w.s:1866   .text:00000000000004f0 .L52
     /tmp/ccYCTr0w.s:1956   .text:000000000000053c .L53
     /tmp/ccYCTr0w.s:2001   .text:0000000000000568 .L54
     /tmp/ccYCTr0w.s:2028   .text:000000000000057c .L55
     /tmp/ccYCTr0w.s:2054   .text:0000000000000590 .L56
     /tmp/ccYCTr0w.s:2080   .text:00000000000005a4 .L57
     /tmp/ccYCTr0w.s:2097   .text:00000000000005b4 .L58
     /tmp/ccYCTr0w.s:2117   .text:00000000000005c8 .L59
     /tmp/ccYCTr0w.s:2221   .text:0000000000000640 .L60
     /tmp/ccYCTr0w.s:1688   .text:0000000000000440 .L26
     /tmp/ccYCTr0w.s:658    .text:0000000000000170 .L3
     /tmp/ccYCTr0w.s:675    .text:000000000000018c .L61
     /tmp/ccYCTr0w.s:633    .text:0000000000000160 .L5
     /tmp/ccYCTr0w.s:648    .text:0000000000000168 .L6
     /tmp/ccYCTr0w.s:1130   .text:0000000000000270 .L62
     /tmp/ccYCTr0w.s:1218   .text:00000000000002a8 .L63
     /tmp/ccYCTr0w.s:1247   .text:00000000000002bc .L64
     /tmp/ccYCTr0w.s:1289   .text:00000000000002dc .L65
     /tmp/ccYCTr0w.s:1344   .text:0000000000000330 .L66
     /tmp/ccYCTr0w.s:1434   .text:000000000000037c .L67
     /tmp/ccYCTr0w.s:1480   .text:00000000000003a8 .L68
     /tmp/ccYCTr0w.s:1507   .text:00000000000003bc .L69
     /tmp/ccYCTr0w.s:1533   .text:00000000000003d0 .L70
     /tmp/ccYCTr0w.s:1559   .text:00000000000003e4 .L71
     /tmp/ccYCTr0w.s:1580   .text:00000000000003fc .L72
     /tmp/ccYCTr0w.s:1600   .text:0000000000000410 .L73
     /tmp/ccYCTr0w.s:1166   .text:0000000000000280 .L10
     /tmp/ccYCTr0w.s:1310   .text:00000000000002f8 .L14
     /tmp/ccYCTr0w.s:1832   .text:00000000000004b8 .L30
     /tmp/ccYCTr0w.s:654    .text:0000000000000168 .LEHB0
     /tmp/ccYCTr0w.s:54     .text:0000000000000020 .LFB42
     /tmp/ccYCTr0w.s:1463   .text:0000000000000390 .LEHE0
     /tmp/ccYCTr0w.s:1471   .text:0000000000000398 .LEHB1
     /tmp/ccYCTr0w.s:1474   .text:00000000000003a0 .LEHE1
     /tmp/ccYCTr0w.s:2312   .text:0000000000000698 .L42
     /tmp/ccYCTr0w.s:1492   .text:00000000000003ac .LEHB2
     /tmp/ccYCTr0w.s:1984   .text:0000000000000550 .LEHE2
     /tmp/ccYCTr0w.s:1992   .text:0000000000000558 .LEHB3
     /tmp/ccYCTr0w.s:1995   .text:0000000000000560 .LEHE3
     /tmp/ccYCTr0w.s:2331   .text:00000000000006b4 .L43
     /tmp/ccYCTr0w.s:2013   .text:000000000000056c .LEHB4
GAS LISTING /tmp/ccYCTr0w.s 			page 72


     /tmp/ccYCTr0w.s:2358   .text:00000000000006d0 .LEHE4
     /tmp/ccYCTr0w.s:5093   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccYCTr0w.s:7450   .debug_str:0000000000000974 .LASF187
     /tmp/ccYCTr0w.s:7198   .debug_str:00000000000001f5 .LASF188
     /tmp/ccYCTr0w.s:7240   .debug_str:000000000000032b .LASF189
     /tmp/ccYCTr0w.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccYCTr0w.s:2402   .text:00000000000006d0 .Letext0
     /tmp/ccYCTr0w.s:7138   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccYCTr0w.s:7270   .debug_str:0000000000000436 .LASF0
     /tmp/ccYCTr0w.s:7294   .debug_str:00000000000004f9 .LASF1
     /tmp/ccYCTr0w.s:7386   .debug_str:00000000000007e1 .LASF2
     /tmp/ccYCTr0w.s:7238   .debug_str:0000000000000324 .LASF3
     /tmp/ccYCTr0w.s:7398   .debug_str:0000000000000847 .LASF4
     /tmp/ccYCTr0w.s:7278   .debug_str:000000000000046a .LASF5
     /tmp/ccYCTr0w.s:7156   .debug_str:000000000000007b .LASF6
     /tmp/ccYCTr0w.s:7352   .debug_str:00000000000006cf .LASF7
     /tmp/ccYCTr0w.s:7284   .debug_str:00000000000004bb .LASF8
     /tmp/ccYCTr0w.s:7236   .debug_str:0000000000000314 .LASF9
     /tmp/ccYCTr0w.s:7250   .debug_str:0000000000000399 .LASF10
     /tmp/ccYCTr0w.s:7190   .debug_str:00000000000001bb .LASF11
     /tmp/ccYCTr0w.s:7230   .debug_str:00000000000002f6 .LASF12
     /tmp/ccYCTr0w.s:7200   .debug_str:0000000000000203 .LASF13
     /tmp/ccYCTr0w.s:7188   .debug_str:00000000000001ab .LASF14
     /tmp/ccYCTr0w.s:7432   .debug_str:000000000000091b .LASF15
     /tmp/ccYCTr0w.s:7220   .debug_str:0000000000000299 .LASF16
     /tmp/ccYCTr0w.s:7420   .debug_str:00000000000008cb .LASF17
     /tmp/ccYCTr0w.s:7486   .debug_str:0000000000000b36 .LASF74
     /tmp/ccYCTr0w.s:7368   .debug_str:000000000000076d .LASF21
     /tmp/ccYCTr0w.s:7302   .debug_str:0000000000000561 .LASF18
     /tmp/ccYCTr0w.s:7224   .debug_str:00000000000002ca .LASF19
     /tmp/ccYCTr0w.s:7504   .debug_str:0000000000000c1b .LASF20
     /tmp/ccYCTr0w.s:7472   .debug_str:0000000000000ae0 .LASF22
     /tmp/ccYCTr0w.s:7226   .debug_str:00000000000002d3 .LASF23
     /tmp/ccYCTr0w.s:7448   .debug_str:0000000000000967 .LASF24
     /tmp/ccYCTr0w.s:7208   .debug_str:0000000000000237 .LASF25
     /tmp/ccYCTr0w.s:7258   .debug_str:00000000000003ee .LASF26
     /tmp/ccYCTr0w.s:7266   .debug_str:0000000000000418 .LASF28
     /tmp/ccYCTr0w.s:7406   .debug_str:000000000000086d .LASF27
     /tmp/ccYCTr0w.s:7222   .debug_str:00000000000002af .LASF29
     /tmp/ccYCTr0w.s:7272   .debug_str:0000000000000443 .LASF30
     /tmp/ccYCTr0w.s:7496   .debug_str:0000000000000b8f .LASF31
     /tmp/ccYCTr0w.s:7468   .debug_str:0000000000000abb .LASF32
     /tmp/ccYCTr0w.s:7462   .debug_str:0000000000000a7c .LASF34
     /tmp/ccYCTr0w.s:7382   .debug_str:00000000000007cd .LASF36
     /tmp/ccYCTr0w.s:7340   .debug_str:000000000000068b .LASF38
     /tmp/ccYCTr0w.s:7362   .debug_str:000000000000073f .LASF33
     /tmp/ccYCTr0w.s:7364   .debug_str:0000000000000746 .LASF35
     /tmp/ccYCTr0w.s:7336   .debug_str:0000000000000670 .LASF37
     /tmp/ccYCTr0w.s:7286   .debug_str:00000000000004ce .LASF39
     /tmp/ccYCTr0w.s:7500   .debug_str:0000000000000bf0 .LASF40
     /tmp/ccYCTr0w.s:7456   .debug_str:0000000000000a56 .LASF41
     /tmp/ccYCTr0w.s:7332   .debug_str:0000000000000663 .LASF42
     /tmp/ccYCTr0w.s:7338   .debug_str:0000000000000677 .LASF43
     /tmp/ccYCTr0w.s:7308   .debug_str:0000000000000594 .LASF44
     /tmp/ccYCTr0w.s:7366   .debug_str:0000000000000759 .LASF45
     /tmp/ccYCTr0w.s:7530   .debug_str:0000000000000ce1 .LASF46
     /tmp/ccYCTr0w.s:7276   .debug_str:0000000000000456 .LASF47
GAS LISTING /tmp/ccYCTr0w.s 			page 73


     /tmp/ccYCTr0w.s:7428   .debug_str:0000000000000907 .LASF48
     /tmp/ccYCTr0w.s:7402   .debug_str:0000000000000853 .LASF49
     /tmp/ccYCTr0w.s:7404   .debug_str:0000000000000866 .LASF50
     /tmp/ccYCTr0w.s:7194   .debug_str:00000000000001cf .LASF51
     /tmp/ccYCTr0w.s:7218   .debug_str:0000000000000293 .LASF52
     /tmp/ccYCTr0w.s:7264   .debug_str:0000000000000406 .LASF53
     /tmp/ccYCTr0w.s:7274   .debug_str:0000000000000450 .LASF54
     /tmp/ccYCTr0w.s:7212   .debug_str:000000000000025b .LASF55
     /tmp/ccYCTr0w.s:7416   .debug_str:00000000000008bb .LASF56
     /tmp/ccYCTr0w.s:7394   .debug_str:0000000000000829 .LASF57
     /tmp/ccYCTr0w.s:7388   .debug_str:00000000000007ef .LASF58
     /tmp/ccYCTr0w.s:7186   .debug_str:0000000000000198 .LASF59
     /tmp/ccYCTr0w.s:7374   .debug_str:0000000000000799 .LASF60
     /tmp/ccYCTr0w.s:7378   .debug_str:00000000000007ab .LASF61
     /tmp/ccYCTr0w.s:7262   .debug_str:0000000000000400 .LASF62
     /tmp/ccYCTr0w.s:7204   .debug_str:000000000000021b .LASF63
     /tmp/ccYCTr0w.s:7158   .debug_str:0000000000000082 .LASF64
     /tmp/ccYCTr0w.s:7390   .debug_str:00000000000007f6 .LASF65
     /tmp/ccYCTr0w.s:7384   .debug_str:00000000000007d6 .LASF66
     /tmp/ccYCTr0w.s:7522   .debug_str:0000000000000ca0 .LASF67
     /tmp/ccYCTr0w.s:7490   .debug_str:0000000000000b53 .LASF68
     /tmp/ccYCTr0w.s:7508   .debug_str:0000000000000c2f .LASF69
     /tmp/ccYCTr0w.s:7482   .debug_str:0000000000000b25 .LASF70
     /tmp/ccYCTr0w.s:7316   .debug_str:00000000000005b5 .LASF71
     /tmp/ccYCTr0w.s:7466   .debug_str:0000000000000aac .LASF72
     /tmp/ccYCTr0w.s:7248   .debug_str:000000000000037d .LASF73
     /tmp/ccYCTr0w.s:7354   .debug_str:00000000000006e2 .LASF123
     /tmp/ccYCTr0w.s:7282   .debug_str:0000000000000499 .LASF125
     /tmp/ccYCTr0w.s:7350   .debug_str:00000000000006bf .LASF75
     /tmp/ccYCTr0w.s:7414   .debug_str:00000000000008af .LASF78
     /tmp/ccYCTr0w.s:7192   .debug_str:00000000000001ca .LASF76
     /tmp/ccYCTr0w.s:7292   .debug_str:00000000000004f4 .LASF77
     /tmp/ccYCTr0w.s:7526   .debug_str:0000000000000cc5 .LASF79
     /tmp/ccYCTr0w.s:7170   .debug_str:00000000000000ef .LASF80
     /tmp/ccYCTr0w.s:7376   .debug_str:000000000000079f .LASF81
     /tmp/ccYCTr0w.s:7306   .debug_str:0000000000000583 .LASF82
     /tmp/ccYCTr0w.s:7142   .debug_str:0000000000000010 .LASF83
     /tmp/ccYCTr0w.s:7300   .debug_str:0000000000000543 .LASF85
     /tmp/ccYCTr0w.s:7342   .debug_str:00000000000006a0 .LASF84
     /tmp/ccYCTr0w.s:7280   .debug_str:000000000000047c .LASF86
     /tmp/ccYCTr0w.s:7348   .debug_str:00000000000006b1 .LASF87
     /tmp/ccYCTr0w.s:7320   .debug_str:00000000000005e1 .LASF88
     /tmp/ccYCTr0w.s:7202   .debug_str:0000000000000213 .LASF89
     /tmp/ccYCTr0w.s:7174   .debug_str:0000000000000119 .LASF90
     /tmp/ccYCTr0w.s:7410   .debug_str:000000000000088c .LASF91
     /tmp/ccYCTr0w.s:7172   .debug_str:00000000000000fa .LASF92
     /tmp/ccYCTr0w.s:7164   .debug_str:00000000000000a0 .LASF93
     /tmp/ccYCTr0w.s:7370   .debug_str:0000000000000778 .LASF94
     /tmp/ccYCTr0w.s:7206   .debug_str:000000000000022d .LASF96
     /tmp/ccYCTr0w.s:7470   .debug_str:0000000000000ac4 .LASF97
     /tmp/ccYCTr0w.s:7412   .debug_str:0000000000000894 .LASF95
     /tmp/ccYCTr0w.s:7464   .debug_str:0000000000000a91 .LASF98
     /tmp/ccYCTr0w.s:7328   .debug_str:000000000000063b .LASF99
     /tmp/ccYCTr0w.s:7512   .debug_str:0000000000000c50 .LASF100
     /tmp/ccYCTr0w.s:7312   .debug_str:00000000000005a3 .LASF101
     /tmp/ccYCTr0w.s:7440   .debug_str:0000000000000947 .LASF102
     /tmp/ccYCTr0w.s:7400   .debug_str:000000000000084e .LASF103
GAS LISTING /tmp/ccYCTr0w.s 			page 74


     /tmp/ccYCTr0w.s:7152   .debug_str:000000000000005c .LASF104
     /tmp/ccYCTr0w.s:7442   .debug_str:000000000000094f .LASF105
     /tmp/ccYCTr0w.s:7330   .debug_str:000000000000064c .LASF106
     /tmp/ccYCTr0w.s:7178   .debug_str:000000000000015b .LASF107
     /tmp/ccYCTr0w.s:7228   .debug_str:00000000000002df .LASF108
     /tmp/ccYCTr0w.s:7314   .debug_str:00000000000005a8 .LASF109
     /tmp/ccYCTr0w.s:7454   .debug_str:0000000000000a3d .LASF110
     /tmp/ccYCTr0w.s:7430   .debug_str:000000000000090e .LASF111
     /tmp/ccYCTr0w.s:7254   .debug_str:00000000000003c3 .LASF112
     /tmp/ccYCTr0w.s:7346   .debug_str:00000000000006ac .LASF190
     /tmp/ccYCTr0w.s:7298   .debug_str:000000000000053d .LASF113
     /tmp/ccYCTr0w.s:7380   .debug_str:00000000000007bd .LASF114
     /tmp/ccYCTr0w.s:7446   .debug_str:000000000000095f .LASF191
     /tmp/ccYCTr0w.s:7524   .debug_str:0000000000000cb8 .LASF115
     /tmp/ccYCTr0w.s:7246   .debug_str:0000000000000371 .LASF116
     /tmp/ccYCTr0w.s:7244   .debug_str:0000000000000359 .LASF192
     /tmp/ccYCTr0w.s:7144   .debug_str:0000000000000017 .LASF117
     /tmp/ccYCTr0w.s:7520   .debug_str:0000000000000c9a .LASF118
     /tmp/ccYCTr0w.s:7460   .debug_str:0000000000000a74 .LASF119
     /tmp/ccYCTr0w.s:7434   .debug_str:0000000000000927 .LASF120
     /tmp/ccYCTr0w.s:7418   .debug_str:00000000000008c2 .LASF121
     /tmp/ccYCTr0w.s:7458   .debug_str:0000000000000a6a .LASF122
     /tmp/ccYCTr0w.s:7180   .debug_str:0000000000000167 .LASF124
     /tmp/ccYCTr0w.s:7304   .debug_str:000000000000056a .LASF126
     /tmp/ccYCTr0w.s:7516   .debug_str:0000000000000c78 .LASF135
     /tmp/ccYCTr0w.s:7150   .debug_str:0000000000000034 .LASF136
     /tmp/ccYCTr0w.s:7214   .debug_str:000000000000026d .LASF127
     /tmp/ccYCTr0w.s:7196   .debug_str:00000000000001e2 .LASF128
     /tmp/ccYCTr0w.s:7408   .debug_str:000000000000087b .LASF129
     /tmp/ccYCTr0w.s:7318   .debug_str:00000000000005cb .LASF130
     /tmp/ccYCTr0w.s:7396   .debug_str:000000000000083c .LASF131
     /tmp/ccYCTr0w.s:7506   .debug_str:0000000000000c24 .LASF132
     /tmp/ccYCTr0w.s:7168   .debug_str:00000000000000e1 .LASF133
     /tmp/ccYCTr0w.s:7288   .debug_str:00000000000004e1 .LASF134
     /tmp/ccYCTr0w.s:7182   .debug_str:0000000000000175 .LASF137
     /tmp/ccYCTr0w.s:7234   .debug_str:000000000000030a .LASF138
     /tmp/ccYCTr0w.s:7426   .debug_str:0000000000000902 .LASF139
     /tmp/ccYCTr0w.s:7334   .debug_str:000000000000066b .LASF140
     /tmp/ccYCTr0w.s:7518   .debug_str:0000000000000c86 .LASF193
     /tmp/ccYCTr0w.s:7176   .debug_str:0000000000000138 .LASF194
     /tmp/ccYCTr0w.s:7492   .debug_str:0000000000000b5d .LASF141
     /tmp/ccYCTr0w.s:7474   .debug_str:0000000000000aef .LASF142
     /tmp/ccYCTr0w.s:7324   .debug_str:0000000000000615 .LASF143
     /tmp/ccYCTr0w.s:7166   .debug_str:00000000000000b9 .LASF144
     /tmp/ccYCTr0w.s:7510   .debug_str:0000000000000c45 .LASF195
     /tmp/ccYCTr0w.s:7356   .debug_str:00000000000006f7 .LASF196
     /tmp/ccYCTr0w.s:7358   .debug_str:000000000000071a .LASF145
     /tmp/ccYCTr0w.s:7484   .debug_str:0000000000000b2f .LASF146
     /tmp/ccYCTr0w.s:7268   .debug_str:0000000000000430 .LASF147
     /tmp/ccYCTr0w.s:7326   .debug_str:0000000000000620 .LASF148
     /tmp/ccYCTr0w.s:7148   .debug_str:000000000000002c .LASF149
     /tmp/ccYCTr0w.s:7216   .debug_str:0000000000000276 .LASF150
     /tmp/ccYCTr0w.s:7296   .debug_str:000000000000050c .LASF151
     /tmp/ccYCTr0w.s:7498   .debug_str:0000000000000ba9 .LASF152
     /tmp/ccYCTr0w.s:7494   .debug_str:0000000000000b6b .LASF153
     /tmp/ccYCTr0w.s:7502   .debug_str:0000000000000bf8 .LASF154
     /tmp/ccYCTr0w.s:7488   .debug_str:0000000000000b3c .LASF155
GAS LISTING /tmp/ccYCTr0w.s 			page 75


     /tmp/ccYCTr0w.s:7160   .debug_str:000000000000008d .LASF156
     /tmp/ccYCTr0w.s:7392   .debug_str:000000000000080e .LASF157
     /tmp/ccYCTr0w.s:7372   .debug_str:0000000000000794 .LASF158
     /tmp/ccYCTr0w.s:7422   .debug_str:00000000000008e1 .LASF159
     /tmp/ccYCTr0w.s:7436   .debug_str:0000000000000935 .LASF160
     /tmp/ccYCTr0w.s:7252   .debug_str:00000000000003a7 .LASF161
     /tmp/ccYCTr0w.s:7360   .debug_str:0000000000000728 .LASF162
     /tmp/ccYCTr0w.s:2372   .text:00000000000006d0 .LFE42
     /tmp/ccYCTr0w.s:7424   .debug_str:00000000000008fb .LASF163
     /tmp/ccYCTr0w.s:680    .text:000000000000018c .LBB563
     /tmp/ccYCTr0w.s:762    .text:00000000000001d4 .LBE563
     /tmp/ccYCTr0w.s:7452   .debug_str:0000000000000a38 .LASF164
     /tmp/ccYCTr0w.s:7256   .debug_str:00000000000003e6 .LASF165
     /tmp/ccYCTr0w.s:682    .text:000000000000018c .LBB564
     /tmp/ccYCTr0w.s:697    .text:0000000000000198 .LBE564
     /tmp/ccYCTr0w.s:701    .text:000000000000019c .LBB566
     /tmp/ccYCTr0w.s:716    .text:00000000000001a8 .LBE566
     /tmp/ccYCTr0w.s:731    .text:00000000000001c4 .LBB568
     /tmp/ccYCTr0w.s:742    .text:00000000000001c8 .LBE568
     /tmp/ccYCTr0w.s:6400   .debug_loc:0000000000000000 .LLST67
     /tmp/ccYCTr0w.s:747    .text:00000000000001cc .LBB570
     /tmp/ccYCTr0w.s:761    .text:00000000000001d4 .LBE570
     /tmp/ccYCTr0w.s:6407   .debug_loc:0000000000000023 .LLST68
     /tmp/ccYCTr0w.s:726    .text:00000000000001c0 .LVL11
     /tmp/ccYCTr0w.s:7060   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccYCTr0w.s:6414   .debug_loc:0000000000000046 .LLST35
     /tmp/ccYCTr0w.s:1144   .text:0000000000000270 .LBB481
     /tmp/ccYCTr0w.s:1167   .text:0000000000000280 .LBE481
     /tmp/ccYCTr0w.s:6469   .debug_loc:000000000000014d .LLST63
     /tmp/ccYCTr0w.s:7528   .debug_str:0000000000000cda .LASF166
     /tmp/ccYCTr0w.s:6476   .debug_loc:0000000000000170 .LLST64
     /tmp/ccYCTr0w.s:1157   .text:000000000000027c .LVL23
     /tmp/ccYCTr0w.s:1223   .text:00000000000002a8 .LBB467
     /tmp/ccYCTr0w.s:1244   .text:00000000000002b8 .LBE467
     /tmp/ccYCTr0w.s:7184   .debug_str:0000000000000193 .LASF167
     /tmp/ccYCTr0w.s:6483   .debug_loc:0000000000000193 .LLST61
     /tmp/ccYCTr0w.s:6495   .debug_loc:00000000000001ca .LLST62
     /tmp/ccYCTr0w.s:1236   .text:00000000000002b4 .LVL28
     /tmp/ccYCTr0w.s:1249   .text:00000000000002bc .LBB454
     /tmp/ccYCTr0w.s:1286   .text:00000000000002d8 .LBE454
     /tmp/ccYCTr0w.s:7532   .debug_str:0000000000000ce9 .LASF168
     /tmp/ccYCTr0w.s:6502   .debug_loc:00000000000001ed .LLST57
     /tmp/ccYCTr0w.s:7290   .debug_str:00000000000004e6 .LASF169
     /tmp/ccYCTr0w.s:6509   .debug_loc:0000000000000210 .LLST58
     /tmp/ccYCTr0w.s:6516   .debug_loc:0000000000000233 .LLST59
     /tmp/ccYCTr0w.s:6523   .debug_loc:0000000000000256 .LLST60
     /tmp/ccYCTr0w.s:1283   .text:00000000000002d4 .LVL34
     /tmp/ccYCTr0w.s:1291   .text:00000000000002dc .LBB438
     /tmp/ccYCTr0w.s:1347   .text:0000000000000330 .LBE438
     /tmp/ccYCTr0w.s:6530   .debug_loc:0000000000000279 .LLST53
     /tmp/ccYCTr0w.s:1311   .text:00000000000002f8 .LBB440
     /tmp/ccYCTr0w.s:1345   .text:0000000000000330 .LBE440
     /tmp/ccYCTr0w.s:6543   .debug_loc:00000000000002b1 .LLST54
     /tmp/ccYCTr0w.s:1317   .text:0000000000000304 .LBB441
     /tmp/ccYCTr0w.s:1325   .text:000000000000030c .LBE441
     /tmp/ccYCTr0w.s:6550   .debug_loc:00000000000002d4 .LLST55
     /tmp/ccYCTr0w.s:6558   .debug_loc:00000000000002f8 .LLST56
GAS LISTING /tmp/ccYCTr0w.s 			page 76


     /tmp/ccYCTr0w.s:1331   .text:0000000000000314 .LVL40
     /tmp/ccYCTr0w.s:1341   .text:000000000000032c .LVL41
     /tmp/ccYCTr0w.s:1349   .text:0000000000000330 .LBB419
     /tmp/ccYCTr0w.s:1435   .text:000000000000037c .LBE419
     /tmp/ccYCTr0w.s:1351   .text:0000000000000330 .LBB420
     /tmp/ccYCTr0w.s:1367   .text:000000000000033c .LBE420
     /tmp/ccYCTr0w.s:1373   .text:0000000000000344 .LBB422
     /tmp/ccYCTr0w.s:1388   .text:0000000000000350 .LBE422
     /tmp/ccYCTr0w.s:1403   .text:000000000000036c .LBB424
     /tmp/ccYCTr0w.s:1414   .text:0000000000000370 .LBE424
     /tmp/ccYCTr0w.s:6565   .debug_loc:000000000000031b .LLST51
     /tmp/ccYCTr0w.s:1419   .text:0000000000000374 .LBB426
     /tmp/ccYCTr0w.s:1430   .text:0000000000000378 .LBE426
     /tmp/ccYCTr0w.s:6572   .debug_loc:000000000000033e .LLST52
     /tmp/ccYCTr0w.s:1398   .text:0000000000000368 .LVL44
     /tmp/ccYCTr0w.s:6579   .debug_loc:0000000000000361 .LLST47
     /tmp/ccYCTr0w.s:6590   .debug_loc:0000000000000397 .LLST48
     /tmp/ccYCTr0w.s:1455   .text:0000000000000384 .LBB408
     /tmp/ccYCTr0w.s:1468   .text:0000000000000394 .LBE408
     /tmp/ccYCTr0w.s:6601   .debug_loc:00000000000003cd .LLST49
     /tmp/ccYCTr0w.s:6609   .debug_loc:00000000000003f1 .LLST50
     /tmp/ccYCTr0w.s:1462   .text:0000000000000390 .LVL52
     /tmp/ccYCTr0w.s:1473   .text:00000000000003a0 .LVL54
     /tmp/ccYCTr0w.s:2327   .text:00000000000006a8 .LVL142
     /tmp/ccYCTr0w.s:1482   .text:00000000000003a8 .LBB399
     /tmp/ccYCTr0w.s:1504   .text:00000000000003b8 .LBE399
     /tmp/ccYCTr0w.s:6620   .debug_loc:0000000000000427 .LLST45
     /tmp/ccYCTr0w.s:7480   .debug_str:0000000000000b1e .LASF170
     /tmp/ccYCTr0w.s:6627   .debug_loc:000000000000044a .LLST46
     /tmp/ccYCTr0w.s:1496   .text:00000000000003b4 .LVL57
     /tmp/ccYCTr0w.s:1509   .text:00000000000003bc .LBB392
     /tmp/ccYCTr0w.s:1530   .text:00000000000003cc .LBE392
     /tmp/ccYCTr0w.s:6634   .debug_loc:000000000000046d .LLST43
     /tmp/ccYCTr0w.s:6641   .debug_loc:0000000000000490 .LLST44
     /tmp/ccYCTr0w.s:1522   .text:00000000000003c8 .LVL60
     /tmp/ccYCTr0w.s:1535   .text:00000000000003d0 .LBB386
     /tmp/ccYCTr0w.s:1556   .text:00000000000003e0 .LBE386
     /tmp/ccYCTr0w.s:6648   .debug_loc:00000000000004b3 .LLST41
     /tmp/ccYCTr0w.s:6655   .debug_loc:00000000000004d6 .LLST42
     /tmp/ccYCTr0w.s:1548   .text:00000000000003dc .LVL63
     /tmp/ccYCTr0w.s:1561   .text:00000000000003e4 .LBB381
     /tmp/ccYCTr0w.s:1577   .text:00000000000003f8 .LBE381
     /tmp/ccYCTr0w.s:6662   .debug_loc:00000000000004f9 .LLST40
     /tmp/ccYCTr0w.s:1565   .text:00000000000003ec .LVL65
     /tmp/ccYCTr0w.s:1576   .text:00000000000003f8 .LVL66
     /tmp/ccYCTr0w.s:1582   .text:00000000000003fc .LBB377
     /tmp/ccYCTr0w.s:1597   .text:000000000000040c .LBE377
     /tmp/ccYCTr0w.s:6669   .debug_loc:000000000000051c .LLST39
     /tmp/ccYCTr0w.s:1596   .text:000000000000040c .LVL69
     /tmp/ccYCTr0w.s:1602   .text:0000000000000410 .LBB371
     /tmp/ccYCTr0w.s:1649   .text:0000000000000430 .LBE371
     /tmp/ccYCTr0w.s:1604   .text:0000000000000410 .LBB372
     /tmp/ccYCTr0w.s:1617   .text:0000000000000418 .LBE372
     /tmp/ccYCTr0w.s:6676   .debug_loc:000000000000053f .LLST37
     /tmp/ccYCTr0w.s:1633   .text:0000000000000428 .LBB374
     /tmp/ccYCTr0w.s:1644   .text:000000000000042c .LBE374
     /tmp/ccYCTr0w.s:6685   .debug_loc:0000000000000565 .LLST38
GAS LISTING /tmp/ccYCTr0w.s 			page 77


     /tmp/ccYCTr0w.s:1088   .text:0000000000000250 .LBB366
     /tmp/ccYCTr0w.s:1131   .text:0000000000000270 .LBE366
     /tmp/ccYCTr0w.s:1090   .text:0000000000000250 .LBB367
     /tmp/ccYCTr0w.s:1106   .text:000000000000025c .LBE367
     /tmp/ccYCTr0w.s:1115   .text:0000000000000268 .LBB369
     /tmp/ccYCTr0w.s:1126   .text:000000000000026c .LBE369
     /tmp/ccYCTr0w.s:6692   .debug_loc:0000000000000588 .LLST36
     /tmp/ccYCTr0w.s:1182   .text:0000000000000288 .LBB496
     /tmp/ccYCTr0w.s:1197   .text:0000000000000294 .LBE496
     /tmp/ccYCTr0w.s:1206   .text:00000000000002a0 .LBB498
     /tmp/ccYCTr0w.s:1220   .text:00000000000002a8 .LBE498
     /tmp/ccYCTr0w.s:6699   .debug_loc:00000000000005ab .LLST65
     /tmp/ccYCTr0w.s:6706   .debug_loc:00000000000005ce .LLST0
     /tmp/ccYCTr0w.s:1666   .text:0000000000000430 .LBB301
     /tmp/ccYCTr0w.s:1689   .text:0000000000000440 .LBE301
     /tmp/ccYCTr0w.s:6765   .debug_loc:00000000000006e8 .LLST32
     /tmp/ccYCTr0w.s:6772   .debug_loc:000000000000070b .LLST33
     /tmp/ccYCTr0w.s:1679   .text:000000000000043c .LVL77
     /tmp/ccYCTr0w.s:1745   .text:0000000000000468 .LBB286
     /tmp/ccYCTr0w.s:1766   .text:0000000000000478 .LBE286
     /tmp/ccYCTr0w.s:6779   .debug_loc:000000000000072e .LLST30
     /tmp/ccYCTr0w.s:6791   .debug_loc:0000000000000765 .LLST31
     /tmp/ccYCTr0w.s:1758   .text:0000000000000474 .LVL82
     /tmp/ccYCTr0w.s:1771   .text:000000000000047c .LBB272
     /tmp/ccYCTr0w.s:1808   .text:0000000000000498 .LBE272
     /tmp/ccYCTr0w.s:6798   .debug_loc:0000000000000788 .LLST26
     /tmp/ccYCTr0w.s:6805   .debug_loc:00000000000007ab .LLST27
     /tmp/ccYCTr0w.s:6812   .debug_loc:00000000000007ce .LLST28
     /tmp/ccYCTr0w.s:6819   .debug_loc:00000000000007f1 .LLST29
     /tmp/ccYCTr0w.s:1805   .text:0000000000000494 .LVL88
     /tmp/ccYCTr0w.s:1813   .text:000000000000049c .LBB255
     /tmp/ccYCTr0w.s:1869   .text:00000000000004f0 .LBE255
     /tmp/ccYCTr0w.s:6826   .debug_loc:0000000000000814 .LLST22
     /tmp/ccYCTr0w.s:1833   .text:00000000000004b8 .LBB257
     /tmp/ccYCTr0w.s:1867   .text:00000000000004f0 .LBE257
     /tmp/ccYCTr0w.s:6839   .debug_loc:000000000000084c .LLST23
     /tmp/ccYCTr0w.s:1839   .text:00000000000004c4 .LBB258
     /tmp/ccYCTr0w.s:1847   .text:00000000000004cc .LBE258
     /tmp/ccYCTr0w.s:6846   .debug_loc:000000000000086f .LLST24
     /tmp/ccYCTr0w.s:6854   .debug_loc:0000000000000893 .LLST25
     /tmp/ccYCTr0w.s:1853   .text:00000000000004d4 .LVL94
     /tmp/ccYCTr0w.s:1863   .text:00000000000004ec .LVL95
     /tmp/ccYCTr0w.s:1871   .text:00000000000004f0 .LBB235
     /tmp/ccYCTr0w.s:1957   .text:000000000000053c .LBE235
     /tmp/ccYCTr0w.s:1873   .text:00000000000004f0 .LBB236
     /tmp/ccYCTr0w.s:1889   .text:00000000000004fc .LBE236
     /tmp/ccYCTr0w.s:1895   .text:0000000000000504 .LBB238
     /tmp/ccYCTr0w.s:1910   .text:0000000000000510 .LBE238
     /tmp/ccYCTr0w.s:1925   .text:000000000000052c .LBB240
     /tmp/ccYCTr0w.s:1936   .text:0000000000000530 .LBE240
     /tmp/ccYCTr0w.s:6861   .debug_loc:00000000000008b6 .LLST20
     /tmp/ccYCTr0w.s:1941   .text:0000000000000534 .LBB242
     /tmp/ccYCTr0w.s:1952   .text:0000000000000538 .LBE242
     /tmp/ccYCTr0w.s:6868   .debug_loc:00000000000008d9 .LLST21
     /tmp/ccYCTr0w.s:1920   .text:0000000000000528 .LVL98
     /tmp/ccYCTr0w.s:6875   .debug_loc:00000000000008fc .LLST16
     /tmp/ccYCTr0w.s:6886   .debug_loc:0000000000000932 .LLST17
GAS LISTING /tmp/ccYCTr0w.s 			page 78


     /tmp/ccYCTr0w.s:1977   .text:0000000000000544 .LBB223
     /tmp/ccYCTr0w.s:1989   .text:0000000000000554 .LBE223
     /tmp/ccYCTr0w.s:6897   .debug_loc:0000000000000968 .LLST18
     /tmp/ccYCTr0w.s:6905   .debug_loc:000000000000098c .LLST19
     /tmp/ccYCTr0w.s:1983   .text:0000000000000550 .LVL106
     /tmp/ccYCTr0w.s:1994   .text:0000000000000560 .LVL108
     /tmp/ccYCTr0w.s:2354   .text:00000000000006c4 .LVL145
     /tmp/ccYCTr0w.s:2003   .text:0000000000000568 .LBB213
     /tmp/ccYCTr0w.s:2025   .text:0000000000000578 .LBE213
     /tmp/ccYCTr0w.s:6916   .debug_loc:00000000000009c2 .LLST14
     /tmp/ccYCTr0w.s:6923   .debug_loc:00000000000009e5 .LLST15
     /tmp/ccYCTr0w.s:2017   .text:0000000000000574 .LVL111
     /tmp/ccYCTr0w.s:2030   .text:000000000000057c .LBB205
     /tmp/ccYCTr0w.s:2051   .text:000000000000058c .LBE205
     /tmp/ccYCTr0w.s:6930   .debug_loc:0000000000000a08 .LLST12
     /tmp/ccYCTr0w.s:6937   .debug_loc:0000000000000a2b .LLST13
     /tmp/ccYCTr0w.s:2043   .text:0000000000000588 .LVL114
     /tmp/ccYCTr0w.s:2056   .text:0000000000000590 .LBB198
     /tmp/ccYCTr0w.s:2077   .text:00000000000005a0 .LBE198
     /tmp/ccYCTr0w.s:6944   .debug_loc:0000000000000a4e .LLST10
     /tmp/ccYCTr0w.s:6951   .debug_loc:0000000000000a71 .LLST11
     /tmp/ccYCTr0w.s:2069   .text:000000000000059c .LVL117
     /tmp/ccYCTr0w.s:2082   .text:00000000000005a4 .LBB192
     /tmp/ccYCTr0w.s:2094   .text:00000000000005b0 .LBE192
     /tmp/ccYCTr0w.s:6958   .debug_loc:0000000000000a94 .LLST9
     /tmp/ccYCTr0w.s:2086   .text:00000000000005ac .LVL119
     /tmp/ccYCTr0w.s:2099   .text:00000000000005b4 .LBB187
     /tmp/ccYCTr0w.s:2114   .text:00000000000005c4 .LBE187
     /tmp/ccYCTr0w.s:6965   .debug_loc:0000000000000ab7 .LLST8
     /tmp/ccYCTr0w.s:2113   .text:00000000000005c4 .LVL122
     /tmp/ccYCTr0w.s:2119   .text:00000000000005c8 .LBB175
     /tmp/ccYCTr0w.s:2222   .text:0000000000000640 .LBE175
     /tmp/ccYCTr0w.s:6972   .debug_loc:0000000000000ada .LLST5
     /tmp/ccYCTr0w.s:2121   .text:00000000000005c8 .LBB176
     /tmp/ccYCTr0w.s:2137   .text:00000000000005d4 .LBE176
     /tmp/ccYCTr0w.s:2143   .text:00000000000005dc .LBB178
     /tmp/ccYCTr0w.s:2158   .text:00000000000005e8 .LBE178
     /tmp/ccYCTr0w.s:2190   .text:0000000000000630 .LBB180
     /tmp/ccYCTr0w.s:2201   .text:0000000000000634 .LBE180
     /tmp/ccYCTr0w.s:6979   .debug_loc:0000000000000afd .LLST6
     /tmp/ccYCTr0w.s:2206   .text:0000000000000638 .LBB182
     /tmp/ccYCTr0w.s:2217   .text:000000000000063c .LBE182
     /tmp/ccYCTr0w.s:6986   .debug_loc:0000000000000b20 .LLST7
     /tmp/ccYCTr0w.s:2175   .text:0000000000000614 .LVL126
     /tmp/ccYCTr0w.s:2185   .text:000000000000062c .LVL127
     /tmp/ccYCTr0w.s:2224   .text:0000000000000640 .LBB167
     /tmp/ccYCTr0w.s:2280   .text:0000000000000668 .LBE167
     /tmp/ccYCTr0w.s:2226   .text:0000000000000640 .LBB168
     /tmp/ccYCTr0w.s:2239   .text:0000000000000648 .LBE168
     /tmp/ccYCTr0w.s:6993   .debug_loc:0000000000000b43 .LLST3
     /tmp/ccYCTr0w.s:2241   .text:0000000000000648 .LBB170
     /tmp/ccYCTr0w.s:2256   .text:0000000000000654 .LBE170
     /tmp/ccYCTr0w.s:2265   .text:0000000000000660 .LBB172
     /tmp/ccYCTr0w.s:2276   .text:0000000000000664 .LBE172
     /tmp/ccYCTr0w.s:7002   .debug_loc:0000000000000b69 .LLST4
     /tmp/ccYCTr0w.s:543    .text:0000000000000118 .LBB162
     /tmp/ccYCTr0w.s:590    .text:0000000000000138 .LBE162
GAS LISTING /tmp/ccYCTr0w.s 			page 79


     /tmp/ccYCTr0w.s:546    .text:0000000000000118 .LBB163
     /tmp/ccYCTr0w.s:559    .text:0000000000000120 .LBE163
     /tmp/ccYCTr0w.s:7009   .debug_loc:0000000000000b8c .LLST1
     /tmp/ccYCTr0w.s:575    .text:0000000000000130 .LBB165
     /tmp/ccYCTr0w.s:586    .text:0000000000000134 .LBE165
     /tmp/ccYCTr0w.s:7018   .debug_loc:0000000000000bb2 .LLST2
     /tmp/ccYCTr0w.s:1704   .text:0000000000000448 .LBB318
     /tmp/ccYCTr0w.s:1719   .text:0000000000000454 .LBE318
     /tmp/ccYCTr0w.s:1728   .text:0000000000000460 .LBB320
     /tmp/ccYCTr0w.s:1742   .text:0000000000000468 .LBE320
     /tmp/ccYCTr0w.s:7025   .debug_loc:0000000000000bd5 .LLST34
     /tmp/ccYCTr0w.s:101    .text:0000000000000050 .LBB141
     /tmp/ccYCTr0w.s:117    .text:000000000000005c .LBE141
     /tmp/ccYCTr0w.s:622    .text:0000000000000158 .LBB561
     /tmp/ccYCTr0w.s:630    .text:000000000000015c .LBE561
     /tmp/ccYCTr0w.s:7032   .debug_loc:0000000000000bf8 .LLST66
     /tmp/ccYCTr0w.s:637    .text:0000000000000160 .LBB572
     /tmp/ccYCTr0w.s:650    .text:0000000000000168 .LBE572
     /tmp/ccYCTr0w.s:7039   .debug_loc:0000000000000c1b .LLST69
     /tmp/ccYCTr0w.s:657    .text:0000000000000170 .LVL10
     /tmp/ccYCTr0w.s:769    .text:00000000000001dc .LVL16
     /tmp/ccYCTr0w.s:2299   .text:0000000000000678 .LVL137
     /tmp/ccYCTr0w.s:2304   .text:0000000000000684 .LVL138
     /tmp/ccYCTr0w.s:2309   .text:0000000000000694 .LVL139
     /tmp/ccYCTr0w.s:2330   .text:00000000000006b4 .LVL143
     /tmp/ccYCTr0w.s:2357   .text:00000000000006d0 .LVL146
     /tmp/ccYCTr0w.s:7444   .debug_str:000000000000095a .LASF171
     /tmp/ccYCTr0w.s:10     .text:0000000000000000 .LFB41
     /tmp/ccYCTr0w.s:40     .text:0000000000000020 .LFE41
     /tmp/ccYCTr0w.s:7232   .debug_str:0000000000000305 .LASF172
     /tmp/ccYCTr0w.s:7478   .debug_str:0000000000000b19 .LASF173
     /tmp/ccYCTr0w.s:7140   .debug_str:0000000000000000 .LASF174
     /tmp/ccYCTr0w.s:7438   .debug_str:000000000000093c .LASF176
     /tmp/ccYCTr0w.s:7344   .debug_str:00000000000006a5 .LASF183
     /tmp/ccYCTr0w.s:7146   .debug_str:000000000000001c .LASF185
     /tmp/ccYCTr0w.s:7260   .debug_str:00000000000003f9 .LASF175
     /tmp/ccYCTr0w.s:7242   .debug_str:0000000000000349 .LASF177
     /tmp/ccYCTr0w.s:7310   .debug_str:000000000000059c .LASF178
     /tmp/ccYCTr0w.s:7476   .debug_str:0000000000000b05 .LASF179
     /tmp/ccYCTr0w.s:7162   .debug_str:0000000000000093 .LASF180
     /tmp/ccYCTr0w.s:7154   .debug_str:0000000000000068 .LASF181
     /tmp/ccYCTr0w.s:7322   .debug_str:0000000000000607 .LASF182
     /tmp/ccYCTr0w.s:7514   .debug_str:0000000000000c69 .LASF184
     /tmp/ccYCTr0w.s:7210   .debug_str:0000000000000243 .LASF186
     /tmp/ccYCTr0w.s:730    .text:00000000000001c4 .LVL12
     /tmp/ccYCTr0w.s:739    .text:00000000000001c8 .LVL13
     /tmp/ccYCTr0w.s:746    .text:00000000000001cc .LVL14
     /tmp/ccYCTr0w.s:758    .text:00000000000001d4 .LVL15
     /tmp/ccYCTr0w.s:783    .text:00000000000001e8 .LVL17
     /tmp/ccYCTr0w.s:1099   .text:0000000000000254 .LVL18
     /tmp/ccYCTr0w.s:1129   .text:0000000000000270 .LVL21
     /tmp/ccYCTr0w.s:1217   .text:00000000000002a8 .LVL26
     /tmp/ccYCTr0w.s:1246   .text:00000000000002bc .LVL29
     /tmp/ccYCTr0w.s:1288   .text:00000000000002dc .LVL35
     /tmp/ccYCTr0w.s:1295   .text:00000000000002e4 .LVL36
     /tmp/ccYCTr0w.s:1343   .text:0000000000000330 .LVL42
     /tmp/ccYCTr0w.s:1360   .text:0000000000000334 .LVL43
GAS LISTING /tmp/ccYCTr0w.s 			page 80


     /tmp/ccYCTr0w.s:1433   .text:000000000000037c .LVL49
     /tmp/ccYCTr0w.s:1479   .text:00000000000003a8 .LVL55
     /tmp/ccYCTr0w.s:1506   .text:00000000000003bc .LVL58
     /tmp/ccYCTr0w.s:1532   .text:00000000000003d0 .LVL61
     /tmp/ccYCTr0w.s:1558   .text:00000000000003e4 .LVL64
     /tmp/ccYCTr0w.s:1579   .text:00000000000003fc .LVL67
     /tmp/ccYCTr0w.s:1599   .text:0000000000000410 .LVL70
     /tmp/ccYCTr0w.s:1609   .text:0000000000000414 .LVL71
     /tmp/ccYCTr0w.s:1152   .text:0000000000000274 .LVL22
     /tmp/ccYCTr0w.s:1164   .text:0000000000000280 .LVL24
     /tmp/ccYCTr0w.s:1231   .text:00000000000002ac .LVL27
     /tmp/ccYCTr0w.s:1260   .text:00000000000002c0 .LVL30
     /tmp/ccYCTr0w.s:1266   .text:00000000000002c4 .LVL31
     /tmp/ccYCTr0w.s:1272   .text:00000000000002c8 .LVL32
     /tmp/ccYCTr0w.s:1278   .text:00000000000002cc .LVL33
     /tmp/ccYCTr0w.s:1297   .text:00000000000002e8 .LVL37
     /tmp/ccYCTr0w.s:1323   .text:000000000000030c .LVL39
     /tmp/ccYCTr0w.s:1316   .text:0000000000000304 .LVL38
     /tmp/ccYCTr0w.s:1402   .text:000000000000036c .LVL45
     /tmp/ccYCTr0w.s:1411   .text:0000000000000370 .LVL46
     /tmp/ccYCTr0w.s:1418   .text:0000000000000374 .LVL47
     /tmp/ccYCTr0w.s:1427   .text:0000000000000378 .LVL48
     /tmp/ccYCTr0w.s:1446   .text:0000000000000380 .LVL50
     /tmp/ccYCTr0w.s:2311   .text:0000000000000698 .LVL140
     /tmp/ccYCTr0w.s:2314   .text:000000000000069c .LVL141
     /tmp/ccYCTr0w.s:1452   .text:0000000000000384 .LVL51
     /tmp/ccYCTr0w.s:1465   .text:0000000000000394 .LVL53
     /tmp/ccYCTr0w.s:1490   .text:00000000000003ac .LVL56
     /tmp/ccYCTr0w.s:1517   .text:00000000000003c0 .LVL59
     /tmp/ccYCTr0w.s:1543   .text:00000000000003d4 .LVL62
     /tmp/ccYCTr0w.s:1590   .text:0000000000000400 .LVL68
     /tmp/ccYCTr0w.s:1614   .text:0000000000000418 .LVL72
     /tmp/ccYCTr0w.s:1632   .text:0000000000000428 .LVL73
     /tmp/ccYCTr0w.s:1641   .text:000000000000042c .LVL74
     /tmp/ccYCTr0w.s:1114   .text:0000000000000268 .LVL19
     /tmp/ccYCTr0w.s:1123   .text:000000000000026c .LVL20
     /tmp/ccYCTr0w.s:1205   .text:00000000000002a0 .LVL25
     /tmp/ccYCTr0w.s:174    .text:00000000000000a8 .LVL0
     /tmp/ccYCTr0w.s:551    .text:000000000000011c .LVL2
     /tmp/ccYCTr0w.s:1647   .text:0000000000000430 .LVL75
     /tmp/ccYCTr0w.s:1739   .text:0000000000000468 .LVL80
     /tmp/ccYCTr0w.s:1768   .text:000000000000047c .LVL83
     /tmp/ccYCTr0w.s:1810   .text:000000000000049c .LVL89
     /tmp/ccYCTr0w.s:1817   .text:00000000000004a4 .LVL90
     /tmp/ccYCTr0w.s:1865   .text:00000000000004f0 .LVL96
     /tmp/ccYCTr0w.s:1882   .text:00000000000004f4 .LVL97
     /tmp/ccYCTr0w.s:1955   .text:000000000000053c .LVL103
     /tmp/ccYCTr0w.s:2000   .text:0000000000000568 .LVL109
     /tmp/ccYCTr0w.s:2027   .text:000000000000057c .LVL112
     /tmp/ccYCTr0w.s:2053   .text:0000000000000590 .LVL115
     /tmp/ccYCTr0w.s:2079   .text:00000000000005a4 .LVL118
     /tmp/ccYCTr0w.s:2096   .text:00000000000005b4 .LVL120
     /tmp/ccYCTr0w.s:2116   .text:00000000000005c8 .LVL123
     /tmp/ccYCTr0w.s:2130   .text:00000000000005cc .LVL124
     /tmp/ccYCTr0w.s:2220   .text:0000000000000640 .LVL132
     /tmp/ccYCTr0w.s:2231   .text:0000000000000644 .LVL133
     /tmp/ccYCTr0w.s:1674   .text:0000000000000434 .LVL76
GAS LISTING /tmp/ccYCTr0w.s 			page 81


     /tmp/ccYCTr0w.s:1686   .text:0000000000000440 .LVL78
     /tmp/ccYCTr0w.s:1753   .text:000000000000046c .LVL81
     /tmp/ccYCTr0w.s:1782   .text:0000000000000480 .LVL84
     /tmp/ccYCTr0w.s:1788   .text:0000000000000484 .LVL85
     /tmp/ccYCTr0w.s:1794   .text:0000000000000488 .LVL86
     /tmp/ccYCTr0w.s:1800   .text:000000000000048c .LVL87
     /tmp/ccYCTr0w.s:1819   .text:00000000000004a8 .LVL91
     /tmp/ccYCTr0w.s:1845   .text:00000000000004cc .LVL93
     /tmp/ccYCTr0w.s:1838   .text:00000000000004c4 .LVL92
     /tmp/ccYCTr0w.s:1924   .text:000000000000052c .LVL99
     /tmp/ccYCTr0w.s:1933   .text:0000000000000530 .LVL100
     /tmp/ccYCTr0w.s:1940   .text:0000000000000534 .LVL101
     /tmp/ccYCTr0w.s:1949   .text:0000000000000538 .LVL102
     /tmp/ccYCTr0w.s:1968   .text:0000000000000540 .LVL104
     /tmp/ccYCTr0w.s:2333   .text:00000000000006b8 .LVL144
     /tmp/ccYCTr0w.s:1974   .text:0000000000000544 .LVL105
     /tmp/ccYCTr0w.s:1986   .text:0000000000000554 .LVL107
     /tmp/ccYCTr0w.s:2011   .text:000000000000056c .LVL110
     /tmp/ccYCTr0w.s:2038   .text:0000000000000580 .LVL113
     /tmp/ccYCTr0w.s:2064   .text:0000000000000594 .LVL116
     /tmp/ccYCTr0w.s:2107   .text:00000000000005b8 .LVL121
     /tmp/ccYCTr0w.s:2165   .text:00000000000005f8 .LVL125
     /tmp/ccYCTr0w.s:2189   .text:0000000000000630 .LVL128
     /tmp/ccYCTr0w.s:2198   .text:0000000000000634 .LVL129
     /tmp/ccYCTr0w.s:2205   .text:0000000000000638 .LVL130
     /tmp/ccYCTr0w.s:2214   .text:000000000000063c .LVL131
     /tmp/ccYCTr0w.s:2236   .text:0000000000000648 .LVL134
     /tmp/ccYCTr0w.s:2264   .text:0000000000000660 .LVL135
     /tmp/ccYCTr0w.s:2273   .text:0000000000000664 .LVL136
     /tmp/ccYCTr0w.s:545    .text:0000000000000118 .LVL1
     /tmp/ccYCTr0w.s:556    .text:0000000000000120 .LVL3
     /tmp/ccYCTr0w.s:574    .text:0000000000000130 .LVL4
     /tmp/ccYCTr0w.s:583    .text:0000000000000134 .LVL5
     /tmp/ccYCTr0w.s:1727   .text:0000000000000460 .LVL79
     /tmp/ccYCTr0w.s:621    .text:0000000000000158 .LVL6
     /tmp/ccYCTr0w.s:628    .text:000000000000015c .LVL7
     /tmp/ccYCTr0w.s:636    .text:0000000000000160 .LVL8
     /tmp/ccYCTr0w.s:646    .text:0000000000000168 .LVL9
     /tmp/ccYCTr0w.s:2411   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccYCTr0w.s:164    .text:00000000000000a0 .LBB147
     /tmp/ccYCTr0w.s:180    .text:00000000000000b0 .LBE147
     /tmp/ccYCTr0w.s:190    .text:00000000000000b0 .LBB324
     /tmp/ccYCTr0w.s:197    .text:00000000000000b8 .LBE324
     /tmp/ccYCTr0w.s:207    .text:00000000000000b8 .LBB325
     /tmp/ccYCTr0w.s:216    .text:00000000000000c0 .LBE325
     /tmp/ccYCTr0w.s:226    .text:00000000000000c0 .LBB326
     /tmp/ccYCTr0w.s:237    .text:00000000000000c8 .LBE326
     /tmp/ccYCTr0w.s:247    .text:00000000000000c8 .LBB327
     /tmp/ccYCTr0w.s:260    .text:00000000000000d0 .LBE327
     /tmp/ccYCTr0w.s:270    .text:00000000000000d0 .LBB328
     /tmp/ccYCTr0w.s:285    .text:00000000000000d8 .LBE328
     /tmp/ccYCTr0w.s:295    .text:00000000000000d8 .LBB329
     /tmp/ccYCTr0w.s:312    .text:00000000000000e0 .LBE329
     /tmp/ccYCTr0w.s:322    .text:00000000000000e0 .LBB330
     /tmp/ccYCTr0w.s:341    .text:00000000000000e8 .LBE330
     /tmp/ccYCTr0w.s:351    .text:00000000000000e8 .LBB331
     /tmp/ccYCTr0w.s:372    .text:00000000000000f0 .LBE331
GAS LISTING /tmp/ccYCTr0w.s 			page 82


     /tmp/ccYCTr0w.s:382    .text:00000000000000f0 .LBB332
     /tmp/ccYCTr0w.s:405    .text:00000000000000f8 .LBE332
     /tmp/ccYCTr0w.s:415    .text:00000000000000f8 .LBB333
     /tmp/ccYCTr0w.s:440    .text:0000000000000100 .LBE333
     /tmp/ccYCTr0w.s:450    .text:0000000000000100 .LBB334
     /tmp/ccYCTr0w.s:477    .text:0000000000000108 .LBE334
     /tmp/ccYCTr0w.s:487    .text:0000000000000108 .LBB335
     /tmp/ccYCTr0w.s:516    .text:0000000000000110 .LBE335
     /tmp/ccYCTr0w.s:526    .text:0000000000000110 .LBB336
     /tmp/ccYCTr0w.s:605    .text:0000000000000138 .LBE336
     /tmp/ccYCTr0w.s:1664   .text:0000000000000430 .LBB337
     /tmp/ccYCTr0w.s:2294   .text:0000000000000668 .LBE337
     /tmp/ccYCTr0w.s:2343   .text:00000000000006b8 .LBB338
     /tmp/ccYCTr0w.s:2366   .text:00000000000006d0 .LBE338
     /tmp/ccYCTr0w.s:1959   .text:000000000000053c .LBB222
     /tmp/ccYCTr0w.s:1998   .text:0000000000000564 .LBE222
     /tmp/ccYCTr0w.s:2350   .text:00000000000006b8 .LBB226
     /tmp/ccYCTr0w.s:2359   .text:00000000000006d0 .LBE226
     /tmp/ccYCTr0w.s:773    .text:00000000000001e0 .LBB352
     /tmp/ccYCTr0w.s:789    .text:00000000000001f0 .LBE352
     /tmp/ccYCTr0w.s:797    .text:00000000000001f0 .LBB502
     /tmp/ccYCTr0w.s:804    .text:00000000000001f8 .LBE502
     /tmp/ccYCTr0w.s:812    .text:00000000000001f8 .LBB503
     /tmp/ccYCTr0w.s:821    .text:0000000000000200 .LBE503
     /tmp/ccYCTr0w.s:829    .text:0000000000000200 .LBB504
     /tmp/ccYCTr0w.s:840    .text:0000000000000208 .LBE504
     /tmp/ccYCTr0w.s:848    .text:0000000000000208 .LBB505
     /tmp/ccYCTr0w.s:861    .text:0000000000000210 .LBE505
     /tmp/ccYCTr0w.s:869    .text:0000000000000210 .LBB506
     /tmp/ccYCTr0w.s:884    .text:0000000000000218 .LBE506
     /tmp/ccYCTr0w.s:892    .text:0000000000000218 .LBB507
     /tmp/ccYCTr0w.s:909    .text:0000000000000220 .LBE507
     /tmp/ccYCTr0w.s:917    .text:0000000000000220 .LBB508
     /tmp/ccYCTr0w.s:936    .text:0000000000000228 .LBE508
     /tmp/ccYCTr0w.s:944    .text:0000000000000228 .LBB509
     /tmp/ccYCTr0w.s:965    .text:0000000000000230 .LBE509
     /tmp/ccYCTr0w.s:973    .text:0000000000000230 .LBB510
     /tmp/ccYCTr0w.s:996    .text:0000000000000238 .LBE510
     /tmp/ccYCTr0w.s:1004   .text:0000000000000238 .LBB511
     /tmp/ccYCTr0w.s:1029   .text:0000000000000240 .LBE511
     /tmp/ccYCTr0w.s:1037   .text:0000000000000240 .LBB512
     /tmp/ccYCTr0w.s:1064   .text:0000000000000248 .LBE512
     /tmp/ccYCTr0w.s:1072   .text:0000000000000248 .LBB513
     /tmp/ccYCTr0w.s:1662   .text:0000000000000430 .LBE513
     /tmp/ccYCTr0w.s:2316   .text:000000000000069c .LBB515
     /tmp/ccYCTr0w.s:2341   .text:00000000000006b8 .LBE515
     /tmp/ccYCTr0w.s:1437   .text:000000000000037c .LBB407
     /tmp/ccYCTr0w.s:1477   .text:00000000000003a4 .LBE407
     /tmp/ccYCTr0w.s:2323   .text:000000000000069c .LBB411
     /tmp/ccYCTr0w.s:2334   .text:00000000000006b8 .LBE411
     /tmp/ccYCTr0w.s:2375   .gcc_except_table:0000000000000000 .LLSDA42

UNDEFINED SYMBOLS
_ZN3TCB16timeSliceCounterE
_ZN3TCB7runningE
console_handler
_ZN3TCB8dispatchEv
GAS LISTING /tmp/ccYCTr0w.s 			page 83


_ZN15MemoryAllocator6mallocEm
_ZN15MemoryAllocator4freeEPv
_ZN3TCB12createThreadEPFvPvES0_S0_
_ZN3TCB21numberOfActiveThreadsE
_ZN9Scheduler3getEv
_ZN3TCB13contextSwitchEPNS_7ContextES1_
_Z10kmem_allocm
_ZN13SemaphoreBaseC1Ei
_ZN13SemaphoreBase5closeEv
_ZN13SemaphoreBase4waitEv
_ZN13SemaphoreBase6signalEv
__getc
__putc
_Z12kprintStringPKc
_Z13kprintIntegerm
_ZdlPv
_Unwind_Resume
__gxx_personality_v0
